// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-04-26 15:35:14

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=30;
    public static final int T__161=161;
    public static final int TOKEN=33;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=31;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=25;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=32;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=29;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=26;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=28;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=24;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=27;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[730+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document184_static.FOLLOW_sentences_in_document184);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 51:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences205_static.FOLLOW_sentenceStructure_in_sentences205);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences207_static.FOLLOW_unmatchedPhrase_in_sentences207);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences211_static.FOLLOW_stop_in_sentences211);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure221_static.FOLLOW_nounphrase_in_sentenceStructure221);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure223_static.FOLLOW_verbphrase_in_sentenceStructure223);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure225_static.FOLLOW_prepphrase_in_sentenceStructure225);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure227_static.FOLLOW_prepphraseAfter_in_sentenceStructure227);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure232_static.FOLLOW_advAdj_in_sentenceStructure232);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure234_static.FOLLOW_colon_in_sentenceStructure234);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure239_static.FOLLOW_conjunction_in_sentenceStructure239);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure241_static.FOLLOW_rbconj_in_sentenceStructure241);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure243_static.FOLLOW_comma_in_sentenceStructure243);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:58:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase256_static.FOLLOW_unmatchedToken_in_unmatchedPhrase256);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 59:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:1: unmatchedToken : ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode18 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp19 = null;

        ChemicalChunkerParser.inAll_return inAll20 = null;

        ChemicalChunkerParser.nnexample_return nnexample21 = null;

        ChemicalChunkerParser.nnstate_return nnstate22 = null;

        ChemicalChunkerParser.nntime_return nntime23 = null;

        ChemicalChunkerParser.nnmass_return nnmass24 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar25 = null;

        ChemicalChunkerParser.nnamount_return nnamount26 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere27 = null;

        ChemicalChunkerParser.nneq_return nneq28 = null;

        ChemicalChunkerParser.nnvol_return nnvol29 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity30 = null;

        ChemicalChunkerParser.nntemp_return nntemp31 = null;

        ChemicalChunkerParser.nnflash_return nnflash32 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral33 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod34 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure35 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn36 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography37 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum38 = null;

        ChemicalChunkerParser.nncycle_return nncycle39 = null;

        ChemicalChunkerParser.nntimes_return nntimes40 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm41 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts42 = null;

        ChemicalChunkerParser.oscarase_return oscarase43 = null;

        ChemicalChunkerParser.verb_return verb44 = null;

        ChemicalChunkerParser.nnadd_return nnadd45 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture46 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus47 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate48 = null;

        ChemicalChunkerParser.nndry_return nndry49 = null;

        ChemicalChunkerParser.nnextract_return nnextract50 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter51 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate52 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify53 = null;

        ChemicalChunkerParser.nnremove_return nnremove54 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize55 = null;

        ChemicalChunkerParser.nnyield_return nnyield56 = null;

        ChemicalChunkerParser.colon_return colon57 = null;

        ChemicalChunkerParser.apost_return apost58 = null;

        ChemicalChunkerParser.neg_return neg59 = null;

        ChemicalChunkerParser.dash_return dash60 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent61 = null;

        ChemicalChunkerParser.lsqb_return lsqb62 = null;

        ChemicalChunkerParser.rsqb_return rsqb63 = null;

        ChemicalChunkerParser.lrb_return lrb64 = null;

        ChemicalChunkerParser.rrb_return rrb65 = null;

        ChemicalChunkerParser.cc_return cc66 = null;

        ChemicalChunkerParser.dt_return dt67 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE68 = null;

        ChemicalChunkerParser.fw_return fw69 = null;

        ChemicalChunkerParser.md_return md70 = null;

        ChemicalChunkerParser.nn_return nn71 = null;

        ChemicalChunkerParser.nns_return nns72 = null;

        ChemicalChunkerParser.nnp_return nnp73 = null;

        ChemicalChunkerParser.prp_return prp74 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss75 = null;

        ChemicalChunkerParser.rbconj_return rbconj76 = null;

        ChemicalChunkerParser.sym_return sym77 = null;

        ChemicalChunkerParser.uh_return uh78 = null;

        ChemicalChunkerParser.clause_return clause79 = null;

        ChemicalChunkerParser.comma_return comma80 = null;

        ChemicalChunkerParser.ls_return ls81 = null;

        ChemicalChunkerParser.nnps_return nnps82 = null;

        ChemicalChunkerParser.pos_return pos83 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:2: ( ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:4: ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:4: ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos )
            int alt7=69;
            switch ( input.LA(1) ) {
            case 34:
            case 140:
                {
                alt7=1;
                }
                break;
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt7=2;
                }
                break;
            case 39:
                {
                alt7=3;
                }
                break;
            case 40:
                {
                alt7=4;
                }
                break;
            case 42:
                {
                alt7=5;
                }
                break;
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 144:
            case 163:
                {
                alt7=6;
                }
                break;
            case 78:
                {
                alt7=7;
                }
                break;
            case 59:
                {
                alt7=8;
                }
                break;
            case 60:
                {
                alt7=9;
                }
                break;
            case 61:
                {
                alt7=10;
                }
                break;
            case 63:
                {
                alt7=11;
                }
                break;
            case 62:
                {
                alt7=12;
                }
                break;
            case 64:
                {
                alt7=13;
                }
                break;
            case 65:
                {
                alt7=14;
                }
                break;
            case 66:
                {
                alt7=15;
                }
                break;
            case 67:
                {
                alt7=16;
                }
                break;
            case 68:
                {
                alt7=17;
                }
                break;
            case 69:
                {
                alt7=18;
                }
                break;
            case 70:
                {
                alt7=19;
                }
                break;
            case 71:
                {
                alt7=20;
                }
                break;
            case 72:
                {
                alt7=21;
                }
                break;
            case 73:
                {
                alt7=22;
                }
                break;
            case 74:
                {
                alt7=23;
                }
                break;
            case 75:
                {
                alt7=24;
                }
                break;
            case 76:
                {
                alt7=25;
                }
                break;
            case 77:
                {
                alt7=26;
                }
                break;
            case 79:
                {
                alt7=27;
                }
                break;
            case 38:
                {
                alt7=28;
                }
                break;
            case 37:
                {
                alt7=29;
                }
                break;
            case 80:
            case 81:
            case 82:
            case 83:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
            case 98:
            case 99:
            case 100:
            case 101:
            case 103:
            case 105:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 113:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 122:
            case 123:
            case 124:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt7=30;
                }
                break;
            case 84:
                {
                alt7=31;
                }
                break;
            case 85:
                {
                alt7=32;
                }
                break;
            case 95:
                {
                alt7=33;
                }
                break;
            case 97:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 104:
                {
                alt7=36;
                }
                break;
            case 106:
                {
                alt7=37;
                }
                break;
            case 112:
                {
                alt7=38;
                }
                break;
            case 114:
                {
                alt7=39;
                }
                break;
            case 118:
                {
                alt7=40;
                }
                break;
            case 121:
                {
                alt7=41;
                }
                break;
            case 125:
                {
                alt7=42;
                }
                break;
            case 127:
                {
                alt7=43;
                }
                break;
            case 129:
                {
                alt7=44;
                }
                break;
            case 130:
                {
                alt7=45;
                }
                break;
            case 131:
                {
                alt7=46;
                }
                break;
            case 133:
                {
                alt7=47;
                }
                break;
            case 134:
                {
                alt7=48;
                }
                break;
            case 135:
                {
                alt7=49;
                }
                break;
            case 137:
                {
                alt7=50;
                }
                break;
            case 138:
                {
                alt7=51;
                }
                break;
            case 139:
                {
                alt7=52;
                }
                break;
            case 141:
                {
                alt7=53;
                }
                break;
            case 136:
                {
                alt7=54;
                }
                break;
            case 143:
                {
                alt7=55;
                }
                break;
            case 149:
                {
                alt7=56;
                }
                break;
            case 150:
                {
                alt7=57;
                }
                break;
            case 151:
                {
                alt7=58;
                }
                break;
            case 152:
                {
                alt7=59;
                }
                break;
            case 156:
                {
                alt7=60;
                }
                break;
            case 157:
                {
                alt7=61;
                }
                break;
            case 126:
                {
                alt7=62;
                }
                break;
            case 162:
                {
                alt7=63;
                }
                break;
            case 164:
                {
                alt7=64;
                }
                break;
            case 142:
            case 154:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt7=65;
                }
                break;
            case 128:
                {
                alt7=66;
                }
                break;
            case 148:
                {
                alt7=67;
                }
                break;
            case 153:
                {
                alt7=68;
                }
                break;
            case 155:
                {
                alt7=69;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:5: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedToken276_static.FOLLOW_number_in_unmatchedToken276);
                    number15=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:12: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken278_static.FOLLOW_advAdj_in_unmatchedToken278);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:19: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken280_static.FOLLOW_tmunicode_in_unmatchedToken280);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:29: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken282_static.FOLLOW_cdunicode_in_unmatchedToken282);
                    cdunicode18=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:39: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken284_static.FOLLOW_jjcomp_in_unmatchedToken284);
                    jjcomp19=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:46: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken286_static.FOLLOW_inAll_in_unmatchedToken286);
                    inAll20=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken290_static.FOLLOW_nnexample_in_unmatchedToken290);
                    nnexample21=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken292_static.FOLLOW_nnstate_in_unmatchedToken292);
                    nnstate22=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken294_static.FOLLOW_nntime_in_unmatchedToken294);
                    nntime23=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken296_static.FOLLOW_nnmass_in_unmatchedToken296);
                    nnmass24=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken298_static.FOLLOW_nnmolar_in_unmatchedToken298);
                    nnmolar25=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken300_static.FOLLOW_nnamount_in_unmatchedToken300);
                    nnamount26=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken302_static.FOLLOW_nnatmosphere_in_unmatchedToken302);
                    nnatmosphere27=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken304_static.FOLLOW_nneq_in_unmatchedToken304);
                    nneq28=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken306_static.FOLLOW_nnvol_in_unmatchedToken306);
                    nnvol29=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken308_static.FOLLOW_nnchementity_in_unmatchedToken308);
                    nnchementity30=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken310_static.FOLLOW_nntemp_in_unmatchedToken310);
                    nntemp31=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:95: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken312_static.FOLLOW_nnflash_in_unmatchedToken312);
                    nnflash32=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:103: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken314_static.FOLLOW_nngeneral_in_unmatchedToken314);
                    nngeneral33=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:113: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken316_static.FOLLOW_nnmethod_in_unmatchedToken316);
                    nnmethod34=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:122: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken318_static.FOLLOW_nnpressure_in_unmatchedToken318);
                    nnpressure35=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:133: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken320_static.FOLLOW_nncolumn_in_unmatchedToken320);
                    nncolumn36=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:142: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken322_static.FOLLOW_nnchromatography_in_unmatchedToken322);
                    nnchromatography37=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:159: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken324_static.FOLLOW_nnvacuum_in_unmatchedToken324);
                    nnvacuum38=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:168: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken326_static.FOLLOW_nncycle_in_unmatchedToken326);
                    nncycle39=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:176: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken328_static.FOLLOW_nntimes_in_unmatchedToken328);
                    nntimes40=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken332_static.FOLLOW_oscarcm_in_unmatchedToken332);
                    oscarcm41=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken334_static.FOLLOW_oscaronts_in_unmatchedToken334);
                    oscaronts42=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken336_static.FOLLOW_oscarase_in_unmatchedToken336);
                    oscarase43=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken338_static.FOLLOW_verb_in_unmatchedToken338);
                    verb44=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken340_static.FOLLOW_nnadd_in_unmatchedToken340);
                    nnadd45=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken342_static.FOLLOW_nnmixture_in_unmatchedToken342);
                    nnmixture46=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken344_static.FOLLOW_nnapparatus_in_unmatchedToken344);
                    nnapparatus47=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken346_static.FOLLOW_nnconcentrate_in_unmatchedToken346);
                    nnconcentrate48=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken348_static.FOLLOW_nndry_in_unmatchedToken348);
                    nndry49=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken350_static.FOLLOW_nnextract_in_unmatchedToken350);
                    nnextract50=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken352_static.FOLLOW_nnfilter_in_unmatchedToken352);
                    nnfilter51=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken354_static.FOLLOW_nnprecipitate_in_unmatchedToken354);
                    nnprecipitate52=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken356_static.FOLLOW_nnpurify_in_unmatchedToken356);
                    nnpurify53=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken358_static.FOLLOW_nnremove_in_unmatchedToken358);
                    nnremove54=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken360_static.FOLLOW_nnsynthesize_in_unmatchedToken360);
                    nnsynthesize55=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken362_static.FOLLOW_nnyield_in_unmatchedToken362);
                    nnyield56=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken364_static.FOLLOW_colon_in_unmatchedToken364);
                    colon57=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken366_static.FOLLOW_apost_in_unmatchedToken366);
                    apost58=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken368_static.FOLLOW_neg_in_unmatchedToken368);
                    neg59=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken370_static.FOLLOW_dash_in_unmatchedToken370);
                    dash60=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken372_static.FOLLOW_nnpercent_in_unmatchedToken372);
                    nnpercent61=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken374_static.FOLLOW_lsqb_in_unmatchedToken374);
                    lsqb62=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken376_static.FOLLOW_rsqb_in_unmatchedToken376);
                    rsqb63=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken378_static.FOLLOW_lrb_in_unmatchedToken378);
                    lrb64=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken380_static.FOLLOW_rrb_in_unmatchedToken380);
                    rrb65=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken384_static.FOLLOW_cc_in_unmatchedToken384);
                    cc66=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken386_static.FOLLOW_dt_in_unmatchedToken386);
                    dt67=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken388_static.FOLLOW_dtTHE_in_unmatchedToken388);
                    dtTHE68=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken390_static.FOLLOW_fw_in_unmatchedToken390);
                    fw69=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken392_static.FOLLOW_md_in_unmatchedToken392);
                    md70=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken394_static.FOLLOW_nn_in_unmatchedToken394);
                    nn71=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken396_static.FOLLOW_nns_in_unmatchedToken396);
                    nns72=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken398_static.FOLLOW_nnp_in_unmatchedToken398);
                    nnp73=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken400_static.FOLLOW_prp_in_unmatchedToken400);
                    prp74=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken402_static.FOLLOW_prp_poss_in_unmatchedToken402);
                    prp_poss75=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken404_static.FOLLOW_rbconj_in_unmatchedToken404);
                    rbconj76=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken406_static.FOLLOW_sym_in_unmatchedToken406);
                    sym77=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken408_static.FOLLOW_uh_in_unmatchedToken408);
                    uh78=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken410_static.FOLLOW_clause_in_unmatchedToken410);
                    clause79=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken412_static.FOLLOW_comma_in_unmatchedToken412);
                    comma80=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken414_static.FOLLOW_ls_in_unmatchedToken414);
                    ls81=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken416_static.FOLLOW_nnps_in_unmatchedToken416);
                    nnps82=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken418_static.FOLLOW_pos_in_unmatchedToken418);
                    pos83=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure84 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase429_static.FOLLOW_nounphraseStructure_in_nounphrase429);
            nounphraseStructure84=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure84.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 68:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure185 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure286 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure452_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure452);
                    nounphraseStructure185=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure185.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure454_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure454);
                    nounphraseStructure286=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure286.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:73:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus87 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1463_static.FOLLOW_multiApparatus_in_nounphraseStructure1463);
            multiApparatus87=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus87.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE88 = null;

        ChemicalChunkerParser.dt_return dt89 = null;

        ChemicalChunkerParser.advAdj_return advAdj90 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase91 = null;

        ChemicalChunkerParser.noun_return noun92 = null;

        ChemicalChunkerParser.number_return number93 = null;

        ChemicalChunkerParser.ratio_return ratio94 = null;

        ChemicalChunkerParser.conjunction_return conjunction95 = null;

        ChemicalChunkerParser.advAdj_return advAdj96 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase97 = null;

        ChemicalChunkerParser.noun_return noun98 = null;

        ChemicalChunkerParser.number_return number99 = null;

        ChemicalChunkerParser.ratio_return ratio100 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf101 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN102 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase103 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 136:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2483_static.FOLLOW_dtTHE_in_nounphraseStructure2483);
                    dtTHE88=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE88.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred84_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2486_static.FOLLOW_dt_in_nounphraseStructure2486);
                    dt89=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt89.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2489_static.FOLLOW_advAdj_in_nounphraseStructure2489);
            	    advAdj90=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj90.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:24: ( dissolvePhrase | noun | number | ratio )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2494_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2494);
            	    dissolvePhrase91=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase91.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2496_static.FOLLOW_noun_in_nounphraseStructure2496);
            	    noun92=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun92.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2498_static.FOLLOW_number_in_nounphraseStructure2498);
            	    number93=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number93.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2500_static.FOLLOW_ratio_in_nounphraseStructure2500);
            	    ratio94=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio94.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2508_static.FOLLOW_conjunction_in_nounphraseStructure2508);
            	    	    conjunction95=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction95.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2511_static.FOLLOW_advAdj_in_nounphraseStructure2511);
            	    	    advAdj96=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj96.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:85: ( dissolvePhrase | noun | number | ratio )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2515_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2515);
            	            dissolvePhrase97=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase97.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:101: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2517_static.FOLLOW_noun_in_nounphraseStructure2517);
            	            noun98=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun98.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:106: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2519_static.FOLLOW_number_in_nounphraseStructure2519);
            	            number99=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number99.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:113: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2521_static.FOLLOW_ratio_in_nounphraseStructure2521);
            	            ratio100=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio100.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 46:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 52:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 52:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 46:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2531_static.FOLLOW_prepphraseOf_in_nounphraseStructure2531);
            	            prepphraseOf101=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf101.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2534_static.FOLLOW_prepphraseIN_in_nounphraseStructure2534);
            	            prepphraseIN102=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN102.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2537_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2537);
            	            dissolvePhrase103=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase103.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure104 = null;

        ChemicalChunkerParser.lrb_return lrb105 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure106 = null;

        ChemicalChunkerParser.rrb_return rrb107 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt20=2;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase552_static.FOLLOW_dissolveStructure_in_dissolvePhrase552);
                    dissolveStructure104=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure104.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase554_static.FOLLOW_lrb_in_dissolvePhrase554);
                    lrb105=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb105.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase556_static.FOLLOW_dissolveStructure_in_dissolvePhrase556);
                    dissolveStructure106=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure106.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase558_static.FOLLOW_rrb_in_dissolvePhrase558);
                    rrb107=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb107.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, rrb, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 78:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:1: dissolveStructure : ( adj )? ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj108 = null;

        ChemicalChunkerParser.nnp_return nnp109 = null;

        ChemicalChunkerParser.molecule_return molecule110 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule111 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity112 = null;

        ChemicalChunkerParser.molecule_return molecule113 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule114 = null;

        ChemicalChunkerParser.inin_return inin115 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE116 = null;

        ChemicalChunkerParser.adj_return adj117 = null;

        ChemicalChunkerParser.nnp_return nnp118 = null;

        ChemicalChunkerParser.molecule_return molecule119 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule120 = null;

        ChemicalChunkerParser.conjunction_return conjunction121 = null;

        ChemicalChunkerParser.molecule_return molecule122 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:2: ( ( adj )? ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:4: ( adj )? ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:4: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure583_static.FOLLOW_adj_in_dissolveStructure583);
                    adj108=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj108.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:9: ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) )
            int alt24=2;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt24=1;
                }
                break;
            case 34:
            case 35:
            case 36:
            case 41:
            case 42:
            case 63:
            case 79:
            case 128:
            case 137:
            case 140:
            case 145:
            case 146:
            case 147:
                {
                alt24=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:10: nnp ( molecule | unnamedmolecule | nnchementity )
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure587_static.FOLLOW_nnp_in_dissolveStructure587);
                    nnp109=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp109.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: ( molecule | unnamedmolecule | nnchementity )
                    int alt22=3;
                    alt22 = dfa22.predict(input);
                    switch (alt22) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:15: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure590_static.FOLLOW_molecule_in_dissolveStructure590);
                            molecule110=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule110.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:24: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure592_static.FOLLOW_unnamedmolecule_in_dissolveStructure592);
                            unnamedmolecule111=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule111.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:40: nnchementity
                            {
                            pushFollow(FOLLOW_nnchementity_in_dissolveStructure594_static.FOLLOW_nnchementity_in_dissolveStructure594);
                            nnchementity112=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity112.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:56: ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:56: ( molecule | unnamedmolecule )
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:57: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure600_static.FOLLOW_molecule_in_dissolveStructure600);
                            molecule113=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule113.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:66: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure602_static.FOLLOW_unnamedmolecule_in_dissolveStructure602);
                            unnamedmolecule114=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule114.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:84: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt30=0;
            loop30:
            do {
                int alt30=2;
                switch ( input.LA(1) ) {
                case 46:
                    {
                    int LA30_2 = input.LA(2);

                    if ( (synpred110_ChemicalChunker()) ) {
                        alt30=1;
                    }


                    }
                    break;

                }

                switch (alt30) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:85: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure607_static.FOLLOW_inin_in_dissolveStructure607);
            	    inin115=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin115.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:90: ( dtTHE )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 136:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure609_static.FOLLOW_dtTHE_in_dissolveStructure609);
            	            dtTHE116=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE116.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:97: ( adj )?
            	    int alt26=2;
            	    alt26 = dfa26.predict(input);
            	    switch (alt26) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure612_static.FOLLOW_adj_in_dissolveStructure612);
            	            adj117=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj117.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:102: ( nnp )?
            	    int alt27=2;
            	    switch ( input.LA(1) ) {
            	        case 152:
            	            {
            	            alt27=1;
            	            }
            	            break;
            	    }

            	    switch (alt27) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure615_static.FOLLOW_nnp_in_dissolveStructure615);
            	            nnp118=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp118.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:107: ( molecule | unnamedmolecule )
            	    int alt28=2;
            	    alt28 = dfa28.predict(input);
            	    switch (alt28) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:108: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure619_static.FOLLOW_molecule_in_dissolveStructure619);
            	            molecule119=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule119.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:117: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure621_static.FOLLOW_unnamedmolecule_in_dissolveStructure621);
            	            unnamedmolecule120=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule120.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:134: ( conjunction molecule )*
            	    loop29:
            	    do {
            	        int alt29=2;
            	        switch ( input.LA(1) ) {
            	        case 139:
            	            {
            	            int LA29_1 = input.LA(2);

            	            if ( (synpred109_ChemicalChunker()) ) {
            	                alt29=1;
            	            }


            	            }
            	            break;
            	        case 128:
            	            {
            	            int LA29_2 = input.LA(2);

            	            if ( (synpred109_ChemicalChunker()) ) {
            	                alt29=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt29) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:135: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure625_static.FOLLOW_conjunction_in_dissolveStructure625);
            	    	    conjunction121=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction121.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure627_static.FOLLOW_molecule_in_dissolveStructure627);
            	    	    molecule122=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule122.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop29;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        throw eee;
                }
                cnt30++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc123 = null;

        ChemicalChunkerParser.comma_return comma124 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:2: ( cc | comma )
            int alt31=2;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt31=1;
                }
                break;
            case 128:
                {
                alt31=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction643_static.FOLLOW_cc_in_conjunction643);
                    cc123=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc123.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction645_static.FOLLOW_comma_in_conjunction645);
                    comma124=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma124.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure125 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase654_static.FOLLOW_verbphraseStructure_in_verbphrase654);
            verbphraseStructure125=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure125.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt126 = null;

        ChemicalChunkerParser.to_return to127 = null;

        ChemicalChunkerParser.inAll_return inAll128 = null;

        ChemicalChunkerParser.inafter_return inafter129 = null;

        ChemicalChunkerParser.md_return md130 = null;

        ChemicalChunkerParser.rbconj_return rbconj131 = null;

        ChemicalChunkerParser.adv_return adv132 = null;

        ChemicalChunkerParser.adj_return adj133 = null;

        ChemicalChunkerParser.verb_return verb134 = null;

        ChemicalChunkerParser.md_return md135 = null;

        ChemicalChunkerParser.adv_return adv136 = null;

        ChemicalChunkerParser.adj_return adj137 = null;

        ChemicalChunkerParser.neg_return neg138 = null;

        ChemicalChunkerParser.inoff_return inoff139 = null;

        ChemicalChunkerParser.cc_return cc140 = null;

        ChemicalChunkerParser.comma_return comma141 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase142 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure672_static.FOLLOW_dt_in_verbphraseStructure672);
                    dt126=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt126.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 163:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred113_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure675_static.FOLLOW_to_in_verbphraseStructure675);
                    to127=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to127.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt34=1;
                    }
                    break;
                case 45:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred114_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure678_static.FOLLOW_inAll_in_verbphraseStructure678);
                    inAll128=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll128.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 45:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure681_static.FOLLOW_inafter_in_verbphraseStructure681);
                    inafter129=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter129.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        switch ( input.LA(1) ) {
            	        case 149:
            	            {
            	            alt36=1;
            	            }
            	            break;

            	        }

            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure685_static.FOLLOW_md_in_verbphraseStructure685);
            	    	    md130=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md130.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:53: ( rbconj )?
            	    int alt37=2;
            	    switch ( input.LA(1) ) {
            	        case 126:
            	            {
            	            alt37=1;
            	            }
            	            break;
            	    }

            	    switch (alt37) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure688_static.FOLLOW_rbconj_in_verbphraseStructure688);
            	            rbconj131=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj131.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:61: ( adv )*
            	    loop38:
            	    do {
            	        int alt38=2;
            	        switch ( input.LA(1) ) {
            	        case 158:
            	        case 159:
            	        case 160:
            	        case 161:
            	            {
            	            alt38=1;
            	            }
            	            break;

            	        }

            	        switch (alt38) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure691_static.FOLLOW_adv_in_verbphraseStructure691);
            	    	    adv132=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv132.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop38;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:66: ( adj )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 35:
            	        case 36:
            	        case 41:
            	        case 145:
            	        case 146:
            	        case 147:
            	            {
            	            alt39=1;
            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure694_static.FOLLOW_adj_in_verbphraseStructure694);
            	            adj133=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj133.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: ( verb )+
            	    int cnt40=0;
            	    loop40:
            	    do {
            	        int alt40=2;
            	        alt40 = dfa40.predict(input);
            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure697_static.FOLLOW_verb_in_verbphraseStructure697);
            	    	    verb134=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb134.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt40 >= 1 ) break loop40;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(40, input);
            	                throw eee;
            	        }
            	        cnt40++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: ( md )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        switch ( input.LA(1) ) {
            	        case 149:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA41_3 = input.LA(3);

            	                if ( (synpred121_ChemicalChunker()) ) {
            	                    alt41=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure700_static.FOLLOW_md_in_verbphraseStructure700);
            	    	    md135=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md135.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: ( adv )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        alt42 = dfa42.predict(input);
            	        switch (alt42) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure703_static.FOLLOW_adv_in_verbphraseStructure703);
            	    	    adv136=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv136.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: ( adj )?
            	    int alt43=2;
            	    alt43 = dfa43.predict(input);
            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure706_static.FOLLOW_adj_in_verbphraseStructure706);
            	            adj137=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj137.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: ( neg )?
            	    int alt44=2;
            	    switch ( input.LA(1) ) {
            	        case 130:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA44_3 = input.LA(3);

            	                    if ( (synpred124_ChemicalChunker()) ) {
            	                        alt44=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt44) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure709_static.FOLLOW_neg_in_verbphraseStructure709);
            	            neg138=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg138.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:99: ( inoff )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 58:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA46_3 = input.LA(3);

                            if ( (synpred126_ChemicalChunker()) ) {
                                alt46=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure715_static.FOLLOW_inoff_in_verbphraseStructure715);
                    inoff139=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff139.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:106: ( ( cc )? ( comma )? prepphrase )*
            loop49:
            do {
                int alt49=2;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 139:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure719_static.FOLLOW_cc_in_verbphraseStructure719);
            	            cc140=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc140.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:111: ( comma )?
            	    int alt48=2;
            	    switch ( input.LA(1) ) {
            	        case 128:
            	            {
            	            alt48=1;
            	            }
            	            break;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure722_static.FOLLOW_comma_in_verbphraseStructure722);
            	            comma141=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma141.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure725_static.FOLLOW_prepphrase_in_verbphraseStructure725);
            	    prepphrase142=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase142.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb143 = null;

        ChemicalChunkerParser.vbp_return vbp144 = null;

        ChemicalChunkerParser.vbg_return vbg145 = null;

        ChemicalChunkerParser.vbd_return vbd146 = null;

        ChemicalChunkerParser.vbz_return vbz147 = null;

        ChemicalChunkerParser.vbn_return vbn148 = null;

        ChemicalChunkerParser.vbuse_return vbuse149 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge150 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse151 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb152 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject153 = null;

        ChemicalChunkerParser.vbadd_return vbadd154 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute155 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge156 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain157 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop158 = null;

        ChemicalChunkerParser.vbfill_return vbfill159 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend160 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat161 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus162 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate163 = null;

        ChemicalChunkerParser.vbcool_return vbcool164 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass165 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve166 = null;

        ChemicalChunkerParser.vbdry_return vbdry167 = null;

        ChemicalChunkerParser.vbextract_return vbextract168 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter169 = null;

        ChemicalChunkerParser.vbheat_return vbheat170 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease171 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition172 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate173 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify174 = null;

        ChemicalChunkerParser.vbquench_return vbquench175 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover176 = null;

        ChemicalChunkerParser.vbremove_return vbremove177 = null;

        ChemicalChunkerParser.vbstir_return vbstir178 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize179 = null;

        ChemicalChunkerParser.vbwait_return vbwait180 = null;

        ChemicalChunkerParser.vbwash_return vbwash181 = null;

        ChemicalChunkerParser.vbyield_return vbyield182 = null;

        ChemicalChunkerParser.vbchange_return vbchange183 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt50=41;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb737_static.FOLLOW_vb_in_verb737);
                    vb143=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb143.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb739_static.FOLLOW_vbp_in_verb739);
                    vbp144=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp144.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb741_static.FOLLOW_vbg_in_verb741);
                    vbg145=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg145.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb743_static.FOLLOW_vbd_in_verb743);
                    vbd146=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd146.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb745_static.FOLLOW_vbz_in_verb745);
                    vbz147=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz147.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb747_static.FOLLOW_vbn_in_verb747);
                    vbn148=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn148.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb749_static.FOLLOW_vbuse_in_verb749);
                    vbuse149=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse149.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb751_static.FOLLOW_vbsubmerge_in_verb751);
                    vbsubmerge150=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge150.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb753_static.FOLLOW_vbimmerse_in_verb753);
                    vbimmerse151=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse151.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb755_static.FOLLOW_degassMultiVerb_in_verb755);
                    degassMultiVerb152=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb152.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb757_static.FOLLOW_vbsubject_in_verb757);
                    vbsubject153=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject153.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb759_static.FOLLOW_vbadd_in_verb759);
                    vbadd154=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd154.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb761_static.FOLLOW_vbdilute_in_verb761);
                    vbdilute155=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute155.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb763_static.FOLLOW_vbcharge_in_verb763);
                    vbcharge156=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge156.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb765_static.FOLLOW_vbcontain_in_verb765);
                    vbcontain157=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain157.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb767_static.FOLLOW_vbdrop_in_verb767);
                    vbdrop158=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop158.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb769_static.FOLLOW_vbfill_in_verb769);
                    vbfill159=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill159.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb771_static.FOLLOW_vbsuspend_in_verb771);
                    vbsuspend160=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend160.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb773_static.FOLLOW_vbtreat_in_verb773);
                    vbtreat161=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat161.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb775_static.FOLLOW_vbapparatus_in_verb775);
                    vbapparatus162=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus162.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb777_static.FOLLOW_vbconcentrate_in_verb777);
                    vbconcentrate163=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate163.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb779_static.FOLLOW_vbcool_in_verb779);
                    vbcool164=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool164.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb781_static.FOLLOW_vbdegass_in_verb781);
                    vbdegass165=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass165.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb783_static.FOLLOW_vbdissolve_in_verb783);
                    vbdissolve166=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve166.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb785_static.FOLLOW_vbdry_in_verb785);
                    vbdry167=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry167.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb787_static.FOLLOW_vbextract_in_verb787);
                    vbextract168=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract168.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb789_static.FOLLOW_vbfilter_in_verb789);
                    vbfilter169=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter169.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb792_static.FOLLOW_vbheat_in_verb792);
                    vbheat170=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat170.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb794_static.FOLLOW_vbincrease_in_verb794);
                    vbincrease171=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease171.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb796_static.FOLLOW_vbpartition_in_verb796);
                    vbpartition172=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition172.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb798_static.FOLLOW_vbprecipitate_in_verb798);
                    vbprecipitate173=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate173.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb800_static.FOLLOW_vbpurify_in_verb800);
                    vbpurify174=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify174.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb802_static.FOLLOW_vbquench_in_verb802);
                    vbquench175=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench175.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb804_static.FOLLOW_vbrecover_in_verb804);
                    vbrecover176=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover176.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb806_static.FOLLOW_vbremove_in_verb806);
                    vbremove177=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove177.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb808_static.FOLLOW_vbstir_in_verb808);
                    vbstir178=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir178.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb810_static.FOLLOW_vbsynthesize_in_verb810);
                    vbsynthesize179=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize179.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb812_static.FOLLOW_vbwait_in_verb812);
                    vbwait180=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait180.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb814_static.FOLLOW_vbwash_in_verb814);
                    vbwash181=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash181.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb816_static.FOLLOW_vbyield_in_verb816);
                    vbyield182=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield182.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb818_static.FOLLOW_vbchange_in_verb818);
                    vbchange183=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange183.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass184 = null;

        ChemicalChunkerParser.cc_return cc185 = null;

        ChemicalChunkerParser.vbfill_return vbfill186 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb827_static.FOLLOW_vbdegass_in_degassMultiVerb827);
            vbdegass184=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass184.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb829_static.FOLLOW_cc_in_degassMultiVerb829);
            cc185=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc185.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb831_static.FOLLOW_vbfill_in_degassMultiVerb831);
            vbfill186=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill186.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:1: number : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);
        int number_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd187 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum188 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:8: ( cd | cdAlphanum )
            int alt51=2;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt51=1;
                }
                break;
            case 34:
                {
                alt51=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number838_static.FOLLOW_cd_in_number838);
                    cd187=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd187.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:13: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_number840_static.FOLLOW_cdAlphanum_in_number840);
                    cdAlphanum188=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum188.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, number_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt189 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss190 = null;

        ChemicalChunkerParser.wrb_return wrb191 = null;

        ChemicalChunkerParser.ex_return ex192 = null;

        ChemicalChunkerParser.pdt_return pdt193 = null;

        ChemicalChunkerParser.wp_return wp194 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt52=6;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt52=1;
                }
                break;
            case 173:
                {
                alt52=2;
                }
                break;
            case 174:
                {
                alt52=3;
                }
                break;
            case 142:
                {
                alt52=4;
                }
                break;
            case 154:
                {
                alt52=5;
                }
                break;
            case 172:
                {
                alt52=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause848_static.FOLLOW_wdt_in_clause848);
                    wdt189=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt189.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause850_static.FOLLOW_wp_poss_in_clause850);
                    wp_poss190=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss190.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause852_static.FOLLOW_wrb_in_clause852);
                    wrb191=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb191.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause854_static.FOLLOW_ex_in_clause854);
                    ex192=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex192.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause856_static.FOLLOW_pdt_in_clause856);
                    pdt193=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt193.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause858_static.FOLLOW_wp_in_clause858);
                    wp194=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp194.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure195 = null;

        ChemicalChunkerParser.dash_return dash196 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure197 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun866_static.FOLLOW_nounStructure_in_noun866);
            nounStructure195=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure195.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:23: ( dash nounStructure )*
            loop53:
            do {
                int alt53=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    int LA53_2 = input.LA(2);

                    if ( (synpred176_ChemicalChunker()) ) {
                        alt53=1;
                    }


                    }
                    break;

                }

                switch (alt53) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun869_static.FOLLOW_dash_in_noun869);
            	    dash196=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash196.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun871_static.FOLLOW_nounStructure_in_noun871);
            	    nounStructure197=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure197.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | amount | oscaronts | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | reference | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp198 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss199 = null;

        ChemicalChunkerParser.citation_return citation200 = null;

        ChemicalChunkerParser.cycles_return cycles201 = null;

        ChemicalChunkerParser.molecule_return molecule202 = null;

        ChemicalChunkerParser.apparatus_return apparatus203 = null;

        ChemicalChunkerParser.mixture_return mixture204 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule205 = null;

        ChemicalChunkerParser.nnyield_return nnyield206 = null;

        ChemicalChunkerParser.nnstate_return nnstate207 = null;

        ChemicalChunkerParser.nn_return nn208 = null;

        ChemicalChunkerParser.nns_return nns209 = null;

        ChemicalChunkerParser.nnp_return nnp210 = null;

        ChemicalChunkerParser.nnadd_return nnadd211 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase212 = null;

        ChemicalChunkerParser.nnexample_return nnexample213 = null;

        ChemicalChunkerParser.range_return range214 = null;

        ChemicalChunkerParser.amount_return amount215 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts216 = null;

        ChemicalChunkerParser.nntime_return nntime217 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere218 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode219 = null;

        ChemicalChunkerParser.nneq_return nneq220 = null;

        ChemicalChunkerParser.quantity_return quantity221 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity222 = null;

        ChemicalChunkerParser.measurements_return measurements223 = null;

        ChemicalChunkerParser.nntemp_return nntemp224 = null;

        ChemicalChunkerParser.nnflash_return nnflash225 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral226 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod227 = null;

        ChemicalChunkerParser.nnamount_return nnamount228 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure229 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn230 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography231 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum232 = null;

        ChemicalChunkerParser.nncycle_return nncycle233 = null;

        ChemicalChunkerParser.nntimes_return nntimes234 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate235 = null;

        ChemicalChunkerParser.nnvol_return nnvol236 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify237 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize238 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture239 = null;

        ChemicalChunkerParser.reference_return reference240 = null;

        ChemicalChunkerParser.nndry_return nndry241 = null;

        ChemicalChunkerParser.number_return number242 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound243 = null;

        ChemicalChunkerParser.nnextract_return nnextract244 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter245 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate246 = null;

        ChemicalChunkerParser.nnremove_return nnremove247 = null;

        ChemicalChunkerParser.fw_return fw248 = null;

        ChemicalChunkerParser.sym_return sym249 = null;

        ChemicalChunkerParser.clause_return clause250 = null;

        ChemicalChunkerParser.ls_return ls251 = null;

        ChemicalChunkerParser.nnps_return nnps252 = null;

        ChemicalChunkerParser.pos_return pos253 = null;

        ChemicalChunkerParser.oscarase_return oscarase254 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | amount | oscaronts | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | reference | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt54=57;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure882_static.FOLLOW_prp_in_nounStructure882);
                    prp198=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp198.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure884_static.FOLLOW_prp_poss_in_nounStructure884);
                    prp_poss199=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss199.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure886_static.FOLLOW_citation_in_nounStructure886);
                    citation200=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation200.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure888_static.FOLLOW_cycles_in_nounStructure888);
                    cycles201=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles201.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure890_static.FOLLOW_molecule_in_nounStructure890);
                    molecule202=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule202.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure892_static.FOLLOW_apparatus_in_nounStructure892);
                    apparatus203=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus203.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure894_static.FOLLOW_mixture_in_nounStructure894);
                    mixture204=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture204.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure896_static.FOLLOW_unnamedmolecule_in_nounStructure896);
                    unnamedmolecule205=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule205.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure898_static.FOLLOW_nnyield_in_nounStructure898);
                    nnyield206=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield206.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure900_static.FOLLOW_nnstate_in_nounStructure900);
                    nnstate207=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate207.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:106: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure902_static.FOLLOW_nn_in_nounStructure902);
                    nn208=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn208.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:109: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure904_static.FOLLOW_nns_in_nounStructure904);
                    nns209=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns209.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:113: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure906_static.FOLLOW_nnp_in_nounStructure906);
                    nnp210=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp210.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:117: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure908_static.FOLLOW_nnadd_in_nounStructure908);
                    nnadd211=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd211.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:123: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure910_static.FOLLOW_preparationphrase_in_nounStructure910);
                    preparationphrase212=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase212.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:141: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure912_static.FOLLOW_nnexample_in_nounStructure912);
                    nnexample213=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample213.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:151: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure914_static.FOLLOW_range_in_nounStructure914);
                    range214=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range214.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:157: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_nounStructure916_static.FOLLOW_amount_in_nounStructure916);
                    amount215=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount215.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:164: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure918_static.FOLLOW_oscaronts_in_nounStructure918);
                    oscaronts216=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts216.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:174: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure920_static.FOLLOW_nntime_in_nounStructure920);
                    nntime217=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime217.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:181: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure922_static.FOLLOW_nnatmosphere_in_nounStructure922);
                    nnatmosphere218=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere218.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:194: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure924_static.FOLLOW_tmunicode_in_nounStructure924);
                    tmunicode219=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode219.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:204: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure926_static.FOLLOW_nneq_in_nounStructure926);
                    nneq220=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq220.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:209: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure928_static.FOLLOW_quantity_in_nounStructure928);
                    quantity221=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity221.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:218: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure930_static.FOLLOW_nnchementity_in_nounStructure930);
                    nnchementity222=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity222.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:231: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_nounStructure932_static.FOLLOW_measurements_in_nounStructure932);
                    measurements223=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements223.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:244: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure934_static.FOLLOW_nntemp_in_nounStructure934);
                    nntemp224=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp224.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:251: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure936_static.FOLLOW_nnflash_in_nounStructure936);
                    nnflash225=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash225.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:259: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure938_static.FOLLOW_nngeneral_in_nounStructure938);
                    nngeneral226=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral226.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:269: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure940_static.FOLLOW_nnmethod_in_nounStructure940);
                    nnmethod227=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod227.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:278: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure942_static.FOLLOW_nnamount_in_nounStructure942);
                    nnamount228=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount228.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:287: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure944_static.FOLLOW_nnpressure_in_nounStructure944);
                    nnpressure229=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure229.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:298: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure946_static.FOLLOW_nncolumn_in_nounStructure946);
                    nncolumn230=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn230.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:307: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure948_static.FOLLOW_nnchromatography_in_nounStructure948);
                    nnchromatography231=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography231.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:324: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure950_static.FOLLOW_nnvacuum_in_nounStructure950);
                    nnvacuum232=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum232.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:333: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure952_static.FOLLOW_nncycle_in_nounStructure952);
                    nncycle233=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle233.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:341: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure954_static.FOLLOW_nntimes_in_nounStructure954);
                    nntimes234=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes234.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:349: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure956_static.FOLLOW_nnconcentrate_in_nounStructure956);
                    nnconcentrate235=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate235.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:363: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure958_static.FOLLOW_nnvol_in_nounStructure958);
                    nnvol236=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol236.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:369: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure960_static.FOLLOW_nnpurify_in_nounStructure960);
                    nnpurify237=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify237.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:378: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure962_static.FOLLOW_nnsynthesize_in_nounStructure962);
                    nnsynthesize238=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize238.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:391: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure964_static.FOLLOW_nnmixture_in_nounStructure964);
                    nnmixture239=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture239.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:401: reference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_reference_in_nounStructure966_static.FOLLOW_reference_in_nounStructure966);
                    reference240=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference240.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:411: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure968_static.FOLLOW_nndry_in_nounStructure968);
                    nndry241=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry241.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:417: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure970_static.FOLLOW_number_in_nounStructure970);
                    number242=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number242.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:424: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure972_static.FOLLOW_oscarCompound_in_nounStructure972);
                    oscarCompound243=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound243.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:438: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure974_static.FOLLOW_nnextract_in_nounStructure974);
                    nnextract244=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract244.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:448: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure976_static.FOLLOW_nnfilter_in_nounStructure976);
                    nnfilter245=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter245.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:457: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure978_static.FOLLOW_nnprecipitate_in_nounStructure978);
                    nnprecipitate246=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate246.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:471: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure980_static.FOLLOW_nnremove_in_nounStructure980);
                    nnremove247=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove247.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:480: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure982_static.FOLLOW_fw_in_nounStructure982);
                    fw248=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw248.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:483: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure984_static.FOLLOW_sym_in_nounStructure984);
                    sym249=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym249.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:487: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure986_static.FOLLOW_clause_in_nounStructure986);
                    clause250=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause250.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:494: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure988_static.FOLLOW_ls_in_nounStructure988);
                    ls251=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls251.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:497: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure990_static.FOLLOW_nnps_in_nounStructure990);
                    nnps252=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps252.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:502: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure992_static.FOLLOW_pos_in_nounStructure992);
                    pos253=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos253.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:506: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure994_static.FOLLOW_oscarase_in_nounStructure994);
                    oscarase254=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase254.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:1: range : number dash number ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number255 = null;

        ChemicalChunkerParser.dash_return dash256 = null;

        ChemicalChunkerParser.number_return number257 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:6: ( number dash number )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:8: number dash number
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_number_in_range1001_static.FOLLOW_number_in_range1001);
            number255=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number255.getTree());
            pushFollow(FOLLOW_dash_in_range1003_static.FOLLOW_dash_in_range1003);
            dash256=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash256.getTree());
            pushFollow(FOLLOW_number_in_range1005_static.FOLLOW_number_in_range1005);
            number257=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number257.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure258 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles1012_static.FOLLOW_cycleStructure_in_cycles1012);
            cycleStructure258=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure258.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd259 = null;

        ChemicalChunkerParser.dashNN_return dashNN260 = null;

        ChemicalChunkerParser.nncycle_return nncycle261 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure1029_static.FOLLOW_cd_in_cycleStructure1029);
            cd259=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd259.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:21: ( dashNN )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 140:
                case 145:
                case 146:
                case 147:
                case 150:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure1031_static.FOLLOW_dashNN_in_cycleStructure1031);
                    dashNN260=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN260.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure1034_static.FOLLOW_nncycle_in_cycleStructure1034);
            nncycle261=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle261.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj262 = null;

        ChemicalChunkerParser.nn_return nn263 = null;

        ChemicalChunkerParser.cd_return cd264 = null;

        ChemicalChunkerParser.dash_return dash265 = null;

        ChemicalChunkerParser.adj_return adj266 = null;

        ChemicalChunkerParser.nn_return nn267 = null;

        ChemicalChunkerParser.cd_return cd268 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:10: ( adj | nn | cd )
            int alt56=3;
            switch ( input.LA(1) ) {
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt56=1;
                }
                break;
            case 150:
                {
                alt56=2;
                }
                break;
            case 140:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN1044_static.FOLLOW_adj_in_dashNN1044);
                    adj262=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj262.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN1046_static.FOLLOW_nn_in_dashNN1046);
                    nn263=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn263.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN1048_static.FOLLOW_cd_in_dashNN1048);
                    cd264=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd264.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:22: ( dash ( adj | nn | cd ) )*
            loop58:
            do {
                int alt58=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    alt58=1;
                    }
                    break;

                }

                switch (alt58) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN1052_static.FOLLOW_dash_in_dashNN1052);
            	    dash265=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash265.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:28: ( adj | nn | cd )
            	    int alt57=3;
            	    switch ( input.LA(1) ) {
            	    case 35:
            	    case 36:
            	    case 41:
            	    case 145:
            	    case 146:
            	    case 147:
            	        {
            	        alt57=1;
            	        }
            	        break;
            	    case 150:
            	        {
            	        alt57=2;
            	        }
            	        break;
            	    case 140:
            	        {
            	        alt57=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 57, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt57) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN1055_static.FOLLOW_adj_in_dashNN1055);
            	            adj266=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj266.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN1057_static.FOLLOW_nn_in_dashNN1057);
            	            nn267=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn267.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN1059_static.FOLLOW_cd_in_dashNN1059);
            	            cd268=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd268.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:1: ratio : ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio269 = null;

        ChemicalChunkerParser.nounratio_return nounratio270 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:7: ( ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:9: ( numberratio | nounratio )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:9: ( numberratio | nounratio )
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio1072_static.FOLLOW_numberratio_in_ratio1072);
                    numberratio269=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio269.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio1074_static.FOLLOW_nounratio_in_ratio1074);
                    nounratio270=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio270.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 103:33: -> ^( RATIO ( numberratio )? ( nounratio )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:36: ^( RATIO ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:44: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:57: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:1: numberratio : cd ( colon cdAlphanum | cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);
        int numberratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd271 = null;

        ChemicalChunkerParser.colon_return colon272 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum273 = null;

        ChemicalChunkerParser.cd_return cd274 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:13: ( cd ( colon cdAlphanum | cd )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:16: cd ( colon cdAlphanum | cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio1097_static.FOLLOW_cd_in_numberratio1097);
            cd271=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd271.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:19: ( colon cdAlphanum | cd )+
            int cnt60=0;
            loop60:
            do {
                int alt60=3;
                alt60 = dfa60.predict(input);
                switch (alt60) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:20: colon cdAlphanum
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio1100_static.FOLLOW_colon_in_numberratio1100);
            	    colon272=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon272.getTree());
            	    pushFollow(FOLLOW_cdAlphanum_in_numberratio1102_static.FOLLOW_cdAlphanum_in_numberratio1102);
            	    cdAlphanum273=cdAlphanum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum273.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:37: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_numberratio1104_static.FOLLOW_cd_in_numberratio1104);
            	    cd274=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd274.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt60 >= 1 ) break loop60;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(60, input);
                        throw eee;
                }
                cnt60++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, numberratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun275 = null;

        ChemicalChunkerParser.colon_return colon276 = null;

        ChemicalChunkerParser.noun_return noun277 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio1117_static.FOLLOW_noun_in_nounratio1117);
            noun275=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun275.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:11: ( colon noun )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 127:
                    {
                    int LA61_2 = input.LA(2);

                    if ( (synpred242_ChemicalChunker()) ) {
                        alt61=1;
                    }


                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio1121_static.FOLLOW_colon_in_nounratio1121);
            	    colon276=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon276.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio1123_static.FOLLOW_noun_in_nounratio1123);
            	    noun277=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun277.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:1: reference : lsqb cd rsqb ;
    public final ChemicalChunkerParser.reference_return reference() throws RecognitionException {
        ChemicalChunkerParser.reference_return retval = new ChemicalChunkerParser.reference_return();
        retval.start = input.LT(1);
        int reference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb278 = null;

        ChemicalChunkerParser.cd_return cd279 = null;

        ChemicalChunkerParser.rsqb_return rsqb280 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:2: ( lsqb cd rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:4: lsqb cd rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_reference1137_static.FOLLOW_lsqb_in_reference1137);
            lsqb278=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb278.getTree());
            pushFollow(FOLLOW_cd_in_reference1139_static.FOLLOW_cd_in_reference1139);
            cd279=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd279.getTree());
            pushFollow(FOLLOW_rsqb_in_reference1141_static.FOLLOW_rsqb_in_reference1141);
            rsqb280=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb280.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1281 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2282 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:9: ( ( citationStructure1 | citationStructure2 ) -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:11: ( citationStructure1 | citationStructure2 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:11: ( citationStructure1 | citationStructure2 )
            int alt62=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt62=1;
                }
                break;
            case 128:
                {
                alt62=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation1148_static.FOLLOW_citationStructure1_in_citation1148);
                    citationStructure1281=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1281.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation1150_static.FOLLOW_citationStructure2_in_citation1150);
                    citationStructure2282=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2282.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure2, citationStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 110:51: -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:54: ^( CITATION ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:66: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:86: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);
        int citationStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb283 = null;

        ChemicalChunkerParser.citationContent_return citationContent284 = null;

        ChemicalChunkerParser.rrb_return rrb285 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:19: ( lrb citationContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure11172_static.FOLLOW_lrb_in_citationStructure11172);
            lrb283=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb283.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure11174_static.FOLLOW_citationContent_in_citationStructure11174);
            citationContent284=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent284.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure11176_static.FOLLOW_rrb_in_citationStructure11176);
            rrb285=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb285.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, citationStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);
        int citationStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma286 = null;

        ChemicalChunkerParser.lrb_return lrb287 = null;

        ChemicalChunkerParser.citationContent_return citationContent288 = null;

        ChemicalChunkerParser.rrb_return rrb289 = null;

        ChemicalChunkerParser.comma_return comma290 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:19: ( comma lrb citationContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure21182_static.FOLLOW_comma_in_citationStructure21182);
            comma286=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma286.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure21184_static.FOLLOW_lrb_in_citationStructure21184);
            lrb287=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb287.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure21186_static.FOLLOW_citationContent_in_citationStructure21186);
            citationContent288=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent288.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure21188_static.FOLLOW_rrb_in_citationStructure21188);
            rrb289=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb289.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure21190_static.FOLLOW_comma_in_citationStructure21190);
            comma290=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma290.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, citationStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp291 = null;

        ChemicalChunkerParser.fw_return fw292 = null;

        ChemicalChunkerParser.cd_return cd293 = null;

        ChemicalChunkerParser.conjunction_return conjunction294 = null;

        ChemicalChunkerParser.nnp_return nnp295 = null;

        ChemicalChunkerParser.fw_return fw296 = null;

        ChemicalChunkerParser.cd_return cd297 = null;

        ChemicalChunkerParser.conjunction_return conjunction298 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:20: ( nnp | fw | cd | conjunction )
            int alt63=4;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt63=1;
                }
                break;
            case 143:
                {
                alt63=2;
                }
                break;
            case 140:
                {
                alt63=3;
                }
                break;
            case 128:
            case 139:
                {
                alt63=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent1199_static.FOLLOW_nnp_in_citationContent1199);
                    nnp291=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp291.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent1201_static.FOLLOW_fw_in_citationContent1201);
                    fw292=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw292.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent1203_static.FOLLOW_cd_in_citationContent1203);
                    cd293=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd293.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent1205_static.FOLLOW_conjunction_in_citationContent1205);
                    conjunction294=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction294.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:44: ( nnp | fw | cd | conjunction )+
            int cnt64=0;
            loop64:
            do {
                int alt64=5;
                switch ( input.LA(1) ) {
                case 152:
                    {
                    alt64=1;
                    }
                    break;
                case 143:
                    {
                    alt64=2;
                    }
                    break;
                case 140:
                    {
                    alt64=3;
                    }
                    break;
                case 128:
                case 139:
                    {
                    alt64=4;
                    }
                    break;

                }

                switch (alt64) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent1209_static.FOLLOW_nnp_in_citationContent1209);
            	    nnp295=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp295.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent1211_static.FOLLOW_fw_in_citationContent1211);
            	    fw296=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw296.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent1213_static.FOLLOW_cd_in_citationContent1213);
            	    cd297=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd297.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent1215_static.FOLLOW_conjunction_in_citationContent1215);
            	    conjunction298=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction298.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt64 >= 1 ) break loop64;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(64, input);
                        throw eee;
                }
                cnt64++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio299 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3300 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2301 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1302 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:10: ( mixtureRatio )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture1225_static.FOLLOW_mixtureRatio_in_mixture1225);
                    mixtureRatio299=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio299.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt66=3;
            switch ( input.LA(1) ) {
            case 137:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 127:
                    case 128:
                    case 131:
                    case 132:
                    case 134:
                    case 137:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 162:
                    case 163:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                        {
                        alt66=3;
                        }
                        break;
                    case 133:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 138:
                                {
                                alt66=1;
                                }
                                break;
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 127:
                            case 128:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 137:
                            case 140:
                            case 141:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 162:
                            case 163:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                                {
                                alt66=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 66, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 66, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;
                }

                }
                break;
            case 128:
                {
                alt66=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture1230_static.FOLLOW_mixtureStructure3_in_mixture1230);
                    mixtureStructure3300=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3300.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture1232_static.FOLLOW_mixtureStructure2_in_mixture1232);
                    mixtureStructure2301=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2301.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture1234_static.FOLLOW_mixtureStructure1_in_mixture1234);
                    mixtureStructure1302=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1302.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure3, mixtureStructure1, mixtureRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 116:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma303 = null;

        ChemicalChunkerParser.lrb_return lrb304 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent305 = null;

        ChemicalChunkerParser.rrb_return rrb306 = null;

        ChemicalChunkerParser.comma_return comma307 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure21261_static.FOLLOW_comma_in_mixtureStructure21261);
            comma303=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma303.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure21263_static.FOLLOW_lrb_in_mixtureStructure21263);
            lrb304=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb304.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure21265_static.FOLLOW_mixtureContent_in_mixtureStructure21265);
            mixtureContent305=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent305.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure21267_static.FOLLOW_rrb_in_mixtureStructure21267);
            rrb306=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb306.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21269_static.FOLLOW_comma_in_mixtureStructure21269);
            comma307=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma307.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb308 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent309 = null;

        ChemicalChunkerParser.rrb_return rrb310 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11275_static.FOLLOW_lrb_in_mixtureStructure11275);
            lrb308=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb308.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11277_static.FOLLOW_mixtureContent_in_mixtureStructure11277);
            mixtureContent309=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent309.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11279_static.FOLLOW_rrb_in_mixtureStructure11279);
            rrb310=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb310.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb311 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent312 = null;

        ChemicalChunkerParser.rrb_return rrb313 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure31287_static.FOLLOW_lrb_in_mixtureStructure31287);
            lrb311=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb311.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure31290_static.FOLLOW_nnpercent_in_mixtureStructure31290);
            nnpercent312=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent312.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure31292_static.FOLLOW_rrb_in_mixtureStructure31292);
            rrb313=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb313.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:1: mixtureRatio : cd colon ( cd | cdAlphanum ) ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);
        int mixtureRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd314 = null;

        ChemicalChunkerParser.colon_return colon315 = null;

        ChemicalChunkerParser.cd_return cd316 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum317 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:2: ( cd colon ( cd | cdAlphanum ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:4: cd colon ( cd | cdAlphanum )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio1303_static.FOLLOW_cd_in_mixtureRatio1303);
            cd314=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd314.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio1305_static.FOLLOW_colon_in_mixtureRatio1305);
            colon315=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon315.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:13: ( cd | cdAlphanum )
            int alt67=2;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt67=1;
                }
                break;
            case 34:
                {
                alt67=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:14: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureRatio1308_static.FOLLOW_cd_in_mixtureRatio1308);
                    cd316=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd316.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:17: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_mixtureRatio1310_static.FOLLOW_cdAlphanum_in_mixtureRatio1310);
                    cdAlphanum317=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum317.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, mixtureRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: mixtureContent : ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw318 = null;

        ChemicalChunkerParser.verb_return verb319 = null;

        ChemicalChunkerParser.nn_return nn320 = null;

        ChemicalChunkerParser.measurements_return measurements321 = null;

        ChemicalChunkerParser.md_return md322 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent323 = null;

        ChemicalChunkerParser.stop_return stop324 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound325 = null;

        ChemicalChunkerParser.molecule_return molecule326 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule327 = null;

        ChemicalChunkerParser.dash_return dash328 = null;

        ChemicalChunkerParser.sym_return sym329 = null;

        ChemicalChunkerParser.cd_return cd330 = null;

        ChemicalChunkerParser.noun_return noun331 = null;

        ChemicalChunkerParser.inof_return inof332 = null;

        ChemicalChunkerParser.inAll_return inAll333 = null;

        ChemicalChunkerParser.cd_return cd334 = null;

        ChemicalChunkerParser.comma_return comma335 = null;

        ChemicalChunkerParser.adj_return adj336 = null;

        ChemicalChunkerParser.colon_return colon337 = null;

        ChemicalChunkerParser.stop_return stop338 = null;

        ChemicalChunkerParser.minimixture_return minimixture339 = null;

        ChemicalChunkerParser.fw_return fw340 = null;

        ChemicalChunkerParser.verb_return verb341 = null;

        ChemicalChunkerParser.measurements_return measurements342 = null;

        ChemicalChunkerParser.nnyield_return nnyield343 = null;

        ChemicalChunkerParser.md_return md344 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent345 = null;

        ChemicalChunkerParser.stop_return stop346 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound347 = null;

        ChemicalChunkerParser.molecule_return molecule348 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule349 = null;

        ChemicalChunkerParser.dash_return dash350 = null;

        ChemicalChunkerParser.sym_return sym351 = null;

        ChemicalChunkerParser.cd_return cd352 = null;

        ChemicalChunkerParser.noun_return noun353 = null;

        ChemicalChunkerParser.inof_return inof354 = null;

        ChemicalChunkerParser.inAll_return inAll355 = null;

        ChemicalChunkerParser.cd_return cd356 = null;

        ChemicalChunkerParser.comma_return comma357 = null;

        ChemicalChunkerParser.adj_return adj358 = null;

        ChemicalChunkerParser.colon_return colon359 = null;

        ChemicalChunkerParser.stop_return stop360 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:15: ( ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt68=21;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1320_static.FOLLOW_fw_in_mixtureContent1320);
                    fw318=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw318.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1322_static.FOLLOW_verb_in_mixtureContent1322);
                    verb319=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb319.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent1324_static.FOLLOW_nn_in_mixtureContent1324);
                    nn320=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn320.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:31: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1326_static.FOLLOW_measurements_in_mixtureContent1326);
                    measurements321=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements321.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:44: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1328_static.FOLLOW_md_in_mixtureContent1328);
                    md322=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md322.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:47: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent1330_static.FOLLOW_nnpercent_in_mixtureContent1330);
                    nnpercent323=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent323.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:57: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1332_static.FOLLOW_stop_in_mixtureContent1332);
                    stop324=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop324.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:62: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1334_static.FOLLOW_oscarCompound_in_mixtureContent1334);
                    oscarCompound325=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound325.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:76: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1336_static.FOLLOW_molecule_in_mixtureContent1336);
                    molecule326=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule326.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:85: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1338_static.FOLLOW_unnamedmolecule_in_mixtureContent1338);
                    unnamedmolecule327=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule327.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:101: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1340_static.FOLLOW_dash_in_mixtureContent1340);
                    dash328=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash328.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:106: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1342_static.FOLLOW_sym_in_mixtureContent1342);
                    sym329=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym329.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:110: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1344_static.FOLLOW_cd_in_mixtureContent1344);
                    cd330=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd330.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:113: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1346_static.FOLLOW_noun_in_mixtureContent1346);
                    noun331=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun331.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:118: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1348_static.FOLLOW_inof_in_mixtureContent1348);
                    inof332=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof332.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:123: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1350_static.FOLLOW_inAll_in_mixtureContent1350);
                    inAll333=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll333.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:129: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1352_static.FOLLOW_cd_in_mixtureContent1352);
                    cd334=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd334.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:132: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1354_static.FOLLOW_comma_in_mixtureContent1354);
                    comma335=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma335.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:138: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1356_static.FOLLOW_adj_in_mixtureContent1356);
                    adj336=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj336.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:142: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1358_static.FOLLOW_colon_in_mixtureContent1358);
                    colon337=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon337.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:148: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1360_static.FOLLOW_stop_in_mixtureContent1360);
                    stop338=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop338.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt69=0;
            loop69:
            do {
                int alt69=23;
                alt69 = dfa69.predict(input);
                switch (alt69) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:155: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent1364_static.FOLLOW_minimixture_in_mixtureContent1364);
            	    minimixture339=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture339.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:167: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1366_static.FOLLOW_fw_in_mixtureContent1366);
            	    fw340=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw340.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:170: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1368_static.FOLLOW_verb_in_mixtureContent1368);
            	    verb341=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb341.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:175: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1370_static.FOLLOW_measurements_in_mixtureContent1370);
            	    measurements342=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements342.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:188: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent1372_static.FOLLOW_nnyield_in_mixtureContent1372);
            	    nnyield343=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield343.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:196: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1374_static.FOLLOW_md_in_mixtureContent1374);
            	    md344=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md344.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:199: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent1376_static.FOLLOW_nnpercent_in_mixtureContent1376);
            	    nnpercent345=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent345.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:209: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1378_static.FOLLOW_stop_in_mixtureContent1378);
            	    stop346=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop346.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:214: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1380_static.FOLLOW_oscarCompound_in_mixtureContent1380);
            	    oscarCompound347=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound347.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:228: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1382_static.FOLLOW_molecule_in_mixtureContent1382);
            	    molecule348=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule348.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:237: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1384_static.FOLLOW_unnamedmolecule_in_mixtureContent1384);
            	    unnamedmolecule349=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule349.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:253: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1386_static.FOLLOW_dash_in_mixtureContent1386);
            	    dash350=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash350.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:258: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1388_static.FOLLOW_sym_in_mixtureContent1388);
            	    sym351=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym351.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:262: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1390_static.FOLLOW_cd_in_mixtureContent1390);
            	    cd352=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd352.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:265: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1392_static.FOLLOW_noun_in_mixtureContent1392);
            	    noun353=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun353.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:270: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1394_static.FOLLOW_inof_in_mixtureContent1394);
            	    inof354=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof354.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:275: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1396_static.FOLLOW_inAll_in_mixtureContent1396);
            	    inAll355=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll355.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:281: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1398_static.FOLLOW_cd_in_mixtureContent1398);
            	    cd356=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd356.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:284: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1400_static.FOLLOW_comma_in_mixtureContent1400);
            	    comma357=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma357.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:290: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1402_static.FOLLOW_adj_in_mixtureContent1402);
            	    adj358=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj358.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:294: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1404_static.FOLLOW_colon_in_mixtureContent1404);
            	    colon359=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon359.getTree());

            	    }
            	    break;
            	case 22 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:300: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1406_static.FOLLOW_stop_in_mixtureContent1406);
            	    stop360=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop360.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        throw eee;
                }
                cnt69++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2361 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1362 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt70=2;
            switch ( input.LA(1) ) {
            case 128:
                {
                alt70=1;
                }
                break;
            case 137:
                {
                alt70=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }

            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture1417_static.FOLLOW_mixtureStructure2_in_minimixture1417);
                    mixtureStructure2361=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2361.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture1419_static.FOLLOW_mixtureStructure1_in_minimixture1419);
                    mixtureStructure1362=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1362.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 126:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);
        int minimixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma363 = null;

        ChemicalChunkerParser.lrb_return lrb364 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent365 = null;

        ChemicalChunkerParser.rrb_return rrb366 = null;

        ChemicalChunkerParser.comma_return comma367 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:22: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure21439_static.FOLLOW_comma_in_minimixtureStructure21439);
            comma363=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma363.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure21441_static.FOLLOW_lrb_in_minimixtureStructure21441);
            lrb364=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb364.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure21443_static.FOLLOW_mixtureContent_in_minimixtureStructure21443);
            mixtureContent365=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent365.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure21445_static.FOLLOW_rrb_in_minimixtureStructure21445);
            rrb366=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb366.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure21447_static.FOLLOW_comma_in_minimixtureStructure21447);
            comma367=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma367.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, minimixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);
        int minimixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb368 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent369 = null;

        ChemicalChunkerParser.rrb_return rrb370 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:22: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure11454_static.FOLLOW_lrb_in_minimixtureStructure11454);
            lrb368=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb368.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure11456_static.FOLLOW_mixtureContent_in_minimixtureStructure11456);
            mixtureContent369=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent369.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure11458_static.FOLLOW_rrb_in_minimixtureStructure11458);
            rrb370=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb370.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, minimixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:1: minimixtureContent : ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);
        int minimixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw371 = null;

        ChemicalChunkerParser.nn_return nn372 = null;

        ChemicalChunkerParser.verb_return verb373 = null;

        ChemicalChunkerParser.measurements_return measurements374 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent375 = null;

        ChemicalChunkerParser.md_return md376 = null;

        ChemicalChunkerParser.stop_return stop377 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound378 = null;

        ChemicalChunkerParser.molecule_return molecule379 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule380 = null;

        ChemicalChunkerParser.dash_return dash381 = null;

        ChemicalChunkerParser.sym_return sym382 = null;

        ChemicalChunkerParser.cd_return cd383 = null;

        ChemicalChunkerParser.noun_return noun384 = null;

        ChemicalChunkerParser.inof_return inof385 = null;

        ChemicalChunkerParser.inAll_return inAll386 = null;

        ChemicalChunkerParser.cd_return cd387 = null;

        ChemicalChunkerParser.comma_return comma388 = null;

        ChemicalChunkerParser.adj_return adj389 = null;

        ChemicalChunkerParser.colon_return colon390 = null;

        ChemicalChunkerParser.stop_return stop391 = null;

        ChemicalChunkerParser.fw_return fw392 = null;

        ChemicalChunkerParser.verb_return verb393 = null;

        ChemicalChunkerParser.measurements_return measurements394 = null;

        ChemicalChunkerParser.nnyield_return nnyield395 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent396 = null;

        ChemicalChunkerParser.md_return md397 = null;

        ChemicalChunkerParser.stop_return stop398 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound399 = null;

        ChemicalChunkerParser.molecule_return molecule400 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule401 = null;

        ChemicalChunkerParser.dash_return dash402 = null;

        ChemicalChunkerParser.sym_return sym403 = null;

        ChemicalChunkerParser.cd_return cd404 = null;

        ChemicalChunkerParser.noun_return noun405 = null;

        ChemicalChunkerParser.inof_return inof406 = null;

        ChemicalChunkerParser.inAll_return inAll407 = null;

        ChemicalChunkerParser.cd_return cd408 = null;

        ChemicalChunkerParser.comma_return comma409 = null;

        ChemicalChunkerParser.adj_return adj410 = null;

        ChemicalChunkerParser.colon_return colon411 = null;

        ChemicalChunkerParser.stop_return stop412 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:19: ( ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt71=21;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent1467_static.FOLLOW_fw_in_minimixtureContent1467);
                    fw371=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw371.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:27: nn
                    {
                    pushFollow(FOLLOW_nn_in_minimixtureContent1469_static.FOLLOW_nn_in_minimixtureContent1469);
                    nn372=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn372.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:30: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent1471_static.FOLLOW_verb_in_minimixtureContent1471);
                    verb373=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb373.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_minimixtureContent1473_static.FOLLOW_measurements_in_minimixtureContent1473);
                    measurements374=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements374.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1475_static.FOLLOW_nnpercent_in_minimixtureContent1475);
                    nnpercent375=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent375.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:58: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent1477_static.FOLLOW_md_in_minimixtureContent1477);
                    md376=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md376.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:61: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1479_static.FOLLOW_stop_in_minimixtureContent1479);
                    stop377=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop377.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:66: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1481_static.FOLLOW_oscarCompound_in_minimixtureContent1481);
                    oscarCompound378=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound378.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:80: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent1483_static.FOLLOW_molecule_in_minimixtureContent1483);
                    molecule379=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule379.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:89: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1485_static.FOLLOW_unnamedmolecule_in_minimixtureContent1485);
                    unnamedmolecule380=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule380.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:105: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent1487_static.FOLLOW_dash_in_minimixtureContent1487);
                    dash381=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash381.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:110: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent1489_static.FOLLOW_sym_in_minimixtureContent1489);
                    sym382=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym382.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:114: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1491_static.FOLLOW_cd_in_minimixtureContent1491);
                    cd383=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd383.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:117: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent1493_static.FOLLOW_noun_in_minimixtureContent1493);
                    noun384=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun384.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:122: inof
                    {
                    pushFollow(FOLLOW_inof_in_minimixtureContent1495_static.FOLLOW_inof_in_minimixtureContent1495);
                    inof385=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof385.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:127: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent1497_static.FOLLOW_inAll_in_minimixtureContent1497);
                    inAll386=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll386.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:133: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1499_static.FOLLOW_cd_in_minimixtureContent1499);
                    cd387=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd387.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:136: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent1501_static.FOLLOW_comma_in_minimixtureContent1501);
                    comma388=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma388.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:142: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent1503_static.FOLLOW_adj_in_minimixtureContent1503);
                    adj389=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj389.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:146: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent1505_static.FOLLOW_colon_in_minimixtureContent1505);
                    colon390=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon390.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:152: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1507_static.FOLLOW_stop_in_minimixtureContent1507);
                    stop391=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop391.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt72=0;
            loop72:
            do {
                int alt72=22;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:159: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent1511_static.FOLLOW_fw_in_minimixtureContent1511);
            	    fw392=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw392.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:162: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent1513_static.FOLLOW_verb_in_minimixtureContent1513);
            	    verb393=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb393.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:167: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_minimixtureContent1515_static.FOLLOW_measurements_in_minimixtureContent1515);
            	    measurements394=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements394.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:180: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent1517_static.FOLLOW_nnyield_in_minimixtureContent1517);
            	    nnyield395=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield395.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1519_static.FOLLOW_nnpercent_in_minimixtureContent1519);
            	    nnpercent396=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent396.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:198: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent1521_static.FOLLOW_md_in_minimixtureContent1521);
            	    md397=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md397.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:201: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1523_static.FOLLOW_stop_in_minimixtureContent1523);
            	    stop398=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop398.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:206: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1525_static.FOLLOW_oscarCompound_in_minimixtureContent1525);
            	    oscarCompound399=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound399.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:220: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent1527_static.FOLLOW_molecule_in_minimixtureContent1527);
            	    molecule400=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule400.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:229: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1529_static.FOLLOW_unnamedmolecule_in_minimixtureContent1529);
            	    unnamedmolecule401=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule401.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:245: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent1531_static.FOLLOW_dash_in_minimixtureContent1531);
            	    dash402=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash402.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:250: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent1533_static.FOLLOW_sym_in_minimixtureContent1533);
            	    sym403=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym403.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:254: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1535_static.FOLLOW_cd_in_minimixtureContent1535);
            	    cd404=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd404.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:257: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent1537_static.FOLLOW_noun_in_minimixtureContent1537);
            	    noun405=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun405.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:262: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_minimixtureContent1539_static.FOLLOW_inof_in_minimixtureContent1539);
            	    inof406=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof406.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:267: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent1541_static.FOLLOW_inAll_in_minimixtureContent1541);
            	    inAll407=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll407.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:273: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1543_static.FOLLOW_cd_in_minimixtureContent1543);
            	    cd408=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd408.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:276: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent1545_static.FOLLOW_comma_in_minimixtureContent1545);
            	    comma409=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma409.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:282: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent1547_static.FOLLOW_adj_in_minimixtureContent1547);
            	    adj410=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj410.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:286: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent1549_static.FOLLOW_colon_in_minimixtureContent1549);
            	    colon411=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon411.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:292: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1551_static.FOLLOW_stop_in_minimixtureContent1551);
            	    stop412=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop412.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, minimixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj413 = null;

        ChemicalChunkerParser.jjr_return jjr414 = null;

        ChemicalChunkerParser.jjs_return jjs415 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj416 = null;

        ChemicalChunkerParser.jjchem_return jjchem417 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn418 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt73=6;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt73=1;
                }
                break;
            case 146:
                {
                alt73=2;
                }
                break;
            case 147:
                {
                alt73=3;
                }
                break;
            case 35:
                {
                alt73=4;
                }
                break;
            case 41:
                {
                alt73=5;
                }
                break;
            case 36:
                {
                alt73=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1562_static.FOLLOW_jj_in_adj1562);
                    jj413=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj413.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1564_static.FOLLOW_jjr_in_adj1564);
                    jjr414=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr414.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1566_static.FOLLOW_jjs_in_adj1566);
                    jjs415=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs415.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1568_static.FOLLOW_oscarcj_in_adj1568);
                    oscarcj416=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj416.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj1570_static.FOLLOW_jjchem_in_adj1570);
                    jjchem417=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem417.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1572_static.FOLLOW_oscarrn_in_adj1572);
                    oscarrn418=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn418.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb419 = null;

        ChemicalChunkerParser.rbr_return rbr420 = null;

        ChemicalChunkerParser.rp_return rp421 = null;

        ChemicalChunkerParser.rbs_return rbs422 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:5: ( rb | rbr | rp | rbs )
            int alt74=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt74=1;
                }
                break;
            case 159:
                {
                alt74=2;
                }
                break;
            case 161:
                {
                alt74=3;
                }
                break;
            case 160:
                {
                alt74=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1579_static.FOLLOW_rb_in_adv1579);
                    rb419=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb419.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1581_static.FOLLOW_rbr_in_adv1581);
                    rbr420=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr420.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1583_static.FOLLOW_rp_in_adv1583);
                    rp421=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp421.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1585_static.FOLLOW_rbs_in_adv1585);
                    rbs422=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs422.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg423 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere424 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime425 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp426 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN427 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole428 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther429 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:5: ( neg )?
            int alt75=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt75=1;
                    }
                    break;
            }

            switch (alt75) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1598_static.FOLLOW_neg_in_prepphrase1598);
                    neg423=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg423.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt76=6;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1602_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1602);
                    prepphraseAtmosphere424=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere424.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1604_static.FOLLOW_prepphraseTime_in_prepphrase1604);
                    prepphraseTime425=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime425.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1606_static.FOLLOW_prepphraseTemp_in_prepphrase1606);
                    prepphraseTemp426=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp426.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1608_static.FOLLOW_prepphraseIN_in_prepphrase1608);
                    prepphraseIN427=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN427.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1610_static.FOLLOW_prepphraseRole_in_prepphrase1610);
                    prepphraseRole428=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole428.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1612_static.FOLLOW_prepphraseOther_in_prepphrase1612);
                    prepphraseOther429=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther429.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv430 = null;

        ChemicalChunkerParser.adj_return adj431 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:2: ( adv | adj )
            int alt77=2;
            switch ( input.LA(1) ) {
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt77=1;
                }
                break;
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt77=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1626_static.FOLLOW_adv_in_advAdj1626);
                    adv430=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv430.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1628_static.FOLLOW_adj_in_advAdj1628);
                    adj431=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj431.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj432 = null;

        ChemicalChunkerParser.inMost_return inMost433 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase434 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:4: ( advAdj )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1637_static.FOLLOW_advAdj_in_prepphraseOther1637);
            	    advAdj432=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj432.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:12: ( inMost )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt79=1;
                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1640_static.FOLLOW_inMost_in_prepphraseOther1640);
            	    inMost433=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost433.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1644_static.FOLLOW_nounphrase_in_prepphraseOther1644);
            nounphrase434=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase434.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inMost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof435 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase436 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1670_static.FOLLOW_inof_in_prepphraseOf1670);
            inof435=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof435.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1673_static.FOLLOW_nounphrase_in_prepphraseOf1673);
            nounphrase436=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase436.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure437 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1694_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1694);
            prepPhraseTimeStructure437=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure437.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 147:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj438 = null;

        ChemicalChunkerParser.inAll_return inAll439 = null;

        ChemicalChunkerParser.dt_return dt440 = null;

        ChemicalChunkerParser.advAdj_return advAdj441 = null;

        ChemicalChunkerParser.cd_return cd442 = null;

        ChemicalChunkerParser.nntime_return nntime443 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:3: ( advAdj )*
            loop80:
            do {
                int alt80=2;
                alt80 = dfa80.predict(input);
                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1711_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1711);
            	    advAdj438=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj438.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:11: ( inAll )?
            int alt81=2;
            switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt81=1;
                    }
                    break;
            }

            switch (alt81) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1714_static.FOLLOW_inAll_in_prepPhraseTimeStructure1714);
                    inAll439=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll439.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:19: ( dt )?
            int alt82=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt82=1;
                    }
                    break;
            }

            switch (alt82) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1718_static.FOLLOW_dt_in_prepPhraseTimeStructure1718);
                    dt440=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt440.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:23: ( advAdj )*
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt83=1;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1721_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1721);
            	    advAdj441=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj441.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:31: ( cd )?
            int alt84=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt84=1;
                    }
                    break;
            }

            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1724_static.FOLLOW_cd_in_prepPhraseTimeStructure1724);
                    cd442=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd442.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:35: ( nntime )+
            int cnt85=0;
            loop85:
            do {
                int alt85=2;
                switch ( input.LA(1) ) {
                case 60:
                    {
                    int LA85_2 = input.LA(2);

                    if ( (synpred361_ChemicalChunker()) ) {
                        alt85=1;
                    }


                    }
                    break;

                }

                switch (alt85) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1727_static.FOLLOW_nntime_in_prepPhraseTimeStructure1727);
            	    nntime443=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime443.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt85 >= 1 ) break loop85;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(85, input);
                        throw eee;
                }
                cnt85++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin444 = null;

        ChemicalChunkerParser.molecule_return molecule445 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1739_static.FOLLOW_inin_in_prepphraseIN1739);
            inin444=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin444.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1741_static.FOLLOW_molecule_in_prepphraseIN1741);
            molecule445=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule445.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas446 = null;

        ChemicalChunkerParser.dt_return dt447 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity448 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1762_static.FOLLOW_inas_in_prepphraseRole1762);
            inas446=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas446.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:8: ( dt )?
            int alt86=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt86=1;
                    }
                    break;
            }

            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1764_static.FOLLOW_dt_in_prepphraseRole1764);
                    dt447=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt447.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1767_static.FOLLOW_nnchementity_in_prepphraseRole1767);
            nnchementity448=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity448.getTree());


            // AST REWRITE
            // elements: nnchementity, dt, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 155:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:156:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent449 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1790_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1790);
            prepphraseAtmosphereContent449=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent449.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder450 = null;

        ChemicalChunkerParser.dt_return dt451 = null;

        ChemicalChunkerParser.advAdj_return advAdj452 = null;

        ChemicalChunkerParser.molecule_return molecule453 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere454 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1809_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1809);
            inunder450=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder450.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:12: ( dt )?
            int alt87=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt87=1;
                    }
                    break;
            }

            switch (alt87) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1812_static.FOLLOW_dt_in_prepphraseAtmosphereContent1812);
                    dt451=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt451.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:16: ( advAdj )*
            loop88:
            do {
                int alt88=2;
                alt88 = dfa88.predict(input);
                switch (alt88) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1815_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1815);
            	    advAdj452=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj452.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1818_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1818);
            molecule453=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule453.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:33: ( nnatmosphere )?
            int alt89=2;
            switch ( input.LA(1) ) {
                case 64:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA89_3 = input.LA(3);

                            if ( (synpred365_ChemicalChunker()) ) {
                                alt89=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt89) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1820_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1820);
                    nnatmosphere454=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere454.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in455 = null;

        ChemicalChunkerParser.inas_return inas456 = null;

        ChemicalChunkerParser.inbefore_return inbefore457 = null;

        ChemicalChunkerParser.inby_return inby458 = null;

        ChemicalChunkerParser.infor_return infor459 = null;

        ChemicalChunkerParser.infrom_return infrom460 = null;

        ChemicalChunkerParser.inin_return inin461 = null;

        ChemicalChunkerParser.ininto_return ininto462 = null;

        ChemicalChunkerParser.inof_return inof463 = null;

        ChemicalChunkerParser.inoff_return inoff464 = null;

        ChemicalChunkerParser.inon_return inon465 = null;

        ChemicalChunkerParser.inover_return inover466 = null;

        ChemicalChunkerParser.inunder_return inunder467 = null;

        ChemicalChunkerParser.invia_return invia468 = null;

        ChemicalChunkerParser.inwith_return inwith469 = null;

        ChemicalChunkerParser.inwithout_return inwithout470 = null;

        ChemicalChunkerParser.to_return to471 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt90=17;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt90=1;
                }
                break;
            case 43:
                {
                alt90=2;
                }
                break;
            case 44:
                {
                alt90=3;
                }
                break;
            case 50:
                {
                alt90=4;
                }
                break;
            case 54:
                {
                alt90=5;
                }
                break;
            case 55:
                {
                alt90=6;
                }
                break;
            case 46:
                {
                alt90=7;
                }
                break;
            case 47:
                {
                alt90=8;
                }
                break;
            case 52:
                {
                alt90=9;
                }
                break;
            case 58:
                {
                alt90=10;
                }
                break;
            case 53:
                {
                alt90=11;
                }
                break;
            case 57:
                {
                alt90=12;
                }
                break;
            case 56:
                {
                alt90=13;
                }
                break;
            case 51:
                {
                alt90=14;
                }
                break;
            case 48:
                {
                alt90=15;
                }
                break;
            case 49:
                {
                alt90=16;
                }
                break;
            case 163:
                {
                alt90=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost1831_static.FOLLOW_in_in_inMost1831);
                    in455=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in455.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost1833_static.FOLLOW_inas_in_inMost1833);
                    inas456=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas456.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost1835_static.FOLLOW_inbefore_in_inMost1835);
                    inbefore457=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore457.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost1837_static.FOLLOW_inby_in_inMost1837);
                    inby458=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby458.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost1839_static.FOLLOW_infor_in_inMost1839);
                    infor459=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor459.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost1841_static.FOLLOW_infrom_in_inMost1841);
                    infrom460=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom460.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost1843_static.FOLLOW_inin_in_inMost1843);
                    inin461=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin461.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost1845_static.FOLLOW_ininto_in_inMost1845);
                    ininto462=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto462.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost1847_static.FOLLOW_inof_in_inMost1847);
                    inof463=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof463.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost1849_static.FOLLOW_inoff_in_inMost1849);
                    inoff464=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff464.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost1851_static.FOLLOW_inon_in_inMost1851);
                    inon465=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon465.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost1853_static.FOLLOW_inover_in_inMost1853);
                    inover466=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover466.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost1855_static.FOLLOW_inunder_in_inMost1855);
                    inunder467=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder467.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost1857_static.FOLLOW_invia_in_inMost1857);
                    invia468=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia468.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost1859_static.FOLLOW_inwith_in_inMost1859);
                    inwith469=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith469.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost1861_static.FOLLOW_inwithout_in_inMost1861);
                    inwithout470=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout470.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost1863_static.FOLLOW_to_in_inMost1863);
                    to471=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to471.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in472 = null;

        ChemicalChunkerParser.inafter_return inafter473 = null;

        ChemicalChunkerParser.inas_return inas474 = null;

        ChemicalChunkerParser.inbefore_return inbefore475 = null;

        ChemicalChunkerParser.inby_return inby476 = null;

        ChemicalChunkerParser.infor_return infor477 = null;

        ChemicalChunkerParser.infrom_return infrom478 = null;

        ChemicalChunkerParser.inin_return inin479 = null;

        ChemicalChunkerParser.ininto_return ininto480 = null;

        ChemicalChunkerParser.inof_return inof481 = null;

        ChemicalChunkerParser.inoff_return inoff482 = null;

        ChemicalChunkerParser.inon_return inon483 = null;

        ChemicalChunkerParser.inover_return inover484 = null;

        ChemicalChunkerParser.inunder_return inunder485 = null;

        ChemicalChunkerParser.invia_return invia486 = null;

        ChemicalChunkerParser.inwith_return inwith487 = null;

        ChemicalChunkerParser.inwithout_return inwithout488 = null;

        ChemicalChunkerParser.to_return to489 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt91=18;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt91=1;
                }
                break;
            case 45:
                {
                alt91=2;
                }
                break;
            case 43:
                {
                alt91=3;
                }
                break;
            case 44:
                {
                alt91=4;
                }
                break;
            case 50:
                {
                alt91=5;
                }
                break;
            case 54:
                {
                alt91=6;
                }
                break;
            case 55:
                {
                alt91=7;
                }
                break;
            case 46:
                {
                alt91=8;
                }
                break;
            case 47:
                {
                alt91=9;
                }
                break;
            case 52:
                {
                alt91=10;
                }
                break;
            case 58:
                {
                alt91=11;
                }
                break;
            case 53:
                {
                alt91=12;
                }
                break;
            case 57:
                {
                alt91=13;
                }
                break;
            case 56:
                {
                alt91=14;
                }
                break;
            case 51:
                {
                alt91=15;
                }
                break;
            case 48:
                {
                alt91=16;
                }
                break;
            case 49:
                {
                alt91=17;
                }
                break;
            case 163:
                {
                alt91=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1871_static.FOLLOW_in_in_inAll1871);
                    in472=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in472.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1873_static.FOLLOW_inafter_in_inAll1873);
                    inafter473=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter473.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1875_static.FOLLOW_inas_in_inAll1875);
                    inas474=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas474.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1877_static.FOLLOW_inbefore_in_inAll1877);
                    inbefore475=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore475.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1879_static.FOLLOW_inby_in_inAll1879);
                    inby476=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby476.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1881_static.FOLLOW_infor_in_inAll1881);
                    infor477=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor477.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1883_static.FOLLOW_infrom_in_inAll1883);
                    infrom478=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom478.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1885_static.FOLLOW_inin_in_inAll1885);
                    inin479=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin479.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1887_static.FOLLOW_ininto_in_inAll1887);
                    ininto480=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto480.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1889_static.FOLLOW_inof_in_inAll1889);
                    inof481=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof481.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1891_static.FOLLOW_inoff_in_inAll1891);
                    inoff482=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff482.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1893_static.FOLLOW_inon_in_inAll1893);
                    inon483=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon483.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1895_static.FOLLOW_inover_in_inAll1895);
                    inover484=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover484.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1897_static.FOLLOW_inunder_in_inAll1897);
                    inunder485=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder485.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1899_static.FOLLOW_invia_in_inAll1899);
                    invia486=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia486.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1901_static.FOLLOW_inwith_in_inAll1901);
                    inwith487=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith487.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1903_static.FOLLOW_inwithout_in_inAll1903);
                    inwithout488=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout488.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1905_static.FOLLOW_to_in_inAll1905);
                    to489=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to489.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent490 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1912_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1912);
            prepphraseTempContent490=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent490.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 164:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj491 = null;

        ChemicalChunkerParser.inAll_return inAll492 = null;

        ChemicalChunkerParser.dt_return dt493 = null;

        ChemicalChunkerParser.advAdj_return advAdj494 = null;

        ChemicalChunkerParser.cd_return cd495 = null;

        ChemicalChunkerParser.nntemp_return nntemp496 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:5: ( advAdj )?
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1933_static.FOLLOW_advAdj_in_prepphraseTempContent1933);
                    advAdj491=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj491.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:13: ( inAll )?
            int alt93=2;
            switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt93=1;
                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1936_static.FOLLOW_inAll_in_prepphraseTempContent1936);
                    inAll492=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll492.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:20: ( dt )?
            int alt94=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt94=1;
                    }
                    break;
            }

            switch (alt94) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1939_static.FOLLOW_dt_in_prepphraseTempContent1939);
                    dt493=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt493.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:24: ( advAdj )?
            int alt95=2;
            switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt95=1;
                    }
                    break;
            }

            switch (alt95) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1942_static.FOLLOW_advAdj_in_prepphraseTempContent1942);
                    advAdj494=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj494.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:32: ( cd )?
            int alt96=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt96=1;
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1945_static.FOLLOW_cd_in_prepphraseTempContent1945);
                    cd495=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd495.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:36: ( nntemp )+
            int cnt97=0;
            loop97:
            do {
                int alt97=2;
                switch ( input.LA(1) ) {
                case 68:
                    {
                    int LA97_2 = input.LA(2);

                    if ( (synpred404_ChemicalChunker()) ) {
                        alt97=1;
                    }


                    }
                    break;

                }

                switch (alt97) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1948_static.FOLLOW_nntemp_in_prepphraseTempContent1948);
            	    nntemp496=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp496.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt97 >= 1 ) break loop97;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(97, input);
                        throw eee;
                }
                cnt97++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj497 = null;

        ChemicalChunkerParser.inafter_return inafter498 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase499 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:5: ( advAdj )?
            int alt98=2;
            switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt98=1;
                    }
                    break;
            }

            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1961_static.FOLLOW_advAdj_in_prepphraseAfter1961);
                    advAdj497=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj497.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1964_static.FOLLOW_inafter_in_prepphraseAfter1964);
            inafter498=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter498.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1967_static.FOLLOW_nounphrase_in_prepphraseAfter1967);
            nounphrase499=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase499.getTree());


            // AST REWRITE
            // elements: advAdj, inafter, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 170:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd500 = null;

        ChemicalChunkerParser.nnamount_return nnamount501 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:10: ( cd )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount1997_static.FOLLOW_cd_in_amount1997);
            	    cd500=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd500.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2000_static.FOLLOW_nnamount_in_amount2000);
            nnamount501=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount501.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 173:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd502 = null;

        ChemicalChunkerParser.nnmass_return nnmass503 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:8: ( cd )+
            int cnt100=0;
            loop100:
            do {
                int alt100=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt100=1;
                    }
                    break;

                }

                switch (alt100) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2021_static.FOLLOW_cd_in_mass2021);
            	    cd502=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd502.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt100 >= 1 ) break loop100;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(100, input);
                        throw eee;
                }
                cnt100++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2024_static.FOLLOW_nnmass_in_mass2024);
            nnmass503=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass503.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 174:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:1: percent : number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number504 = null;

        ChemicalChunkerParser.nn_return nn505 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent506 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:9: ( number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:11: number ( nn )? nnpercent
            {
            pushFollow(FOLLOW_number_in_percent2045_static.FOLLOW_number_in_percent2045);
            number504=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number504.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:18: ( nn )?
            int alt101=2;
            switch ( input.LA(1) ) {
                case 150:
                    {
                    alt101=1;
                    }
                    break;
            }

            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2047_static.FOLLOW_nn_in_percent2047);
                    nn505=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn505.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2050_static.FOLLOW_nnpercent_in_percent2050);
            nnpercent506=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent506.getTree());


            // AST REWRITE
            // elements: number, nnpercent, nn
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 175:32: -> ^( PERCENT number ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:35: ^( PERCENT number ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_number.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd507 = null;

        ChemicalChunkerParser.nnvol_return nnvol508 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:10: ( cd )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt102=1;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2073_static.FOLLOW_cd_in_volume2073);
            	    cd507=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd507.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2076_static.FOLLOW_nnvol_in_volume2076);
            nnvol508=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol508.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 176:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:1: molar : ( cd )* nnmolar -> ^( MOLAR ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd509 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar510 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:7: ( ( cd )* nnmolar -> ^( MOLAR ( cd )* nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:9: ( cd )* nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:9: ( cd )*
            loop103:
            do {
                int alt103=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt103=1;
                    }
                    break;

                }

                switch (alt103) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2097_static.FOLLOW_cd_in_molar2097);
            	    cd509=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd509.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2100_static.FOLLOW_nnmolar_in_molar2100);
            nnmolar510=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar510.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 177:21: -> ^( MOLAR ( cd )* nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:24: ^( MOLAR ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:34: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:1: yield : percent nnyield -> ^( YIELD percent nnyield ) ;
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent511 = null;

        ChemicalChunkerParser.nnyield_return nnyield512 = null;


        RewriteRuleSubtreeStream stream_percent=new RewriteRuleSubtreeStream(adaptor,"rule percent");
        RewriteRuleSubtreeStream stream_nnyield=new RewriteRuleSubtreeStream(adaptor,"rule nnyield");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:6: ( percent nnyield -> ^( YIELD percent nnyield ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:8: percent nnyield
            {
            pushFollow(FOLLOW_percent_in_yield2120_static.FOLLOW_percent_in_yield2120);
            percent511=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percent.add(percent511.getTree());
            pushFollow(FOLLOW_nnyield_in_yield2122_static.FOLLOW_nnyield_in_yield2122);
            nnyield512=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnyield.add(nnyield512.getTree());


            // AST REWRITE
            // elements: percent, nnyield
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:24: -> ^( YIELD percent nnyield )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:27: ^( YIELD percent nnyield )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_percent.nextTree());
                adaptor.addChild(root_1, stream_nnyield.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize513 = null;

        ChemicalChunkerParser.inas_return inas514 = null;

        ChemicalChunkerParser.nnexample_return nnexample515 = null;

        ChemicalChunkerParser.cd_return cd516 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase517 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase2142_static.FOLLOW_vbsynthesize_in_preparationphrase2142);
            vbsynthesize513=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize513.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase2144_static.FOLLOW_inas_in_preparationphrase2144);
            inas514=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas514.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:22: ( nnexample cd | prepphrase )
            int alt104=2;
            switch ( input.LA(1) ) {
            case 78:
                {
                alt104=1;
                }
                break;
            case 35:
            case 36:
            case 41:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 60:
            case 68:
            case 130:
            case 140:
            case 141:
            case 144:
            case 145:
            case 146:
            case 147:
            case 158:
            case 159:
            case 160:
            case 161:
            case 163:
                {
                alt104=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase2147_static.FOLLOW_nnexample_in_preparationphrase2147);
                    nnexample515=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample515.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase2149_static.FOLLOW_cd_in_preparationphrase2149);
                    cd516=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd516.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase2152_static.FOLLOW_prepphrase_in_preparationphrase2152);
                    prepphrase517=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase517.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus518 = null;

        ChemicalChunkerParser.conjunction_return conjunction519 = null;

        ChemicalChunkerParser.apparatus_return apparatus520 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus2165_static.FOLLOW_apparatus_in_multiApparatus2165);
            apparatus518=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus518.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:14: ( ( conjunction )* apparatus )*
            loop106:
            do {
                int alt106=2;
                alt106 = dfa106.predict(input);
                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: ( conjunction )*
            	    loop105:
            	    do {
            	        int alt105=2;
            	        alt105 = dfa105.predict(input);
            	        switch (alt105) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus2168_static.FOLLOW_conjunction_in_multiApparatus2168);
            	    	    conjunction519=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction519.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop105;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus2171_static.FOLLOW_apparatus_in_multiApparatus2171);
            	    apparatus520=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus520.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt521 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus522 = null;

        ChemicalChunkerParser.nnApp_return nnApp523 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: ( dt )?
            int alt107=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt107=1;
                    }
                    break;
            }

            switch (alt107) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus2183_static.FOLLOW_dt_in_apparatus2183);
                    dt521=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt521.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:8: ( preapparatus )*
            loop108:
            do {
                int alt108=2;
                switch ( input.LA(1) ) {
                case 34:
                case 35:
                case 36:
                case 41:
                case 59:
                case 63:
                case 67:
                case 72:
                case 79:
                case 84:
                case 128:
                case 137:
                case 140:
                case 145:
                case 146:
                case 147:
                case 150:
                    {
                    alt108=1;
                    }
                    break;

                }

                switch (alt108) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus2186_static.FOLLOW_preapparatus_in_apparatus2186);
            	    preapparatus522=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus522.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:22: ( nnApp )+
            int cnt109=0;
            loop109:
            do {
                int alt109=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    int LA109_2 = input.LA(2);

                    if ( (synpred416_ChemicalChunker()) ) {
                        alt109=1;
                    }


                    }
                    break;

                }

                switch (alt109) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus2189_static.FOLLOW_nnApp_in_apparatus2189);
            	    nnApp523=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp523.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt109 >= 1 ) break loop109;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(109, input);
                        throw eee;
                }
                cnt109++;
            } while (true);



            // AST REWRITE
            // elements: nnApp, preapparatus, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 186:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus524 = null;

        ChemicalChunkerParser.dash_return dash525 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus526 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: ( nnapparatus )+
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    int LA110_2 = input.LA(2);

                    if ( (synpred417_ChemicalChunker()) ) {
                        alt110=1;
                    }


                    }
                    break;

                }

                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2217_static.FOLLOW_nnapparatus_in_nnApp2217);
            	    nnapparatus524=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus524.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:17: ( dash nnapparatus )*
            loop111:
            do {
                int alt111=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 95:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA111_5 = input.LA(5);

                                if ( (synpred418_ChemicalChunker()) ) {
                                    alt111=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt111) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp2221_static.FOLLOW_dash_in_nnApp2221);
            	    dash525=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash525.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2223_static.FOLLOW_nnapparatus_in_nnApp2223);
            	    nnapparatus526=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus526.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity527 = null;

        ChemicalChunkerParser.adj_return adj528 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure529 = null;

        ChemicalChunkerParser.nnadd_return nnadd530 = null;

        ChemicalChunkerParser.molecule_return molecule531 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity532 = null;

        ChemicalChunkerParser.nnstate_return nnstate533 = null;

        ChemicalChunkerParser.nn_return nn534 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt112=0;
            loop112:
            do {
                int alt112=9;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus2237_static.FOLLOW_quantity_in_preapparatus2237);
            	    quantity527=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity527.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus2239_static.FOLLOW_adj_in_preapparatus2239);
            	    adj528=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj528.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus2241_static.FOLLOW_nnpressure_in_preapparatus2241);
            	    nnpressure529=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure529.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus2243_static.FOLLOW_nnadd_in_preapparatus2243);
            	    nnadd530=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd530.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus2245_static.FOLLOW_molecule_in_preapparatus2245);
            	    molecule531=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule531.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus2247_static.FOLLOW_nnchementity_in_preapparatus2247);
            	    nnchementity532=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity532.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus2249_static.FOLLOW_nnstate_in_preapparatus2249);
            	    nnstate533=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate533.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus2251_static.FOLLOW_nn_in_preapparatus2251);
            	    nn534=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn534.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd535 = null;

        ChemicalChunkerParser.nn_return nn536 = null;

        ChemicalChunkerParser.multiple_return multiple537 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes538 = null;

        ChemicalChunkerParser.dt_return dt539 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:3: ( cd nn )?
            int alt113=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 150:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 34:
                                                case 63:
                                                case 140:
                                                    {
                                                    alt113=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt113) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2262_static.FOLLOW_cd_in_measurements2262);
                    cd535=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd535.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2264_static.FOLLOW_nn_in_measurements2264);
                    nn536=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn536.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:12: ( multiple | measurementtypes )
            int alt114=2;
            switch ( input.LA(1) ) {
            case 140:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 40:
                        {
                        alt114=1;
                        }
                        break;
                    case 61:
                    case 62:
                    case 63:
                    case 66:
                    case 133:
                    case 140:
                    case 150:
                        {
                        alt114=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;
                }

                }
                break;
            case 34:
            case 63:
                {
                alt114=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2269_static.FOLLOW_multiple_in_measurements2269);
                    multiple537=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple537.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2271_static.FOLLOW_measurementtypes_in_measurements2271);
                    measurementtypes538=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes538.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:43: ( dt )?
            int alt115=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA115_3 = input.LA(3);

                            if ( (synpred429_ChemicalChunker()) ) {
                                alt115=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt115) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2277_static.FOLLOW_dt_in_measurements2277);
                    dt539=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt539.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd540 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode541 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes542 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2285_static.FOLLOW_cd_in_multiple2285);
            cd540=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd540.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2287_static.FOLLOW_cdunicode_in_multiple2287);
            cdunicode541=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode541.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:25: ( measurementtypes )?
            int alt116=2;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2289_static.FOLLOW_measurementtypes_in_multiple2289);
                    measurementtypes542=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes542.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdunicode, measurementtypes, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 194:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:1: measurementtypes : ( molar | amount | mass | volume | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar543 = null;

        ChemicalChunkerParser.amount_return amount544 = null;

        ChemicalChunkerParser.mass_return mass545 = null;

        ChemicalChunkerParser.volume_return volume546 = null;

        ChemicalChunkerParser.yield_return yield547 = null;

        ChemicalChunkerParser.percent_return percent548 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:2: ( molar | amount | mass | volume | yield | percent )
            int alt117=6;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2316_static.FOLLOW_molar_in_measurementtypes2316);
                    molar543=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar543.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2318_static.FOLLOW_amount_in_measurementtypes2318);
                    amount544=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount544.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2320_static.FOLLOW_mass_in_measurementtypes2320);
                    mass545=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass545.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2322_static.FOLLOW_volume_in_measurementtypes2322);
                    volume546=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume546.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:29: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2324_static.FOLLOW_yield_in_measurementtypes2324);
                    yield547=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield547.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2326_static.FOLLOW_percent_in_measurementtypes2326);
                    percent548=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent548.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront549 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: ( oscaront )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                switch ( input.LA(1) ) {
                case 38:
                    {
                    int LA118_2 = input.LA(2);

                    if ( (synpred436_ChemicalChunker()) ) {
                        alt118=1;
                    }


                    }
                    break;

                }

                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts2337_static.FOLLOW_oscaront_in_oscaronts2337);
            	    oscaront549=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront549.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 200:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj550 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1551 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2552 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3553 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4554 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm555 = null;

        ChemicalChunkerParser.adj_return adj556 = null;

        ChemicalChunkerParser.reference_return reference557 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:18: ( adj )*
            loop119:
            do {
                int alt119=2;
                switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                    {
                    alt119=1;
                    }
                    break;

                }

                switch (alt119) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound2357_static.FOLLOW_adj_in_oscarCompound2357);
            	    adj550=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj550.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt120=5;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound2361_static.FOLLOW_oscarCompound1_in_oscarCompound2361);
                    oscarCompound1551=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1551.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound2363_static.FOLLOW_oscarCompound2_in_oscarCompound2363);
                    oscarCompound2552=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2552.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound2365_static.FOLLOW_oscarCompound3_in_oscarCompound2365);
                    oscarCompound3553=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3553.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound2367_static.FOLLOW_oscarCompound4_in_oscarCompound2367);
                    oscarCompound4554=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4554.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound2369_static.FOLLOW_oscarcm_in_oscarCompound2369);
                    oscarcm555=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm555.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:93: ( adj )?
            int alt121=2;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound2372_static.FOLLOW_adj_in_oscarCompound2372);
                    adj556=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj556.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:98: ( reference )?
            int alt122=2;
            switch ( input.LA(1) ) {
                case 134:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 140:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 135:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA122_7 = input.LA(7);

                                                            if ( (synpred443_ChemicalChunker()) ) {
                                                                alt122=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: reference
                    {
                    pushFollow(FOLLOW_reference_in_oscarCompound2375_static.FOLLOW_reference_in_oscarCompound2375);
                    reference557=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference557.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: oscarCompound4 : lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);
        int oscarCompound4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb558 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm559 = null;

        ChemicalChunkerParser.rrb_return rrb560 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:16: ( lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound42384_static.FOLLOW_lrb_in_oscarCompound42384);
            lrb558=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb558.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound42387_static.FOLLOW_oscarcm_in_oscarCompound42387);
            oscarcm559=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm559.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound42389_static.FOLLOW_rrb_in_oscarCompound42389);
            rrb560=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb560.getTree());


            // AST REWRITE
            // elements: oscarcm, lrb, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 203:35: -> ^( OSCARCM lrb oscarcm rrb )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:38: ^( OSCARCM lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, oscarCompound4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:1: oscarCompound3 : oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);
        int oscarCompound3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure561 = null;


        RewriteRuleSubtreeStream stream_oscarCompound3Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound3Structure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:16: ( oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:18: oscarCompound3Structure
            {
            pushFollow(FOLLOW_oscarCompound3Structure_in_oscarCompound32412_static.FOLLOW_oscarCompound3Structure_in_oscarCompound32412);
            oscarCompound3Structure561=oscarCompound3Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound3Structure.add(oscarCompound3Structure561.getTree());


            // AST REWRITE
            // elements: oscarCompound3Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 204:42: -> ^( OSCARCM oscarCompound3Structure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:45: ^( OSCARCM oscarCompound3Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound3Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, oscarCompound3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:1: oscarCompound2 : oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);
        int oscarCompound2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure562 = null;


        RewriteRuleSubtreeStream stream_oscarCompound2Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound2Structure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:16: ( oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:18: oscarCompound2Structure
            {
            pushFollow(FOLLOW_oscarCompound2Structure_in_oscarCompound22430_static.FOLLOW_oscarCompound2Structure_in_oscarCompound22430);
            oscarCompound2Structure562=oscarCompound2Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound2Structure.add(oscarCompound2Structure562.getTree());


            // AST REWRITE
            // elements: oscarCompound2Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 205:42: -> ^( OSCARCM oscarCompound2Structure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:45: ^( OSCARCM oscarCompound2Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound2Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, oscarCompound2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);
        int oscarCompound1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm563 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm564 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:16: ( oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound12448_static.FOLLOW_oscarcm_in_oscarCompound12448);
            oscarcm563=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm563.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:26: ( oscarcm )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                switch ( input.LA(1) ) {
                case 79:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA123_3 = input.LA(3);

                        if ( (synpred444_ChemicalChunker()) ) {
                            alt123=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt123) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound12450_static.FOLLOW_oscarcm_in_oscarCompound12450);
            	    oscarcm564=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm564.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:35: -> ^( OSCARCM oscarcm ( oscarcm )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:38: ^( OSCARCM oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, oscarCompound1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class oscarCompound3Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3Structure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: oscarCompound3Structure : oscarcm ( dash | apost )+ ;
    public final ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3Structure_return retval = new ChemicalChunkerParser.oscarCompound3Structure_return();
        retval.start = input.LT(1);
        int oscarCompound3Structure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm565 = null;

        ChemicalChunkerParser.dash_return dash566 = null;

        ChemicalChunkerParser.apost_return apost567 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( oscarcm ( dash | apost )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:5: oscarcm ( dash | apost )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound3Structure2475_static.FOLLOW_oscarcm_in_oscarCompound3Structure2475);
            oscarcm565=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm565.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:13: ( dash | apost )+
            int cnt124=0;
            loop124:
            do {
                int alt124=3;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA124_4 = input.LA(3);

                        if ( (synpred445_ChemicalChunker()) ) {
                            alt124=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 129:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA124_5 = input.LA(3);

                        if ( (synpred446_ChemicalChunker()) ) {
                            alt124=2;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt124) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:14: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound3Structure2478_static.FOLLOW_dash_in_oscarCompound3Structure2478);
            	    dash566=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash566.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:19: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound3Structure2480_static.FOLLOW_apost_in_oscarCompound3Structure2480);
            	    apost567=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost567.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, oscarCompound3Structure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3Structure"

    public static class oscarCompound2Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2Structure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:1: oscarCompound2Structure : oscarcm ( dash oscarcm )+ ( dash )? ;
    public final ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2Structure_return retval = new ChemicalChunkerParser.oscarCompound2Structure_return();
        retval.start = input.LT(1);
        int oscarCompound2Structure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm568 = null;

        ChemicalChunkerParser.dash_return dash569 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm570 = null;

        ChemicalChunkerParser.dash_return dash571 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:2: ( oscarcm ( dash oscarcm )+ ( dash )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:5: oscarcm ( dash oscarcm )+ ( dash )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2494_static.FOLLOW_oscarcm_in_oscarCompound2Structure2494);
            oscarcm568=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm568.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:13: ( dash oscarcm )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 79:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA125_5 = input.LA(5);

                                if ( (synpred447_ChemicalChunker()) ) {
                                    alt125=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:14: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2497_static.FOLLOW_dash_in_oscarCompound2Structure2497);
            	    dash569=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash569.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2499_static.FOLLOW_oscarcm_in_oscarCompound2Structure2499);
            	    oscarcm570=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm570.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:30: ( dash )?
            int alt126=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA126_3 = input.LA(3);

                            if ( (synpred448_ChemicalChunker()) ) {
                                alt126=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2504_static.FOLLOW_dash_in_oscarCompound2Structure2504);
                    dash571=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash571.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, oscarCompound2Structure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2Structure"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ( mixture )? ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity572 = null;

        ChemicalChunkerParser.mixture_return mixture573 = null;

        ChemicalChunkerParser.inof_return inof574 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound575 = null;

        ChemicalChunkerParser.mixture_return mixture576 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:2: ( ( quantity | mixture )+ inof oscarCompound ( mixture )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:3: ( quantity | mixture )+ inof oscarCompound ( mixture )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:3: ( quantity | mixture )+
            int cnt127=0;
            loop127:
            do {
                int alt127=3;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    int LA127_2 = input.LA(2);

                    if ( (synpred449_ChemicalChunker()) ) {
                        alt127=1;
                    }
                    else if ( (synpred450_ChemicalChunker()) ) {
                        alt127=2;
                    }


                    }
                    break;
                case 140:
                    {
                    int LA127_3 = input.LA(2);

                    if ( (synpred449_ChemicalChunker()) ) {
                        alt127=1;
                    }
                    else if ( (synpred450_ChemicalChunker()) ) {
                        alt127=2;
                    }


                    }
                    break;
                case 34:
                case 63:
                    {
                    alt127=1;
                    }
                    break;
                case 128:
                    {
                    alt127=2;
                    }
                    break;

                }

                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount12518_static.FOLLOW_quantity_in_moleculeamount12518);
            	    quantity572=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity572.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount12520_static.FOLLOW_mixture_in_moleculeamount12520);
            	    mixture573=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture573.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt127 >= 1 ) break loop127;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(127, input);
                        throw eee;
                }
                cnt127++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount12524_static.FOLLOW_inof_in_moleculeamount12524);
            inof574=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof574.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount12526_static.FOLLOW_oscarCompound_in_moleculeamount12526);
            oscarCompound575=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound575.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:42: ( mixture )?
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount12528_static.FOLLOW_mixture_in_moleculeamount12528);
                    mixture576=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture576.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity577 = null;

        ChemicalChunkerParser.mixture_return mixture578 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound579 = null;

        ChemicalChunkerParser.citation_return citation580 = null;

        ChemicalChunkerParser.quantity_return quantity581 = null;

        ChemicalChunkerParser.mixture_return mixture582 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:3: ( quantity | mixture )*
            loop129:
            do {
                int alt129=3;
                alt129 = dfa129.predict(input);
                switch (alt129) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22539_static.FOLLOW_quantity_in_moleculeamount22539);
            	    quantity577=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity577.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22541_static.FOLLOW_mixture_in_moleculeamount22541);
            	    mixture578=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture578.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:23: ( oscarCompound )+
            int cnt130=0;
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount22545_static.FOLLOW_oscarCompound_in_moleculeamount22545);
            	    oscarCompound579=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound579.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt130 >= 1 ) break loop130;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(130, input);
                        throw eee;
                }
                cnt130++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:39: ( citation | quantity | mixture )*
            loop131:
            do {
                int alt131=4;
                alt131 = dfa131.predict(input);
                switch (alt131) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount22550_static.FOLLOW_citation_in_moleculeamount22550);
            	    citation580=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation580.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22552_static.FOLLOW_quantity_in_moleculeamount22552);
            	    quantity581=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity581.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22554_static.FOLLOW_mixture_in_moleculeamount22554);
            	    mixture582=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture582.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:1: moleculeamount3 : ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity583 = null;

        ChemicalChunkerParser.mixture_return mixture584 = null;

        ChemicalChunkerParser.inof_return inof585 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio586 = null;

        ChemicalChunkerParser.mixture_return mixture587 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound588 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:2: ( ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:3: ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:3: ( quantity | mixture )
            int alt132=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                int LA132_1 = input.LA(2);

                if ( (synpred458_ChemicalChunker()) ) {
                    alt132=1;
                }
                else if ( (true) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 1, input);

                    throw nvae;
                }
                }
                break;
            case 140:
                {
                int LA132_2 = input.LA(2);

                if ( (synpred458_ChemicalChunker()) ) {
                    alt132=1;
                }
                else if ( (true) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 2, input);

                    throw nvae;
                }
                }
                break;
            case 34:
            case 63:
                {
                alt132=1;
                }
                break;
            case 128:
                {
                alt132=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount32568_static.FOLLOW_quantity_in_moleculeamount32568);
                    quantity583=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity583.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32570_static.FOLLOW_mixture_in_moleculeamount32570);
                    mixture584=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture584.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount32573_static.FOLLOW_inof_in_moleculeamount32573);
            inof585=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof585.getTree());
            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount32575_static.FOLLOW_mixtureRatio_in_moleculeamount32575);
            mixtureRatio586=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio586.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:40: ( mixture )?
            int alt133=2;
            switch ( input.LA(1) ) {
                case 128:
                case 140:
                    {
                    alt133=1;
                    }
                    break;
                case 137:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 79:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 34:
                                                case 35:
                                                case 36:
                                                case 37:
                                                case 38:
                                                case 39:
                                                case 41:
                                                case 42:
                                                case 43:
                                                case 44:
                                                case 45:
                                                case 46:
                                                case 47:
                                                case 48:
                                                case 49:
                                                case 50:
                                                case 51:
                                                case 52:
                                                case 53:
                                                case 54:
                                                case 55:
                                                case 56:
                                                case 57:
                                                case 58:
                                                case 59:
                                                case 60:
                                                case 62:
                                                case 63:
                                                case 64:
                                                case 65:
                                                case 66:
                                                case 67:
                                                case 68:
                                                case 69:
                                                case 70:
                                                case 71:
                                                case 72:
                                                case 73:
                                                case 74:
                                                case 75:
                                                case 76:
                                                case 77:
                                                case 78:
                                                case 79:
                                                case 80:
                                                case 81:
                                                case 82:
                                                case 83:
                                                case 84:
                                                case 85:
                                                case 86:
                                                case 87:
                                                case 88:
                                                case 89:
                                                case 90:
                                                case 91:
                                                case 92:
                                                case 93:
                                                case 94:
                                                case 95:
                                                case 96:
                                                case 97:
                                                case 98:
                                                case 99:
                                                case 100:
                                                case 101:
                                                case 102:
                                                case 103:
                                                case 104:
                                                case 105:
                                                case 106:
                                                case 107:
                                                case 108:
                                                case 109:
                                                case 110:
                                                case 111:
                                                case 112:
                                                case 113:
                                                case 114:
                                                case 115:
                                                case 116:
                                                case 117:
                                                case 118:
                                                case 119:
                                                case 120:
                                                case 121:
                                                case 122:
                                                case 123:
                                                case 124:
                                                case 125:
                                                case 127:
                                                case 128:
                                                case 129:
                                                case 131:
                                                case 132:
                                                case 133:
                                                case 134:
                                                case 137:
                                                case 140:
                                                case 141:
                                                case 142:
                                                case 143:
                                                case 144:
                                                case 145:
                                                case 146:
                                                case 147:
                                                case 148:
                                                case 149:
                                                case 150:
                                                case 151:
                                                case 152:
                                                case 153:
                                                case 154:
                                                case 155:
                                                case 156:
                                                case 157:
                                                case 162:
                                                case 163:
                                                case 165:
                                                case 166:
                                                case 167:
                                                case 168:
                                                case 169:
                                                case 170:
                                                case 171:
                                                case 172:
                                                case 173:
                                                case 174:
                                                    {
                                                    alt133=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 127:
                                case 128:
                                case 131:
                                case 132:
                                case 133:
                                case 134:
                                case 137:
                                case 140:
                                case 141:
                                case 142:
                                case 143:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 162:
                                case 163:
                                case 165:
                                case 166:
                                case 167:
                                case 168:
                                case 169:
                                case 170:
                                case 171:
                                case 172:
                                case 173:
                                case 174:
                                    {
                                    alt133=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32577_static.FOLLOW_mixture_in_moleculeamount32577);
                    mixture587=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture587.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount32580_static.FOLLOW_oscarCompound_in_moleculeamount32580);
            oscarCompound588=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound588.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3589 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1590 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2591 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:16: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt134=3;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:18: moleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount2590_static.FOLLOW_moleculeamount3_in_moleculeamount2590);
                    moleculeamount3589=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3589.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:34: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount2592_static.FOLLOW_moleculeamount1_in_moleculeamount2592);
                    moleculeamount1590=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1590.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:52: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount2596_static.FOLLOW_moleculeamount2_in_moleculeamount2596);
                    moleculeamount2591=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2591.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount592 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule2617_static.FOLLOW_moleculeamount_in_molecule2617);
            moleculeamount592=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount592.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class cdAlphanumType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanumType"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: cdAlphanumType : lrb ( cdAlphanum | cd ) rrb ;
    public final ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanumType_return retval = new ChemicalChunkerParser.cdAlphanumType_return();
        retval.start = input.LT(1);
        int cdAlphanumType_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb593 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum594 = null;

        ChemicalChunkerParser.cd_return cd595 = null;

        ChemicalChunkerParser.rrb_return rrb596 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:16: ( lrb ( cdAlphanum | cd ) rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:19: lrb ( cdAlphanum | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_cdAlphanumType2639_static.FOLLOW_lrb_in_cdAlphanumType2639);
            lrb593=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb593.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:23: ( cdAlphanum | cd )
            int alt135=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt135=1;
                }
                break;
            case 140:
                {
                alt135=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:24: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_cdAlphanumType2642_static.FOLLOW_cdAlphanum_in_cdAlphanumType2642);
                    cdAlphanum594=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum594.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:35: cd
                    {
                    pushFollow(FOLLOW_cd_in_cdAlphanumType2644_static.FOLLOW_cd_in_cdAlphanumType2644);
                    cd595=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd595.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_cdAlphanumType2647_static.FOLLOW_rrb_in_cdAlphanumType2647);
            rrb596=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb596.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, cdAlphanumType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanumType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:1: unnamedmoleculeamount1 : quantity inof ( cdAlphanum | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity597 = null;

        ChemicalChunkerParser.inof_return inof598 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum599 = null;

        ChemicalChunkerParser.cd_return cd600 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:2: ( quantity inof ( cdAlphanum | cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:4: quantity inof ( cdAlphanum | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12656_static.FOLLOW_quantity_in_unnamedmoleculeamount12656);
            quantity597=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity597.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12658_static.FOLLOW_inof_in_unnamedmoleculeamount12658);
            inof598=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof598.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:18: ( cdAlphanum | cd )
            int alt136=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt136=1;
                }
                break;
            case 140:
                {
                alt136=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:19: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount12661_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount12661);
                    cdAlphanum599=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum599.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:30: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12663_static.FOLLOW_cd_in_unnamedmoleculeamount12663);
                    cd600=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd600.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: unnamedmoleculeamount2 : ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum601 = null;

        ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType602 = null;

        ChemicalChunkerParser.citation_return citation603 = null;

        ChemicalChunkerParser.quantity_return quantity604 = null;

        ChemicalChunkerParser.mixture_return mixture605 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:2: ( ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: ( cdAlphanum | cdAlphanumType )
            int alt137=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt137=1;
                }
                break;
            case 137:
                {
                alt137=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:4: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount22672_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount22672);
                    cdAlphanum601=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum601.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:15: cdAlphanumType
                    {
                    pushFollow(FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22674_static.FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22674);
                    cdAlphanumType602=cdAlphanumType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanumType602.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:31: ( citation | quantity | mixture )*
            loop138:
            do {
                int alt138=4;
                alt138 = dfa138.predict(input);
                switch (alt138) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:32: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22678_static.FOLLOW_citation_in_unnamedmoleculeamount22678);
            	    citation603=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation603.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:41: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22680_static.FOLLOW_quantity_in_unnamedmoleculeamount22680);
            	    quantity604=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity604.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22682_static.FOLLOW_mixture_in_unnamedmoleculeamount22682);
            	    mixture605=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture605.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity606 = null;

        ChemicalChunkerParser.inof_return inof607 = null;

        ChemicalChunkerParser.jj_return jj608 = null;

        ChemicalChunkerParser.noun_return noun609 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:2: ( quantity inof ( ( jj )? noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32698_static.FOLLOW_quantity_in_unnamedmoleculeamount32698);
            quantity606=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity606.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32700_static.FOLLOW_inof_in_unnamedmoleculeamount32700);
            inof607=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof607.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:17: ( ( jj )? noun )+
            int cnt140=0;
            loop140:
            do {
                int alt140=2;
                alt140 = dfa140.predict(input);
                switch (alt140) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: ( jj )? noun
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: ( jj )?
            	    int alt139=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA139_3 = input.LA(3);

            	                    if ( (synpred468_ChemicalChunker()) ) {
            	                        alt139=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt139) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32703_static.FOLLOW_jj_in_unnamedmoleculeamount32703);
            	            jj608=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj608.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32706_static.FOLLOW_noun_in_unnamedmoleculeamount32706);
            	    noun609=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun609.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt140 >= 1 ) break loop140;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(140, input);
                        throw eee;
                }
                cnt140++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity610 = null;

        ChemicalChunkerParser.mixture_return mixture611 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity612 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:2: ( ( quantity | mixture ) nnchementity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:3: ( quantity | mixture )
            int alt141=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                int LA141_1 = input.LA(2);

                if ( (synpred470_ChemicalChunker()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;
                }
                }
                break;
            case 140:
                {
                int LA141_2 = input.LA(2);

                if ( (synpred470_ChemicalChunker()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 2, input);

                    throw nvae;
                }
                }
                break;
            case 34:
            case 63:
                {
                alt141=1;
                }
                break;
            case 128:
                {
                alt141=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount42719_static.FOLLOW_quantity_in_unnamedmoleculeamount42719);
                    quantity610=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity610.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount42721_static.FOLLOW_mixture_in_unnamedmoleculeamount42721);
                    mixture611=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture611.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount42724_static.FOLLOW_nnchementity_in_unnamedmoleculeamount42724);
            nnchementity612=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity612.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:1: unnamedmoleculeamount5 : jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp613 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity614 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum615 = null;

        ChemicalChunkerParser.quantity_return quantity616 = null;

        ChemicalChunkerParser.mixture_return mixture617 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:24: ( jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:11: jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount52743_static.FOLLOW_jjcomp_in_unnamedmoleculeamount52743);
            jjcomp613=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp613.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount52745_static.FOLLOW_nnchementity_in_unnamedmoleculeamount52745);
            nnchementity614=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity614.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:31: ( cdAlphanum )?
            int alt142=2;
            switch ( input.LA(1) ) {
                case 34:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA142_3 = input.LA(3);

                            if ( (synpred471_ChemicalChunker()) ) {
                                alt142=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount52747_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount52747);
                    cdAlphanum615=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum615.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:43: ( quantity | mixture )*
            loop143:
            do {
                int alt143=3;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount52751_static.FOLLOW_quantity_in_unnamedmoleculeamount52751);
            	    quantity616=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity616.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount52753_static.FOLLOW_mixture_in_unnamedmoleculeamount52753);
            	    mixture617=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture617.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:1: unnamedmoleculeamount : ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5618 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1619 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2620 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3621 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4622 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:2: ( ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt144=5;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:4: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2767_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2767);
                    unnamedmoleculeamount5618=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5618.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:27: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2769_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2769);
                    unnamedmoleculeamount1619=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1619.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:52: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2773_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2773);
                    unnamedmoleculeamount2620=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2620.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:77: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2777_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2777);
                    unnamedmoleculeamount3621=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3621.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:100: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2779_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2779);
                    unnamedmoleculeamount4622=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4622.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, unnamedmoleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: unnamedmolecule : unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount623 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:2: ( unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2790_static.FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2790);
            unnamedmoleculeamount623=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount623.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 254:26: -> ^( UNNAMEDMOLECULE unnamedmoleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:29: ^( UNNAMEDMOLECULE unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: quantity : ( quantity1 | quantity2 ) -> ^( QUANTITY ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1624 = null;

        ChemicalChunkerParser.quantity2_return quantity2625 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:11: ( ( quantity1 | quantity2 ) -> ^( QUANTITY ( quantity1 )? ( quantity2 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:14: ( quantity1 | quantity2 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:14: ( quantity1 | quantity2 )
            int alt145=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt145=1;
                }
                break;
            case 34:
            case 63:
            case 140:
                {
                alt145=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2812_static.FOLLOW_quantity1_in_quantity2812);
                    quantity1624=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1624.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2814_static.FOLLOW_quantity2_in_quantity2814);
                    quantity2625=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2625.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity2, quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:36: -> ^( QUANTITY ( quantity1 )? ( quantity2 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:41: ^( QUANTITY ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:53: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:64: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb626 = null;

        ChemicalChunkerParser.measurements_return measurements627 = null;

        ChemicalChunkerParser.comma_return comma628 = null;

        ChemicalChunkerParser.measurements_return measurements629 = null;

        ChemicalChunkerParser.comma_return comma630 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase631 = null;

        ChemicalChunkerParser.stop_return stop632 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase633 = null;

        ChemicalChunkerParser.rrb_return rrb634 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12839_static.FOLLOW_lrb_in_quantity12839);
            lrb626=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb626.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12841_static.FOLLOW_measurements_in_quantity12841);
            measurements627=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements627.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:21: ( comma measurements )*
            loop146:
            do {
                int alt146=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 34:
                        case 63:
                        case 140:
                            {
                            alt146=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt146) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12844_static.FOLLOW_comma_in_quantity12844);
            	    comma628=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma628.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12847_static.FOLLOW_measurements_in_quantity12847);
            	    measurements629=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements629.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:44: ( comma preparationphrase )*
            loop147:
            do {
                int alt147=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    alt147=1;
                    }
                    break;

                }

                switch (alt147) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12852_static.FOLLOW_comma_in_quantity12852);
            	    comma630=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma630.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12854_static.FOLLOW_preparationphrase_in_quantity12854);
            	    preparationphrase631=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase631.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:71: ( stop preparationphrase )*
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    alt148=1;
                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12859_static.FOLLOW_stop_in_quantity12859);
            	    stop632=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop632.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12861_static.FOLLOW_preparationphrase_in_quantity12861);
            	    preparationphrase633=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase633.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12866_static.FOLLOW_rrb_in_quantity12866);
            rrb634=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb634.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements635 = null;

        ChemicalChunkerParser.comma_return comma636 = null;

        ChemicalChunkerParser.measurements_return measurements637 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22878_static.FOLLOW_measurements_in_quantity22878);
            measurements635=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements635.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:18: ( comma measurements )*
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22881_static.FOLLOW_comma_in_quantity22881);
            	    comma636=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma636.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22884_static.FOLLOW_measurements_in_quantity22884);
            	    measurements637=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements637.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: method : ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral638 = null;

        ChemicalChunkerParser.nn_return nn639 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod640 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum641 = null;

        ChemicalChunkerParser.cd_return cd642 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:7: ( ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:5: ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:5: ( nngeneral | nn )?
            int alt150=3;
            switch ( input.LA(1) ) {
                case 70:
                    {
                    alt150=1;
                    }
                    break;
                case 150:
                    {
                    alt150=2;
                    }
                    break;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2899_static.FOLLOW_nngeneral_in_method2899);
                    nngeneral638=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral638.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2901_static.FOLLOW_nn_in_method2901);
                    nn639=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn639.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2905_static.FOLLOW_nnmethod_in_method2905);
            nnmethod640=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod640.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:30: ( cdAlphanum | cd )?
            int alt151=3;
            switch ( input.LA(1) ) {
                case 34:
                    {
                    alt151=1;
                    }
                    break;
                case 140:
                    {
                    alt151=2;
                    }
                    break;
            }

            switch (alt151) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:31: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_method2908_static.FOLLOW_cdAlphanum_in_method2908);
                    cdAlphanum641=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum641.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:42: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2910_static.FOLLOW_cd_in_method2910);
                    cd642=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd642.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);
        int brackets_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb643 = null;

        ChemicalChunkerParser.rrb_return rrb644 = null;

        ChemicalChunkerParser.lsqb_return lsqb645 = null;

        ChemicalChunkerParser.rsqb_return rsqb646 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt152=0;
            loop152:
            do {
                int alt152=5;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt152=1;
                    }
                    break;
                case 138:
                    {
                    alt152=2;
                    }
                    break;
                case 134:
                    {
                    alt152=3;
                    }
                    break;
                case 135:
                    {
                    alt152=4;
                    }
                    break;

                }

                switch (alt152) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2932_static.FOLLOW_lrb_in_brackets2932);
            	    lrb643=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb643.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2934_static.FOLLOW_rrb_in_brackets2934);
            	    rrb644=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb644.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2936_static.FOLLOW_lsqb_in_brackets2936);
            	    lsqb645=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb645.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2938_static.FOLLOW_rsqb_in_brackets2938);
            	    rsqb646=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb646.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, brackets_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal647=null;
        Token TOKEN648=null;

        Object string_literal647_tree=null;
        Object TOKEN648_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal647=(Token)match(input,34,FOLLOW_34_in_cdAlphanum2951_static.FOLLOW_34_in_cdAlphanum2951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_34.add(string_literal647);

            TOKEN648=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum2953_static.FOLLOW_TOKEN_in_cdAlphanum2953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN648);



            // AST REWRITE
            // elements: 34, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_34.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal649=null;
        Token TOKEN650=null;

        Object string_literal649_tree=null;
        Object TOKEN650_tree=null;
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:9: 'OSCAR-CJ' TOKEN
            {
            string_literal649=(Token)match(input,35,FOLLOW_35_in_oscarcj2966_static.FOLLOW_35_in_oscarcj2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_35.add(string_literal649);

            TOKEN650=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2968_static.FOLLOW_TOKEN_in_oscarcj2968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN650);



            // AST REWRITE
            // elements: 35, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_35.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal651=null;
        Token TOKEN652=null;

        Object string_literal651_tree=null;
        Object TOKEN652_tree=null;
        RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:9: 'OSCAR-RN' TOKEN
            {
            string_literal651=(Token)match(input,36,FOLLOW_36_in_oscarrn2981_static.FOLLOW_36_in_oscarrn2981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_36.add(string_literal651);

            TOKEN652=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2983_static.FOLLOW_TOKEN_in_oscarrn2983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN652);



            // AST REWRITE
            // elements: TOKEN, 36
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 275:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_36.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal653=null;
        Token TOKEN654=null;

        Object string_literal653_tree=null;
        Object TOKEN654_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:10: 'OSCAR-ASE' TOKEN
            {
            string_literal653=(Token)match(input,37,FOLLOW_37_in_oscarase2996_static.FOLLOW_37_in_oscarase2996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_37.add(string_literal653);

            TOKEN654=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase2998_static.FOLLOW_TOKEN_in_oscarase2998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN654);



            // AST REWRITE
            // elements: 37, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_37.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal655=null;
        Token TOKEN656=null;

        Object string_literal655_tree=null;
        Object TOKEN656_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:10: 'OSCAR-ONT' TOKEN
            {
            string_literal655=(Token)match(input,38,FOLLOW_38_in_oscaront3011_static.FOLLOW_38_in_oscaront3011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal655);

            TOKEN656=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3013_static.FOLLOW_TOKEN_in_oscaront3013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN656);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal657=null;
        Token TOKEN658=null;

        Object string_literal657_tree=null;
        Object TOKEN658_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:11: 'TM-UNICODE' TOKEN
            {
            string_literal657=(Token)match(input,39,FOLLOW_39_in_tmunicode3026_static.FOLLOW_39_in_tmunicode3026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal657);

            TOKEN658=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3028_static.FOLLOW_TOKEN_in_tmunicode3028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN658);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal659=null;
        Token TOKEN660=null;

        Object string_literal659_tree=null;
        Object TOKEN660_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:11: 'CD-UNICODE' TOKEN
            {
            string_literal659=(Token)match(input,40,FOLLOW_40_in_cdunicode3041_static.FOLLOW_40_in_cdunicode3041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal659);

            TOKEN660=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3043_static.FOLLOW_TOKEN_in_cdunicode3043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN660);



            // AST REWRITE
            // elements: TOKEN, 40
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 279:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal661=null;
        Token TOKEN662=null;

        Object string_literal661_tree=null;
        Object TOKEN662_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:8: 'JJ-CHEM' TOKEN
            {
            string_literal661=(Token)match(input,41,FOLLOW_41_in_jjchem3056_static.FOLLOW_41_in_jjchem3056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal661);

            TOKEN662=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3058_static.FOLLOW_TOKEN_in_jjchem3058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN662);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal663=null;
        Token TOKEN664=null;

        Object string_literal663_tree=null;
        Object TOKEN664_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal663=(Token)match(input,42,FOLLOW_42_in_jjcomp3071_static.FOLLOW_42_in_jjcomp3071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal663);

            TOKEN664=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3073_static.FOLLOW_TOKEN_in_jjcomp3073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN664);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal665=null;
        Token TOKEN666=null;

        Object string_literal665_tree=null;
        Object TOKEN666_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:6: 'IN-AS' TOKEN
            {
            string_literal665=(Token)match(input,43,FOLLOW_43_in_inas3087_static.FOLLOW_43_in_inas3087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal665);

            TOKEN666=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3089_static.FOLLOW_TOKEN_in_inas3089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN666);



            // AST REWRITE
            // elements: 43, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 283:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal667=null;
        Token TOKEN668=null;

        Object string_literal667_tree=null;
        Object TOKEN668_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:10: 'IN-BEFORE' TOKEN
            {
            string_literal667=(Token)match(input,44,FOLLOW_44_in_inbefore3102_static.FOLLOW_44_in_inbefore3102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal667);

            TOKEN668=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3104_static.FOLLOW_TOKEN_in_inbefore3104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN668);



            // AST REWRITE
            // elements: TOKEN, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal669=null;
        Token TOKEN670=null;

        Object string_literal669_tree=null;
        Object TOKEN670_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:9: 'IN-AFTER' TOKEN
            {
            string_literal669=(Token)match(input,45,FOLLOW_45_in_inafter3117_static.FOLLOW_45_in_inafter3117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal669);

            TOKEN670=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3119_static.FOLLOW_TOKEN_in_inafter3119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN670);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal671=null;
        Token TOKEN672=null;

        Object string_literal671_tree=null;
        Object TOKEN672_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:6: 'IN-IN' TOKEN
            {
            string_literal671=(Token)match(input,46,FOLLOW_46_in_inin3132_static.FOLLOW_46_in_inin3132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal671);

            TOKEN672=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3134_static.FOLLOW_TOKEN_in_inin3134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN672);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal673=null;
        Token TOKEN674=null;

        Object string_literal673_tree=null;
        Object TOKEN674_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:8: 'IN-INTO' TOKEN
            {
            string_literal673=(Token)match(input,47,FOLLOW_47_in_ininto3147_static.FOLLOW_47_in_ininto3147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal673);

            TOKEN674=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3149_static.FOLLOW_TOKEN_in_ininto3149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN674);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal675=null;
        Token TOKEN676=null;

        Object string_literal675_tree=null;
        Object TOKEN676_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:8: 'IN-WITH' TOKEN
            {
            string_literal675=(Token)match(input,48,FOLLOW_48_in_inwith3162_static.FOLLOW_48_in_inwith3162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal675);

            TOKEN676=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3164_static.FOLLOW_TOKEN_in_inwith3164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN676);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal677=null;
        Token TOKEN678=null;

        Object string_literal677_tree=null;
        Object TOKEN678_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:11: 'IN-WITHOUT' TOKEN
            {
            string_literal677=(Token)match(input,49,FOLLOW_49_in_inwithout3177_static.FOLLOW_49_in_inwithout3177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal677);

            TOKEN678=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3179_static.FOLLOW_TOKEN_in_inwithout3179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN678);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal679=null;
        Token TOKEN680=null;

        Object string_literal679_tree=null;
        Object TOKEN680_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:6: 'IN-BY' TOKEN
            {
            string_literal679=(Token)match(input,50,FOLLOW_50_in_inby3192_static.FOLLOW_50_in_inby3192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal679);

            TOKEN680=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3194_static.FOLLOW_TOKEN_in_inby3194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN680);



            // AST REWRITE
            // elements: 50, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal681=null;
        Token TOKEN682=null;

        Object string_literal681_tree=null;
        Object TOKEN682_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:7: 'IN-VIA' TOKEN
            {
            string_literal681=(Token)match(input,51,FOLLOW_51_in_invia3207_static.FOLLOW_51_in_invia3207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal681);

            TOKEN682=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3209_static.FOLLOW_TOKEN_in_invia3209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN682);



            // AST REWRITE
            // elements: 51, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal683=null;
        Token TOKEN684=null;

        Object string_literal683_tree=null;
        Object TOKEN684_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:6: 'IN-OF' TOKEN
            {
            string_literal683=(Token)match(input,52,FOLLOW_52_in_inof3222_static.FOLLOW_52_in_inof3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal683);

            TOKEN684=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3224_static.FOLLOW_TOKEN_in_inof3224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN684);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal685=null;
        Token TOKEN686=null;

        Object string_literal685_tree=null;
        Object TOKEN686_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:6: 'IN-ON' TOKEN
            {
            string_literal685=(Token)match(input,53,FOLLOW_53_in_inon3237_static.FOLLOW_53_in_inon3237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal685);

            TOKEN686=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3239_static.FOLLOW_TOKEN_in_inon3239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN686);



            // AST REWRITE
            // elements: TOKEN, 53
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal687=null;
        Token TOKEN688=null;

        Object string_literal687_tree=null;
        Object TOKEN688_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:7: 'IN-FOR' TOKEN
            {
            string_literal687=(Token)match(input,54,FOLLOW_54_in_infor3252_static.FOLLOW_54_in_infor3252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal687);

            TOKEN688=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3254_static.FOLLOW_TOKEN_in_infor3254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN688);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal689=null;
        Token TOKEN690=null;

        Object string_literal689_tree=null;
        Object TOKEN690_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:8: 'IN-FROM' TOKEN
            {
            string_literal689=(Token)match(input,55,FOLLOW_55_in_infrom3267_static.FOLLOW_55_in_infrom3267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal689);

            TOKEN690=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3269_static.FOLLOW_TOKEN_in_infrom3269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN690);



            // AST REWRITE
            // elements: 55, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal691=null;
        Token TOKEN692=null;

        Object string_literal691_tree=null;
        Object TOKEN692_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:9: 'IN-UNDER' TOKEN
            {
            string_literal691=(Token)match(input,56,FOLLOW_56_in_inunder3282_static.FOLLOW_56_in_inunder3282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal691);

            TOKEN692=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3284_static.FOLLOW_TOKEN_in_inunder3284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN692);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal693=null;
        Token TOKEN694=null;

        Object string_literal693_tree=null;
        Object TOKEN694_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:8: 'IN-OVER' TOKEN
            {
            string_literal693=(Token)match(input,57,FOLLOW_57_in_inover3297_static.FOLLOW_57_in_inover3297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal693);

            TOKEN694=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3299_static.FOLLOW_TOKEN_in_inover3299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN694);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:7: 'IN-OFF' TOKEN
            {
            string_literal695=(Token)match(input,58,FOLLOW_58_in_inoff3312_static.FOLLOW_58_in_inoff3312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal695);

            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3314_static.FOLLOW_TOKEN_in_inoff3314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN696);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:9: 'NN-STATE' TOKEN
            {
            string_literal697=(Token)match(input,59,FOLLOW_59_in_nnstate3329_static.FOLLOW_59_in_nnstate3329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal697);

            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3331_static.FOLLOW_TOKEN_in_nnstate3331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN698);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:8: 'NN-TIME' TOKEN
            {
            string_literal699=(Token)match(input,60,FOLLOW_60_in_nntime3344_static.FOLLOW_60_in_nntime3344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal699);

            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3346_static.FOLLOW_TOKEN_in_nntime3346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN700);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:8: 'NN-MASS' TOKEN
            {
            string_literal701=(Token)match(input,61,FOLLOW_61_in_nnmass3359_static.FOLLOW_61_in_nnmass3359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal701);

            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3361_static.FOLLOW_TOKEN_in_nnmass3361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN702);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 303:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:10: 'NN-AMOUNT' TOKEN
            {
            string_literal703=(Token)match(input,62,FOLLOW_62_in_nnamount3374_static.FOLLOW_62_in_nnamount3374); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal703);

            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3376_static.FOLLOW_TOKEN_in_nnamount3376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN704);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:9: 'NN-MOLAR' TOKEN
            {
            string_literal705=(Token)match(input,63,FOLLOW_63_in_nnmolar3389_static.FOLLOW_63_in_nnmolar3389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal705);

            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3391_static.FOLLOW_TOKEN_in_nnmolar3391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN706);



            // AST REWRITE
            // elements: 63, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal707=(Token)match(input,64,FOLLOW_64_in_nnatmosphere3404_static.FOLLOW_64_in_nnatmosphere3404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal707);

            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3406_static.FOLLOW_TOKEN_in_nnatmosphere3406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN708);



            // AST REWRITE
            // elements: 64, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:6: 'NN-EQ' TOKEN
            {
            string_literal709=(Token)match(input,65,FOLLOW_65_in_nneq3419_static.FOLLOW_65_in_nneq3419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal709);

            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3421_static.FOLLOW_TOKEN_in_nneq3421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN710);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 307:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:7: 'NN-VOL' TOKEN
            {
            string_literal711=(Token)match(input,66,FOLLOW_66_in_nnvol3434_static.FOLLOW_66_in_nnvol3434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal711);

            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3436_static.FOLLOW_TOKEN_in_nnvol3436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN712);



            // AST REWRITE
            // elements: TOKEN, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal713=(Token)match(input,67,FOLLOW_67_in_nnchementity3449_static.FOLLOW_67_in_nnchementity3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal713);

            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3451_static.FOLLOW_TOKEN_in_nnchementity3451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN714);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:8: 'NN-TEMP' TOKEN
            {
            string_literal715=(Token)match(input,68,FOLLOW_68_in_nntemp3464_static.FOLLOW_68_in_nntemp3464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal715);

            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3466_static.FOLLOW_TOKEN_in_nntemp3466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN716);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:9: 'NN-FLASH' TOKEN
            {
            string_literal717=(Token)match(input,69,FOLLOW_69_in_nnflash3479_static.FOLLOW_69_in_nnflash3479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal717);

            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3481_static.FOLLOW_TOKEN_in_nnflash3481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN718);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:11: 'NN-GENERAL' TOKEN
            {
            string_literal719=(Token)match(input,70,FOLLOW_70_in_nngeneral3494_static.FOLLOW_70_in_nngeneral3494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal719);

            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3496_static.FOLLOW_TOKEN_in_nngeneral3496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN720);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:10: 'NN-METHOD' TOKEN
            {
            string_literal721=(Token)match(input,71,FOLLOW_71_in_nnmethod3509_static.FOLLOW_71_in_nnmethod3509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal721);

            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3511_static.FOLLOW_TOKEN_in_nnmethod3511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN722);



            // AST REWRITE
            // elements: TOKEN, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:12: 'NN-PRESSURE' TOKEN
            {
            string_literal723=(Token)match(input,72,FOLLOW_72_in_nnpressure3524_static.FOLLOW_72_in_nnpressure3524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal723);

            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3526_static.FOLLOW_TOKEN_in_nnpressure3526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN724);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:10: 'NN-COLUMN' TOKEN
            {
            string_literal725=(Token)match(input,73,FOLLOW_73_in_nncolumn3539_static.FOLLOW_73_in_nncolumn3539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal725);

            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3541_static.FOLLOW_TOKEN_in_nncolumn3541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN726);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal727=(Token)match(input,74,FOLLOW_74_in_nnchromatography3554_static.FOLLOW_74_in_nnchromatography3554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal727);

            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3556_static.FOLLOW_TOKEN_in_nnchromatography3556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN728);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:10: 'NN-VACUUM' TOKEN
            {
            string_literal729=(Token)match(input,75,FOLLOW_75_in_nnvacuum3569_static.FOLLOW_75_in_nnvacuum3569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal729);

            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3571_static.FOLLOW_TOKEN_in_nnvacuum3571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN730);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:9: 'NN-CYCLE' TOKEN
            {
            string_literal731=(Token)match(input,76,FOLLOW_76_in_nncycle3584_static.FOLLOW_76_in_nncycle3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal731);

            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3586_static.FOLLOW_TOKEN_in_nncycle3586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN732);



            // AST REWRITE
            // elements: 76, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:9: 'NN-TIMES' TOKEN
            {
            string_literal733=(Token)match(input,77,FOLLOW_77_in_nntimes3599_static.FOLLOW_77_in_nntimes3599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal733);

            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3601_static.FOLLOW_TOKEN_in_nntimes3601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN734);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal735=(Token)match(input,78,FOLLOW_78_in_nnexample3614_static.FOLLOW_78_in_nnexample3614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal735);

            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3616_static.FOLLOW_TOKEN_in_nnexample3616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN736);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:9: 'OSCAR-CM' TOKEN
            {
            string_literal737=(Token)match(input,79,FOLLOW_79_in_oscarcm3631_static.FOLLOW_79_in_oscarcm3631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal737);

            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3633_static.FOLLOW_TOKEN_in_oscarcm3633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN738);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:7: 'VB-USE' TOKEN
            {
            string_literal739=(Token)match(input,80,FOLLOW_80_in_vbuse3648_static.FOLLOW_80_in_vbuse3648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal739);

            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3650_static.FOLLOW_TOKEN_in_vbuse3650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN740);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:10: 'VB-CHANGE' TOKEN
            {
            string_literal741=(Token)match(input,81,FOLLOW_81_in_vbchange3663_static.FOLLOW_81_in_vbchange3663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal741);

            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3665_static.FOLLOW_TOKEN_in_vbchange3665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN742);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal743=(Token)match(input,82,FOLLOW_82_in_vbsubmerge3678_static.FOLLOW_82_in_vbsubmerge3678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal743);

            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3680_static.FOLLOW_TOKEN_in_vbsubmerge3680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN744);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:11: 'VB-SUBJECT' TOKEN
            {
            string_literal745=(Token)match(input,83,FOLLOW_83_in_vbsubject3693_static.FOLLOW_83_in_vbsubject3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3695_static.FOLLOW_TOKEN_in_vbsubject3695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:7: 'NN-ADD' TOKEN
            {
            string_literal747=(Token)match(input,84,FOLLOW_84_in_nnadd3710_static.FOLLOW_84_in_nnadd3710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3712_static.FOLLOW_TOKEN_in_nnadd3712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: 84, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:11: 'NN-MIXTURE' TOKEN
            {
            string_literal749=(Token)match(input,85,FOLLOW_85_in_nnmixture3725_static.FOLLOW_85_in_nnmixture3725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3727_static.FOLLOW_TOKEN_in_nnmixture3727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:10: 'VB-DILUTE' TOKEN
            {
            string_literal751=(Token)match(input,86,FOLLOW_86_in_vbdilute3740_static.FOLLOW_86_in_vbdilute3740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3742_static.FOLLOW_TOKEN_in_vbdilute3742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:7: 'VB-ADD' TOKEN
            {
            string_literal753=(Token)match(input,87,FOLLOW_87_in_vbadd3756_static.FOLLOW_87_in_vbadd3756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3758_static.FOLLOW_TOKEN_in_vbadd3758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:10: 'VB-CHARGE' TOKEN
            {
            string_literal755=(Token)match(input,88,FOLLOW_88_in_vbcharge3771_static.FOLLOW_88_in_vbcharge3771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3773_static.FOLLOW_TOKEN_in_vbcharge3773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: 88, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:11: 'VB-CONTAIN' TOKEN
            {
            string_literal757=(Token)match(input,89,FOLLOW_89_in_vbcontain3786_static.FOLLOW_89_in_vbcontain3786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3788_static.FOLLOW_TOKEN_in_vbcontain3788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: 89, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:8: 'VB-DROP' TOKEN
            {
            string_literal759=(Token)match(input,90,FOLLOW_90_in_vbdrop3801_static.FOLLOW_90_in_vbdrop3801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3803_static.FOLLOW_TOKEN_in_vbdrop3803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: 90, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:8: 'VB-FILL' TOKEN
            {
            string_literal761=(Token)match(input,91,FOLLOW_91_in_vbfill3816_static.FOLLOW_91_in_vbfill3816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3818_static.FOLLOW_TOKEN_in_vbfill3818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: 91, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:11: 'VB-SUSPEND' TOKEN
            {
            string_literal763=(Token)match(input,92,FOLLOW_92_in_vbsuspend3831_static.FOLLOW_92_in_vbsuspend3831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3833_static.FOLLOW_TOKEN_in_vbsuspend3833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:9: 'VB-TREAT' TOKEN
            {
            string_literal765=(Token)match(input,93,FOLLOW_93_in_vbtreat3846_static.FOLLOW_93_in_vbtreat3846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3848_static.FOLLOW_TOKEN_in_vbtreat3848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:13: 'VB-APPARATUS' TOKEN
            {
            string_literal767=(Token)match(input,94,FOLLOW_94_in_vbapparatus3863_static.FOLLOW_94_in_vbapparatus3863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3865_static.FOLLOW_TOKEN_in_vbapparatus3865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:13: 'NN-APPARATUS' TOKEN
            {
            string_literal769=(Token)match(input,95,FOLLOW_95_in_nnapparatus3878_static.FOLLOW_95_in_nnapparatus3878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3880_static.FOLLOW_TOKEN_in_nnapparatus3880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: 95, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal771=(Token)match(input,96,FOLLOW_96_in_vbconcentrate3895_static.FOLLOW_96_in_vbconcentrate3895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3897_static.FOLLOW_TOKEN_in_vbconcentrate3897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal773=(Token)match(input,97,FOLLOW_97_in_nnconcentrate3910_static.FOLLOW_97_in_nnconcentrate3910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3912_static.FOLLOW_TOKEN_in_nnconcentrate3912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:8: 'VB-COOL' TOKEN
            {
            string_literal775=(Token)match(input,98,FOLLOW_98_in_vbcool3927_static.FOLLOW_98_in_vbcool3927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3929_static.FOLLOW_TOKEN_in_vbcool3929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:10: 'VB-DEGASS' TOKEN
            {
            string_literal777=(Token)match(input,99,FOLLOW_99_in_vbdegass3944_static.FOLLOW_99_in_vbdegass3944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass3946_static.FOLLOW_TOKEN_in_vbdegass3946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal779=(Token)match(input,100,FOLLOW_100_in_vbdissolve3961_static.FOLLOW_100_in_vbdissolve3961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve3963_static.FOLLOW_TOKEN_in_vbdissolve3963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:7: 'VB-DRY' TOKEN
            {
            string_literal781=(Token)match(input,101,FOLLOW_101_in_vbdry3978_static.FOLLOW_101_in_vbdry3978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry3980_static.FOLLOW_TOKEN_in_vbdry3980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:7: 'NN-DRY' TOKEN
            {
            string_literal783=(Token)match(input,102,FOLLOW_102_in_nndry3993_static.FOLLOW_102_in_nndry3993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry3995_static.FOLLOW_TOKEN_in_nndry3995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: 102, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:11: 'VB-EXTRACT' TOKEN
            {
            string_literal785=(Token)match(input,103,FOLLOW_103_in_vbextract4010_static.FOLLOW_103_in_vbextract4010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4012_static.FOLLOW_TOKEN_in_vbextract4012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:11: 'NN-EXTRACT' TOKEN
            {
            string_literal787=(Token)match(input,104,FOLLOW_104_in_nnextract4025_static.FOLLOW_104_in_nnextract4025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4027_static.FOLLOW_TOKEN_in_nnextract4027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: TOKEN, 104
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:10: 'VB-FILTER' TOKEN
            {
            string_literal789=(Token)match(input,105,FOLLOW_105_in_vbfilter4042_static.FOLLOW_105_in_vbfilter4042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4044_static.FOLLOW_TOKEN_in_vbfilter4044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:10: 'NN-FILTER' TOKEN
            {
            string_literal791=(Token)match(input,106,FOLLOW_106_in_nnfilter4057_static.FOLLOW_106_in_nnfilter4057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4059_static.FOLLOW_TOKEN_in_nnfilter4059); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: TOKEN, 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:8: 'VB-HEAT' TOKEN
            {
            string_literal793=(Token)match(input,107,FOLLOW_107_in_vbheat4074_static.FOLLOW_107_in_vbheat4074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4076_static.FOLLOW_TOKEN_in_vbheat4076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:12: 'VB-INCREASE' TOKEN
            {
            string_literal795=(Token)match(input,108,FOLLOW_108_in_vbincrease4089_static.FOLLOW_108_in_vbincrease4089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4091_static.FOLLOW_TOKEN_in_vbincrease4091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: 108, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:11: 'VB-IMMERSE' TOKEN
            {
            string_literal797=(Token)match(input,109,FOLLOW_109_in_vbimmerse4106_static.FOLLOW_109_in_vbimmerse4106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4108_static.FOLLOW_TOKEN_in_vbimmerse4108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:13: 'VB-PARTITION' TOKEN
            {
            string_literal799=(Token)match(input,110,FOLLOW_110_in_vbpartition4123_static.FOLLOW_110_in_vbpartition4123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4125_static.FOLLOW_TOKEN_in_vbpartition4125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal801=(Token)match(input,111,FOLLOW_111_in_vbprecipitate4140_static.FOLLOW_111_in_vbprecipitate4140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4142_static.FOLLOW_TOKEN_in_vbprecipitate4142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal803=(Token)match(input,112,FOLLOW_112_in_nnprecipitate4155_static.FOLLOW_112_in_nnprecipitate4155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4157_static.FOLLOW_TOKEN_in_nnprecipitate4157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:10: 'VB-PURIFY' TOKEN
            {
            string_literal805=(Token)match(input,113,FOLLOW_113_in_vbpurify4172_static.FOLLOW_113_in_vbpurify4172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4174_static.FOLLOW_TOKEN_in_vbpurify4174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:10: 'NN-PURIFY' TOKEN
            {
            string_literal807=(Token)match(input,114,FOLLOW_114_in_nnpurify4187_static.FOLLOW_114_in_nnpurify4187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4189_static.FOLLOW_TOKEN_in_nnpurify4189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:10: 'VB-QUENCH' TOKEN
            {
            string_literal809=(Token)match(input,115,FOLLOW_115_in_vbquench4204_static.FOLLOW_115_in_vbquench4204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4206_static.FOLLOW_TOKEN_in_vbquench4206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:11: 'VB-RECOVER' TOKEN
            {
            string_literal811=(Token)match(input,116,FOLLOW_116_in_vbrecover4221_static.FOLLOW_116_in_vbrecover4221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4223_static.FOLLOW_TOKEN_in_vbrecover4223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:10: 'VB-REMOVE' TOKEN
            {
            string_literal813=(Token)match(input,117,FOLLOW_117_in_vbremove4238_static.FOLLOW_117_in_vbremove4238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4240_static.FOLLOW_TOKEN_in_vbremove4240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:10: 'NN-REMOVE' TOKEN
            {
            string_literal815=(Token)match(input,118,FOLLOW_118_in_nnremove4253_static.FOLLOW_118_in_nnremove4253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4255_static.FOLLOW_TOKEN_in_nnremove4255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:8: 'VB-STIR' TOKEN
            {
            string_literal817=(Token)match(input,119,FOLLOW_119_in_vbstir4270_static.FOLLOW_119_in_vbstir4270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4272_static.FOLLOW_TOKEN_in_vbstir4272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: TOKEN, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal819=(Token)match(input,120,FOLLOW_120_in_vbsynthesize4287_static.FOLLOW_120_in_vbsynthesize4287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4289_static.FOLLOW_TOKEN_in_vbsynthesize4289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal821=(Token)match(input,121,FOLLOW_121_in_nnsynthesize4302_static.FOLLOW_121_in_nnsynthesize4302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4304_static.FOLLOW_TOKEN_in_nnsynthesize4304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:8: 'VB-WAIT' TOKEN
            {
            string_literal823=(Token)match(input,122,FOLLOW_122_in_vbwait4319_static.FOLLOW_122_in_vbwait4319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4321_static.FOLLOW_TOKEN_in_vbwait4321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:8: 'VB-WASH' TOKEN
            {
            string_literal825=(Token)match(input,123,FOLLOW_123_in_vbwash4336_static.FOLLOW_123_in_vbwash4336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4338_static.FOLLOW_TOKEN_in_vbwash4338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:9: 'VB-YIELD' TOKEN
            {
            string_literal827=(Token)match(input,124,FOLLOW_124_in_vbyield4353_static.FOLLOW_124_in_vbyield4353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4355_static.FOLLOW_TOKEN_in_vbyield4355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:9: 'NN-YIELD' TOKEN
            {
            string_literal829=(Token)match(input,125,FOLLOW_125_in_nnyield4370_static.FOLLOW_125_in_nnyield4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4372_static.FOLLOW_TOKEN_in_nnyield4372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:8: 'RB-CONJ' TOKEN
            {
            string_literal831=(Token)match(input,126,FOLLOW_126_in_rbconj4388_static.FOLLOW_126_in_rbconj4388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4390_static.FOLLOW_TOKEN_in_rbconj4390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: TOKEN, 126
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:7: 'COLON' TOKEN
            {
            string_literal833=(Token)match(input,127,FOLLOW_127_in_colon4403_static.FOLLOW_127_in_colon4403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4405_static.FOLLOW_TOKEN_in_colon4405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: 127, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:7: 'COMMA' TOKEN
            {
            string_literal835=(Token)match(input,128,FOLLOW_128_in_comma4418_static.FOLLOW_128_in_comma4418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4420_static.FOLLOW_TOKEN_in_comma4420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: 128, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:7: 'APOST' TOKEN
            {
            string_literal837=(Token)match(input,129,FOLLOW_129_in_apost4433_static.FOLLOW_129_in_apost4433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4435_static.FOLLOW_TOKEN_in_apost4435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:5: 'NEG' TOKEN
            {
            string_literal839=(Token)match(input,130,FOLLOW_130_in_neg4448_static.FOLLOW_130_in_neg4448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4450_static.FOLLOW_TOKEN_in_neg4450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:6: 'DASH' TOKEN
            {
            string_literal841=(Token)match(input,131,FOLLOW_131_in_dash4463_static.FOLLOW_131_in_dash4463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4465_static.FOLLOW_TOKEN_in_dash4465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: 131, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:6: 'STOP' TOKEN
            {
            string_literal843=(Token)match(input,132,FOLLOW_132_in_stop4478_static.FOLLOW_132_in_stop4478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4480_static.FOLLOW_TOKEN_in_stop4480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: TOKEN, 132
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:11: 'NN-PERCENT' TOKEN
            {
            string_literal845=(Token)match(input,133,FOLLOW_133_in_nnpercent4493_static.FOLLOW_133_in_nnpercent4493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4495_static.FOLLOW_TOKEN_in_nnpercent4495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:6: 'LSQB' TOKEN
            {
            string_literal847=(Token)match(input,134,FOLLOW_134_in_lsqb4508_static.FOLLOW_134_in_lsqb4508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4510_static.FOLLOW_TOKEN_in_lsqb4510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:6: 'RSQB' TOKEN
            {
            string_literal849=(Token)match(input,135,FOLLOW_135_in_rsqb4523_static.FOLLOW_135_in_rsqb4523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4525_static.FOLLOW_TOKEN_in_rsqb4525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:7: 'DT-THE' TOKEN
            {
            string_literal851=(Token)match(input,136,FOLLOW_136_in_dtTHE4540_static.FOLLOW_136_in_dtTHE4540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4542_static.FOLLOW_TOKEN_in_dtTHE4542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:5: '-LRB-' TOKEN
            {
            string_literal853=(Token)match(input,137,FOLLOW_137_in_lrb4556_static.FOLLOW_137_in_lrb4556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4558_static.FOLLOW_TOKEN_in_lrb4558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:5: '-RRB-' TOKEN
            {
            string_literal855=(Token)match(input,138,FOLLOW_138_in_rrb4571_static.FOLLOW_138_in_rrb4571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4573_static.FOLLOW_TOKEN_in_rrb4573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: TOKEN, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:4: 'CC' TOKEN
            {
            string_literal857=(Token)match(input,139,FOLLOW_139_in_cc4590_static.FOLLOW_139_in_cc4590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4592_static.FOLLOW_TOKEN_in_cc4592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:4: 'CD' TOKEN
            {
            string_literal859=(Token)match(input,140,FOLLOW_140_in_cd4607_static.FOLLOW_140_in_cd4607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4609_static.FOLLOW_TOKEN_in_cd4609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: 140, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:4: 'DT' TOKEN
            {
            string_literal861=(Token)match(input,141,FOLLOW_141_in_dt4624_static.FOLLOW_141_in_dt4624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4626_static.FOLLOW_TOKEN_in_dt4626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: 141, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:4: 'EX' TOKEN
            {
            string_literal863=(Token)match(input,142,FOLLOW_142_in_ex4641_static.FOLLOW_142_in_ex4641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex4643_static.FOLLOW_TOKEN_in_ex4643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:4: 'FW' TOKEN
            {
            string_literal865=(Token)match(input,143,FOLLOW_143_in_fw4658_static.FOLLOW_143_in_fw4658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw4660_static.FOLLOW_TOKEN_in_fw4660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: TOKEN, 143
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:4: 'IN' TOKEN
            {
            string_literal867=(Token)match(input,144,FOLLOW_144_in_in4675_static.FOLLOW_144_in_in4675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in4677_static.FOLLOW_TOKEN_in_in4677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:4: 'JJ' TOKEN
            {
            string_literal869=(Token)match(input,145,FOLLOW_145_in_jj4692_static.FOLLOW_145_in_jj4692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj4694_static.FOLLOW_TOKEN_in_jj4694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 145, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:5: 'JJR' TOKEN
            {
            string_literal871=(Token)match(input,146,FOLLOW_146_in_jjr4709_static.FOLLOW_146_in_jjr4709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr4711_static.FOLLOW_TOKEN_in_jjr4711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:5: 'JJS' TOKEN
            {
            string_literal873=(Token)match(input,147,FOLLOW_147_in_jjs4726_static.FOLLOW_147_in_jjs4726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs4728_static.FOLLOW_TOKEN_in_jjs4728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:4: 'LS' TOKEN
            {
            string_literal875=(Token)match(input,148,FOLLOW_148_in_ls4743_static.FOLLOW_148_in_ls4743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls4745_static.FOLLOW_TOKEN_in_ls4745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:4: 'MD' TOKEN
            {
            string_literal877=(Token)match(input,149,FOLLOW_149_in_md4760_static.FOLLOW_149_in_md4760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md4762_static.FOLLOW_TOKEN_in_md4762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: TOKEN, 149
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:4: 'NN' TOKEN
            {
            string_literal879=(Token)match(input,150,FOLLOW_150_in_nn4777_static.FOLLOW_150_in_nn4777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn4779_static.FOLLOW_TOKEN_in_nn4779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:5: 'NNS' TOKEN
            {
            string_literal881=(Token)match(input,151,FOLLOW_151_in_nns4794_static.FOLLOW_151_in_nns4794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns4796_static.FOLLOW_TOKEN_in_nns4796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:5: 'NNP' TOKEN
            {
            string_literal883=(Token)match(input,152,FOLLOW_152_in_nnp4811_static.FOLLOW_152_in_nnp4811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp4813_static.FOLLOW_TOKEN_in_nnp4813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: TOKEN, 152
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:6: 'NNPS' TOKEN
            {
            string_literal885=(Token)match(input,153,FOLLOW_153_in_nnps4828_static.FOLLOW_153_in_nnps4828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps4830_static.FOLLOW_TOKEN_in_nnps4830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:5: 'PDT' TOKEN
            {
            string_literal887=(Token)match(input,154,FOLLOW_154_in_pdt4845_static.FOLLOW_154_in_pdt4845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4847_static.FOLLOW_TOKEN_in_pdt4847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: 154, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:5: 'POS' TOKEN
            {
            string_literal889=(Token)match(input,155,FOLLOW_155_in_pos4862_static.FOLLOW_155_in_pos4862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos4864_static.FOLLOW_TOKEN_in_pos4864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: TOKEN, 155
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:5: 'PRP' TOKEN
            {
            string_literal891=(Token)match(input,156,FOLLOW_156_in_prp4879_static.FOLLOW_156_in_prp4879); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp4881_static.FOLLOW_TOKEN_in_prp4881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:10: 'PRP$' TOKEN
            {
            string_literal893=(Token)match(input,157,FOLLOW_157_in_prp_poss4896_static.FOLLOW_157_in_prp_poss4896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss4898_static.FOLLOW_TOKEN_in_prp_poss4898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: TOKEN, 157
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:4: 'RB' TOKEN
            {
            string_literal895=(Token)match(input,158,FOLLOW_158_in_rb4913_static.FOLLOW_158_in_rb4913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb4915_static.FOLLOW_TOKEN_in_rb4915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:5: 'RBR' TOKEN
            {
            string_literal897=(Token)match(input,159,FOLLOW_159_in_rbr4930_static.FOLLOW_159_in_rbr4930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr4932_static.FOLLOW_TOKEN_in_rbr4932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:5: 'RBS' TOKEN
            {
            string_literal899=(Token)match(input,160,FOLLOW_160_in_rbs4947_static.FOLLOW_160_in_rbs4947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs4949_static.FOLLOW_TOKEN_in_rbs4949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:4: 'RP' TOKEN
            {
            string_literal901=(Token)match(input,161,FOLLOW_161_in_rp4964_static.FOLLOW_161_in_rp4964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp4966_static.FOLLOW_TOKEN_in_rp4966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:5: 'SYM' TOKEN
            {
            string_literal903=(Token)match(input,162,FOLLOW_162_in_sym4981_static.FOLLOW_162_in_sym4981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym4983_static.FOLLOW_TOKEN_in_sym4983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:4: 'TO' TOKEN
            {
            string_literal905=(Token)match(input,163,FOLLOW_163_in_to4998_static.FOLLOW_163_in_to4998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5000_static.FOLLOW_TOKEN_in_to5000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 513:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:4: 'UH' TOKEN
            {
            string_literal907=(Token)match(input,164,FOLLOW_164_in_uh5015_static.FOLLOW_164_in_uh5015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5017_static.FOLLOW_TOKEN_in_uh5017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:4: 'VB' TOKEN
            {
            string_literal909=(Token)match(input,165,FOLLOW_165_in_vb5032_static.FOLLOW_165_in_vb5032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5034_static.FOLLOW_TOKEN_in_vb5034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: 165, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 519:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:5: 'VBD' TOKEN
            {
            string_literal911=(Token)match(input,166,FOLLOW_166_in_vbd5049_static.FOLLOW_166_in_vbd5049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5051_static.FOLLOW_TOKEN_in_vbd5051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 522:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:5: 'VBG' TOKEN
            {
            string_literal913=(Token)match(input,167,FOLLOW_167_in_vbg5066_static.FOLLOW_167_in_vbg5066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5068_static.FOLLOW_TOKEN_in_vbg5068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:5: 'VBN' TOKEN
            {
            string_literal915=(Token)match(input,168,FOLLOW_168_in_vbn5083_static.FOLLOW_168_in_vbn5083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5085_static.FOLLOW_TOKEN_in_vbn5085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:5: 'VBP' TOKEN
            {
            string_literal917=(Token)match(input,169,FOLLOW_169_in_vbp5100_static.FOLLOW_169_in_vbp5100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5102_static.FOLLOW_TOKEN_in_vbp5102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 531:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:5: 'VBZ' TOKEN
            {
            string_literal919=(Token)match(input,170,FOLLOW_170_in_vbz5117_static.FOLLOW_170_in_vbz5117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5119_static.FOLLOW_TOKEN_in_vbz5119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:5: 'WDT' TOKEN
            {
            string_literal921=(Token)match(input,171,FOLLOW_171_in_wdt5134_static.FOLLOW_171_in_wdt5134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5136_static.FOLLOW_TOKEN_in_wdt5136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:4: 'WP' TOKEN
            {
            string_literal923=(Token)match(input,172,FOLLOW_172_in_wp5151_static.FOLLOW_172_in_wp5151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5153_static.FOLLOW_TOKEN_in_wp5153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: 172, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:9: 'WP$' TOKEN
            {
            string_literal925=(Token)match(input,173,FOLLOW_173_in_wp_poss5168_static.FOLLOW_173_in_wp_poss5168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5170_static.FOLLOW_TOKEN_in_wp_poss5170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:5: 'WRB' TOKEN
            {
            string_literal927=(Token)match(input,174,FOLLOW_174_in_wrb5185_static.FOLLOW_174_in_wrb5185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5187_static.FOLLOW_TOKEN_in_wrb5187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker205_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker205);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker207_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker207);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker221_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker221);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker223_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker223);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker225_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker225);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker227_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker227);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker232_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker232);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker234_static.FOLLOW_colon_in_synpred10_ChemicalChunker234);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker239_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker239);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker241_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker241);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker243_static.FOLLOW_comma_in_synpred13_ChemicalChunker243);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred82_ChemicalChunker
    public final void synpred82_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker452_static.FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker452);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_ChemicalChunker

    // $ANTLR start synpred84_ChemicalChunker
    public final void synpred84_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred84_ChemicalChunker486_static.FOLLOW_dt_in_synpred84_ChemicalChunker486);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:15: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred85_ChemicalChunker489_static.FOLLOW_advAdj_in_synpred85_ChemicalChunker489);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:25: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker494_static.FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker494);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:40: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred87_ChemicalChunker496_static.FOLLOW_noun_in_synpred87_ChemicalChunker496);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:45: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:45: number
        {
        pushFollow(FOLLOW_number_in_synpred88_ChemicalChunker498_static.FOLLOW_number_in_synpred88_ChemicalChunker498);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:52: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred89_ChemicalChunker500_static.FOLLOW_ratio_in_synpred89_ChemicalChunker500);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred90_ChemicalChunker508_static.FOLLOW_conjunction_in_synpred90_ChemicalChunker508);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:77: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred91_ChemicalChunker511_static.FOLLOW_advAdj_in_synpred91_ChemicalChunker511);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:86: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker515_static.FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker515);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:101: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:101: noun
        {
        pushFollow(FOLLOW_noun_in_synpred93_ChemicalChunker517_static.FOLLOW_noun_in_synpred93_ChemicalChunker517);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:106: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:106: number
        {
        pushFollow(FOLLOW_number_in_synpred94_ChemicalChunker519_static.FOLLOW_number_in_synpred94_ChemicalChunker519);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:64: ( conjunction )*
        loop153:
        do {
            int alt153=2;
            alt153 = dfa153.predict(input);
            switch (alt153) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker508_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker508);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop153;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:77: ( advAdj )*
        loop154:
        do {
            int alt154=2;
            alt154 = dfa154.predict(input);
            switch (alt154) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred95_ChemicalChunker511_static.FOLLOW_advAdj_in_synpred95_ChemicalChunker511);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop154;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:85: ( dissolvePhrase | noun | number | ratio )
        int alt155=4;
        alt155 = dfa155.predict(input);
        switch (alt155) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker515_static.FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker515);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:101: noun
                {
                pushFollow(FOLLOW_noun_in_synpred95_ChemicalChunker517_static.FOLLOW_noun_in_synpred95_ChemicalChunker517);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:106: number
                {
                pushFollow(FOLLOW_number_in_synpred95_ChemicalChunker519_static.FOLLOW_number_in_synpred95_ChemicalChunker519);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:113: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred95_ChemicalChunker521_static.FOLLOW_ratio_in_synpred95_ChemicalChunker521);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:155: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker537_static.FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker537);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:126: ( prepphraseOf | prepphraseIN )
        int alt156=2;
        switch ( input.LA(1) ) {
        case 52:
            {
            alt156=1;
            }
            break;
        case 46:
            {
            alt156=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 156, 0, input);

            throw nvae;
        }

        switch (alt156) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker531_static.FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker531);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker534_static.FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker534);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:155: ( dissolvePhrase )?
        int alt157=2;
        switch ( input.LA(1) ) {
            case 34:
            case 35:
            case 36:
            case 41:
            case 42:
            case 63:
            case 79:
            case 128:
            case 137:
            case 140:
            case 145:
            case 146:
            case 147:
            case 152:
                {
                alt157=1;
                }
                break;
        }

        switch (alt157) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker537_static.FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker537);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker552_static.FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker552);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred100_ChemicalChunker583_static.FOLLOW_adj_in_synpred100_ChemicalChunker583);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:15: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred101_ChemicalChunker590_static.FOLLOW_molecule_in_synpred101_ChemicalChunker590);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:24: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:24: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker592_static.FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker592);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:57: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:57: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred104_ChemicalChunker600_static.FOLLOW_molecule_in_synpred104_ChemicalChunker600);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:97: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:97: adj
        {
        pushFollow(FOLLOW_adj_in_synpred106_ChemicalChunker612_static.FOLLOW_adj_in_synpred106_ChemicalChunker612);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:108: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:108: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker619_static.FOLLOW_molecule_in_synpred108_ChemicalChunker619);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:135: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:135: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker625_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker625);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker627_static.FOLLOW_molecule_in_synpred109_ChemicalChunker627);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:85: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:85: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred110_ChemicalChunker607_static.FOLLOW_inin_in_synpred110_ChemicalChunker607);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:90: ( dtTHE )?
        int alt159=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt159=1;
                }
                break;
        }

        switch (alt159) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred110_ChemicalChunker609_static.FOLLOW_dtTHE_in_synpred110_ChemicalChunker609);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:97: ( adj )?
        int alt160=2;
        alt160 = dfa160.predict(input);
        switch (alt160) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred110_ChemicalChunker612_static.FOLLOW_adj_in_synpred110_ChemicalChunker612);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:102: ( nnp )?
        int alt161=2;
        switch ( input.LA(1) ) {
            case 152:
                {
                alt161=1;
                }
                break;
        }

        switch (alt161) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred110_ChemicalChunker615_static.FOLLOW_nnp_in_synpred110_ChemicalChunker615);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:107: ( molecule | unnamedmolecule )
        int alt162=2;
        alt162 = dfa162.predict(input);
        switch (alt162) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:108: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker619_static.FOLLOW_molecule_in_synpred110_ChemicalChunker619);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:117: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker621_static.FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker621);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:134: ( conjunction molecule )*
        loop163:
        do {
            int alt163=2;
            switch ( input.LA(1) ) {
            case 128:
            case 139:
                {
                alt163=1;
                }
                break;

            }

            switch (alt163) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:135: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred110_ChemicalChunker625_static.FOLLOW_conjunction_in_synpred110_ChemicalChunker625);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker627_static.FOLLOW_molecule_in_synpred110_ChemicalChunker627);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop163;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:28: to
        {
        pushFollow(FOLLOW_to_in_synpred113_ChemicalChunker675_static.FOLLOW_to_in_synpred113_ChemicalChunker675);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred114_ChemicalChunker678_static.FOLLOW_inAll_in_synpred114_ChemicalChunker678);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred120_ChemicalChunker697_static.FOLLOW_verb_in_synpred120_ChemicalChunker697);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: md
        {
        pushFollow(FOLLOW_md_in_synpred121_ChemicalChunker700_static.FOLLOW_md_in_synpred121_ChemicalChunker700);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred122_ChemicalChunker703_static.FOLLOW_adv_in_synpred122_ChemicalChunker703);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred123_ChemicalChunker706_static.FOLLOW_adj_in_synpred123_ChemicalChunker706);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred124_ChemicalChunker709_static.FOLLOW_neg_in_synpred124_ChemicalChunker709);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )*
        loop164:
        do {
            int alt164=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt164=1;
                }
                break;

            }

            switch (alt164) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred125_ChemicalChunker685_static.FOLLOW_md_in_synpred125_ChemicalChunker685);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop164;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:53: ( rbconj )?
        int alt165=2;
        switch ( input.LA(1) ) {
            case 126:
                {
                alt165=1;
                }
                break;
        }

        switch (alt165) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred125_ChemicalChunker688_static.FOLLOW_rbconj_in_synpred125_ChemicalChunker688);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:61: ( adv )*
        loop166:
        do {
            int alt166=2;
            switch ( input.LA(1) ) {
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt166=1;
                }
                break;

            }

            switch (alt166) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred125_ChemicalChunker691_static.FOLLOW_adv_in_synpred125_ChemicalChunker691);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop166;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:66: ( adj )?
        int alt167=2;
        switch ( input.LA(1) ) {
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt167=1;
                }
                break;
        }

        switch (alt167) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred125_ChemicalChunker694_static.FOLLOW_adj_in_synpred125_ChemicalChunker694);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: ( verb )+
        int cnt168=0;
        loop168:
        do {
            int alt168=2;
            switch ( input.LA(1) ) {
            case 80:
            case 81:
            case 82:
            case 83:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
            case 98:
            case 99:
            case 100:
            case 101:
            case 103:
            case 105:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 113:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 122:
            case 123:
            case 124:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt168=1;
                }
                break;

            }

            switch (alt168) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred125_ChemicalChunker697_static.FOLLOW_verb_in_synpred125_ChemicalChunker697);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt168 >= 1 ) break loop168;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(168, input);
                    throw eee;
            }
            cnt168++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: ( md )*
        loop169:
        do {
            int alt169=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt169=1;
                }
                break;

            }

            switch (alt169) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred125_ChemicalChunker700_static.FOLLOW_md_in_synpred125_ChemicalChunker700);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop169;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: ( adv )*
        loop170:
        do {
            int alt170=2;
            switch ( input.LA(1) ) {
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt170=1;
                }
                break;

            }

            switch (alt170) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred125_ChemicalChunker703_static.FOLLOW_adv_in_synpred125_ChemicalChunker703);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop170;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: ( adj )?
        int alt171=2;
        switch ( input.LA(1) ) {
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt171=1;
                }
                break;
        }

        switch (alt171) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred125_ChemicalChunker706_static.FOLLOW_adj_in_synpred125_ChemicalChunker706);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: ( neg )?
        int alt172=2;
        switch ( input.LA(1) ) {
            case 130:
                {
                alt172=1;
                }
                break;
        }

        switch (alt172) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred125_ChemicalChunker709_static.FOLLOW_neg_in_synpred125_ChemicalChunker709);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred126_ChemicalChunker715_static.FOLLOW_inoff_in_synpred126_ChemicalChunker715);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )?
        int alt173=2;
        switch ( input.LA(1) ) {
            case 139:
                {
                alt173=1;
                }
                break;
        }

        switch (alt173) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred129_ChemicalChunker719_static.FOLLOW_cc_in_synpred129_ChemicalChunker719);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:111: ( comma )?
        int alt174=2;
        switch ( input.LA(1) ) {
            case 128:
                {
                alt174=1;
                }
                break;
        }

        switch (alt174) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred129_ChemicalChunker722_static.FOLLOW_comma_in_synpred129_ChemicalChunker722);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred129_ChemicalChunker725_static.FOLLOW_prepphrase_in_synpred129_ChemicalChunker725);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred139_ChemicalChunker
    public final void synpred139_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker755_static.FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker755);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred152_ChemicalChunker781_static.FOLLOW_vbdegass_in_synpred152_ChemicalChunker781);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred176_ChemicalChunker869_static.FOLLOW_dash_in_synpred176_ChemicalChunker869);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred176_ChemicalChunker871_static.FOLLOW_nounStructure_in_synpred176_ChemicalChunker871);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred179_ChemicalChunker886_static.FOLLOW_citation_in_synpred179_ChemicalChunker886);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred180_ChemicalChunker888_static.FOLLOW_cycles_in_synpred180_ChemicalChunker888);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred181_ChemicalChunker890_static.FOLLOW_molecule_in_synpred181_ChemicalChunker890);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred182_ChemicalChunker892_static.FOLLOW_apparatus_in_synpred182_ChemicalChunker892);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred183_ChemicalChunker894_static.FOLLOW_mixture_in_synpred183_ChemicalChunker894);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred184_ChemicalChunker896_static.FOLLOW_unnamedmolecule_in_synpred184_ChemicalChunker896);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:98: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred186_ChemicalChunker900_static.FOLLOW_nnstate_in_synpred186_ChemicalChunker900);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:106: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:106: nn
        {
        pushFollow(FOLLOW_nn_in_synpred187_ChemicalChunker902_static.FOLLOW_nn_in_synpred187_ChemicalChunker902);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:117: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:117: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred190_ChemicalChunker908_static.FOLLOW_nnadd_in_synpred190_ChemicalChunker908);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:151: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:151: range
        {
        pushFollow(FOLLOW_range_in_synpred193_ChemicalChunker914_static.FOLLOW_range_in_synpred193_ChemicalChunker914);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:157: ( amount )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:157: amount
        {
        pushFollow(FOLLOW_amount_in_synpred194_ChemicalChunker916_static.FOLLOW_amount_in_synpred194_ChemicalChunker916);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:209: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:209: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred200_ChemicalChunker928_static.FOLLOW_quantity_in_synpred200_ChemicalChunker928);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:218: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:218: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred201_ChemicalChunker930_static.FOLLOW_nnchementity_in_synpred201_ChemicalChunker930);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:231: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:231: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred202_ChemicalChunker932_static.FOLLOW_measurements_in_synpred202_ChemicalChunker932);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:287: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:287: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred208_ChemicalChunker944_static.FOLLOW_nnpressure_in_synpred208_ChemicalChunker944);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:417: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:417: number
        {
        pushFollow(FOLLOW_number_in_synpred221_ChemicalChunker970_static.FOLLOW_number_in_synpred221_ChemicalChunker970);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:424: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:424: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred222_ChemicalChunker972_static.FOLLOW_oscarCompound_in_synpred222_ChemicalChunker972);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:10: ( numberratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred239_ChemicalChunker1072_static.FOLLOW_numberratio_in_synpred239_ChemicalChunker1072);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:20: ( colon cdAlphanum )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:20: colon cdAlphanum
        {
        pushFollow(FOLLOW_colon_in_synpred240_ChemicalChunker1100_static.FOLLOW_colon_in_synpred240_ChemicalChunker1100);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cdAlphanum_in_synpred240_ChemicalChunker1102_static.FOLLOW_cdAlphanum_in_synpred240_ChemicalChunker1102);
        cdAlphanum();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:37: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:37: cd
        {
        pushFollow(FOLLOW_cd_in_synpred241_ChemicalChunker1104_static.FOLLOW_cd_in_synpred241_ChemicalChunker1104);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred242_ChemicalChunker1121_static.FOLLOW_colon_in_synpred242_ChemicalChunker1121);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred242_ChemicalChunker1123_static.FOLLOW_noun_in_synpred242_ChemicalChunker1123);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred255_ChemicalChunker1320_static.FOLLOW_fw_in_synpred255_ChemicalChunker1320);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred256_ChemicalChunker1322_static.FOLLOW_verb_in_synpred256_ChemicalChunker1322);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred257_ChemicalChunker1324_static.FOLLOW_nn_in_synpred257_ChemicalChunker1324);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:31: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:31: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred258_ChemicalChunker1326_static.FOLLOW_measurements_in_synpred258_ChemicalChunker1326);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:57: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:57: stop
        {
        pushFollow(FOLLOW_stop_in_synpred261_ChemicalChunker1332_static.FOLLOW_stop_in_synpred261_ChemicalChunker1332);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:62: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:62: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred262_ChemicalChunker1334_static.FOLLOW_oscarCompound_in_synpred262_ChemicalChunker1334);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:76: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:76: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred263_ChemicalChunker1336_static.FOLLOW_molecule_in_synpred263_ChemicalChunker1336);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:85: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:85: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred264_ChemicalChunker1338_static.FOLLOW_unnamedmolecule_in_synpred264_ChemicalChunker1338);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:106: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:106: sym
        {
        pushFollow(FOLLOW_sym_in_synpred266_ChemicalChunker1342_static.FOLLOW_sym_in_synpred266_ChemicalChunker1342);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:110: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:110: cd
        {
        pushFollow(FOLLOW_cd_in_synpred267_ChemicalChunker1344_static.FOLLOW_cd_in_synpred267_ChemicalChunker1344);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:113: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:113: noun
        {
        pushFollow(FOLLOW_noun_in_synpred268_ChemicalChunker1346_static.FOLLOW_noun_in_synpred268_ChemicalChunker1346);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:118: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:118: inof
        {
        pushFollow(FOLLOW_inof_in_synpred269_ChemicalChunker1348_static.FOLLOW_inof_in_synpred269_ChemicalChunker1348);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:123: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:123: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred270_ChemicalChunker1350_static.FOLLOW_inAll_in_synpred270_ChemicalChunker1350);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:129: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:129: cd
        {
        pushFollow(FOLLOW_cd_in_synpred271_ChemicalChunker1352_static.FOLLOW_cd_in_synpred271_ChemicalChunker1352);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:132: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:132: comma
        {
        pushFollow(FOLLOW_comma_in_synpred272_ChemicalChunker1354_static.FOLLOW_comma_in_synpred272_ChemicalChunker1354);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:138: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:138: adj
        {
        pushFollow(FOLLOW_adj_in_synpred273_ChemicalChunker1356_static.FOLLOW_adj_in_synpred273_ChemicalChunker1356);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:155: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:155: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred275_ChemicalChunker1364_static.FOLLOW_minimixture_in_synpred275_ChemicalChunker1364);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:167: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:167: fw
        {
        pushFollow(FOLLOW_fw_in_synpred276_ChemicalChunker1366_static.FOLLOW_fw_in_synpred276_ChemicalChunker1366);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:170: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:170: verb
        {
        pushFollow(FOLLOW_verb_in_synpred277_ChemicalChunker1368_static.FOLLOW_verb_in_synpred277_ChemicalChunker1368);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:175: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:175: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred278_ChemicalChunker1370_static.FOLLOW_measurements_in_synpred278_ChemicalChunker1370);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:188: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:188: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred279_ChemicalChunker1372_static.FOLLOW_nnyield_in_synpred279_ChemicalChunker1372);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:209: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:209: stop
        {
        pushFollow(FOLLOW_stop_in_synpred282_ChemicalChunker1378_static.FOLLOW_stop_in_synpred282_ChemicalChunker1378);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:214: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:214: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred283_ChemicalChunker1380_static.FOLLOW_oscarCompound_in_synpred283_ChemicalChunker1380);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:228: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:228: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred284_ChemicalChunker1382_static.FOLLOW_molecule_in_synpred284_ChemicalChunker1382);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:237: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:237: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred285_ChemicalChunker1384_static.FOLLOW_unnamedmolecule_in_synpred285_ChemicalChunker1384);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:258: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:258: sym
        {
        pushFollow(FOLLOW_sym_in_synpred287_ChemicalChunker1388_static.FOLLOW_sym_in_synpred287_ChemicalChunker1388);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:262: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:262: cd
        {
        pushFollow(FOLLOW_cd_in_synpred288_ChemicalChunker1390_static.FOLLOW_cd_in_synpred288_ChemicalChunker1390);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:265: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:265: noun
        {
        pushFollow(FOLLOW_noun_in_synpred289_ChemicalChunker1392_static.FOLLOW_noun_in_synpred289_ChemicalChunker1392);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:270: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:270: inof
        {
        pushFollow(FOLLOW_inof_in_synpred290_ChemicalChunker1394_static.FOLLOW_inof_in_synpred290_ChemicalChunker1394);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:275: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:275: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred291_ChemicalChunker1396_static.FOLLOW_inAll_in_synpred291_ChemicalChunker1396);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:281: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:281: cd
        {
        pushFollow(FOLLOW_cd_in_synpred292_ChemicalChunker1398_static.FOLLOW_cd_in_synpred292_ChemicalChunker1398);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:284: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:284: comma
        {
        pushFollow(FOLLOW_comma_in_synpred293_ChemicalChunker1400_static.FOLLOW_comma_in_synpred293_ChemicalChunker1400);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:290: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:290: adj
        {
        pushFollow(FOLLOW_adj_in_synpred294_ChemicalChunker1402_static.FOLLOW_adj_in_synpred294_ChemicalChunker1402);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:300: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:300: stop
        {
        pushFollow(FOLLOW_stop_in_synpred296_ChemicalChunker1406_static.FOLLOW_stop_in_synpred296_ChemicalChunker1406);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:24: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred298_ChemicalChunker1467_static.FOLLOW_fw_in_synpred298_ChemicalChunker1467);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:27: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:27: nn
        {
        pushFollow(FOLLOW_nn_in_synpred299_ChemicalChunker1469_static.FOLLOW_nn_in_synpred299_ChemicalChunker1469);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:30: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:30: verb
        {
        pushFollow(FOLLOW_verb_in_synpred300_ChemicalChunker1471_static.FOLLOW_verb_in_synpred300_ChemicalChunker1471);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred301_ChemicalChunker1473_static.FOLLOW_measurements_in_synpred301_ChemicalChunker1473);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:61: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:61: stop
        {
        pushFollow(FOLLOW_stop_in_synpred304_ChemicalChunker1479_static.FOLLOW_stop_in_synpred304_ChemicalChunker1479);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:66: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:66: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1481_static.FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1481);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:80: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:80: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred306_ChemicalChunker1483_static.FOLLOW_molecule_in_synpred306_ChemicalChunker1483);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:89: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:89: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred307_ChemicalChunker1485_static.FOLLOW_unnamedmolecule_in_synpred307_ChemicalChunker1485);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:110: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:110: sym
        {
        pushFollow(FOLLOW_sym_in_synpred309_ChemicalChunker1489_static.FOLLOW_sym_in_synpred309_ChemicalChunker1489);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:114: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:114: cd
        {
        pushFollow(FOLLOW_cd_in_synpred310_ChemicalChunker1491_static.FOLLOW_cd_in_synpred310_ChemicalChunker1491);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:117: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:117: noun
        {
        pushFollow(FOLLOW_noun_in_synpred311_ChemicalChunker1493_static.FOLLOW_noun_in_synpred311_ChemicalChunker1493);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:122: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:122: inof
        {
        pushFollow(FOLLOW_inof_in_synpred312_ChemicalChunker1495_static.FOLLOW_inof_in_synpred312_ChemicalChunker1495);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:127: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:127: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred313_ChemicalChunker1497_static.FOLLOW_inAll_in_synpred313_ChemicalChunker1497);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:133: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:133: cd
        {
        pushFollow(FOLLOW_cd_in_synpred314_ChemicalChunker1499_static.FOLLOW_cd_in_synpred314_ChemicalChunker1499);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:136: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:136: comma
        {
        pushFollow(FOLLOW_comma_in_synpred315_ChemicalChunker1501_static.FOLLOW_comma_in_synpred315_ChemicalChunker1501);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:142: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:142: adj
        {
        pushFollow(FOLLOW_adj_in_synpred316_ChemicalChunker1503_static.FOLLOW_adj_in_synpred316_ChemicalChunker1503);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred318_ChemicalChunker
    public final void synpred318_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:159: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:159: fw
        {
        pushFollow(FOLLOW_fw_in_synpred318_ChemicalChunker1511_static.FOLLOW_fw_in_synpred318_ChemicalChunker1511);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:162: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:162: verb
        {
        pushFollow(FOLLOW_verb_in_synpred319_ChemicalChunker1513_static.FOLLOW_verb_in_synpred319_ChemicalChunker1513);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:167: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:167: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred320_ChemicalChunker1515_static.FOLLOW_measurements_in_synpred320_ChemicalChunker1515);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:180: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:180: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred321_ChemicalChunker1517_static.FOLLOW_nnyield_in_synpred321_ChemicalChunker1517);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred324_ChemicalChunker
    public final void synpred324_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:201: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:201: stop
        {
        pushFollow(FOLLOW_stop_in_synpred324_ChemicalChunker1523_static.FOLLOW_stop_in_synpred324_ChemicalChunker1523);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:206: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:206: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred325_ChemicalChunker1525_static.FOLLOW_oscarCompound_in_synpred325_ChemicalChunker1525);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:220: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:220: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred326_ChemicalChunker1527_static.FOLLOW_molecule_in_synpred326_ChemicalChunker1527);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:229: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:229: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred327_ChemicalChunker1529_static.FOLLOW_unnamedmolecule_in_synpred327_ChemicalChunker1529);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred329_ChemicalChunker
    public final void synpred329_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:250: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:250: sym
        {
        pushFollow(FOLLOW_sym_in_synpred329_ChemicalChunker1533_static.FOLLOW_sym_in_synpred329_ChemicalChunker1533);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_ChemicalChunker

    // $ANTLR start synpred330_ChemicalChunker
    public final void synpred330_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:254: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:254: cd
        {
        pushFollow(FOLLOW_cd_in_synpred330_ChemicalChunker1535_static.FOLLOW_cd_in_synpred330_ChemicalChunker1535);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_ChemicalChunker

    // $ANTLR start synpred331_ChemicalChunker
    public final void synpred331_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:257: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:257: noun
        {
        pushFollow(FOLLOW_noun_in_synpred331_ChemicalChunker1537_static.FOLLOW_noun_in_synpred331_ChemicalChunker1537);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:262: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:262: inof
        {
        pushFollow(FOLLOW_inof_in_synpred332_ChemicalChunker1539_static.FOLLOW_inof_in_synpred332_ChemicalChunker1539);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:267: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:267: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred333_ChemicalChunker1541_static.FOLLOW_inAll_in_synpred333_ChemicalChunker1541);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:273: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:273: cd
        {
        pushFollow(FOLLOW_cd_in_synpred334_ChemicalChunker1543_static.FOLLOW_cd_in_synpred334_ChemicalChunker1543);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:276: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:276: comma
        {
        pushFollow(FOLLOW_comma_in_synpred335_ChemicalChunker1545_static.FOLLOW_comma_in_synpred335_ChemicalChunker1545);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:282: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:282: adj
        {
        pushFollow(FOLLOW_adj_in_synpred336_ChemicalChunker1547_static.FOLLOW_adj_in_synpred336_ChemicalChunker1547);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:292: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:292: stop
        {
        pushFollow(FOLLOW_stop_in_synpred338_ChemicalChunker1551_static.FOLLOW_stop_in_synpred338_ChemicalChunker1551);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred348_ChemicalChunker1602_static.FOLLOW_prepphraseAtmosphere_in_synpred348_ChemicalChunker1602);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred349_ChemicalChunker1604_static.FOLLOW_prepphraseTime_in_synpred349_ChemicalChunker1604);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred350_ChemicalChunker
    public final void synpred350_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred350_ChemicalChunker1606_static.FOLLOW_prepphraseTemp_in_synpred350_ChemicalChunker1606);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_ChemicalChunker

    // $ANTLR start synpred351_ChemicalChunker
    public final void synpred351_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred351_ChemicalChunker1608_static.FOLLOW_prepphraseIN_in_synpred351_ChemicalChunker1608);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_ChemicalChunker

    // $ANTLR start synpred352_ChemicalChunker
    public final void synpred352_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred352_ChemicalChunker1610_static.FOLLOW_prepphraseRole_in_synpred352_ChemicalChunker1610);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred356_ChemicalChunker1711_static.FOLLOW_advAdj_in_synpred356_ChemicalChunker1711);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred361_ChemicalChunker
    public final void synpred361_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred361_ChemicalChunker1727_static.FOLLOW_nntime_in_synpred361_ChemicalChunker1727);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred364_ChemicalChunker1815_static.FOLLOW_advAdj_in_synpred364_ChemicalChunker1815);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred365_ChemicalChunker
    public final void synpred365_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred365_ChemicalChunker1820_static.FOLLOW_nnatmosphere_in_synpred365_ChemicalChunker1820);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred399_ChemicalChunker1933_static.FOLLOW_advAdj_in_synpred399_ChemicalChunker1933);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred404_ChemicalChunker1948_static.FOLLOW_nntemp_in_synpred404_ChemicalChunker1948);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred412_ChemicalChunker2168_static.FOLLOW_conjunction_in_synpred412_ChemicalChunker2168);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:15: ( conjunction )*
        loop176:
        do {
            int alt176=2;
            alt176 = dfa176.predict(input);
            switch (alt176) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred413_ChemicalChunker2168_static.FOLLOW_conjunction_in_synpred413_ChemicalChunker2168);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop176;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred413_ChemicalChunker2171_static.FOLLOW_apparatus_in_synpred413_ChemicalChunker2171);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred416_ChemicalChunker2189_static.FOLLOW_nnApp_in_synpred416_ChemicalChunker2189);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred417_ChemicalChunker2217_static.FOLLOW_nnapparatus_in_synpred417_ChemicalChunker2217);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred418_ChemicalChunker2221_static.FOLLOW_dash_in_synpred418_ChemicalChunker2221);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred418_ChemicalChunker2223_static.FOLLOW_nnapparatus_in_synpred418_ChemicalChunker2223);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred419_ChemicalChunker
    public final void synpred419_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred419_ChemicalChunker2237_static.FOLLOW_quantity_in_synpred419_ChemicalChunker2237);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_ChemicalChunker

    // $ANTLR start synpred420_ChemicalChunker
    public final void synpred420_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred420_ChemicalChunker2239_static.FOLLOW_adj_in_synpred420_ChemicalChunker2239);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred421_ChemicalChunker2241_static.FOLLOW_nnpressure_in_synpred421_ChemicalChunker2241);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred422_ChemicalChunker2243_static.FOLLOW_nnadd_in_synpred422_ChemicalChunker2243);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred423_ChemicalChunker2245_static.FOLLOW_molecule_in_synpred423_ChemicalChunker2245);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred424_ChemicalChunker2247_static.FOLLOW_nnchementity_in_synpred424_ChemicalChunker2247);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred425_ChemicalChunker
    public final void synpred425_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred425_ChemicalChunker2249_static.FOLLOW_nnstate_in_synpred425_ChemicalChunker2249);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_ChemicalChunker

    // $ANTLR start synpred426_ChemicalChunker
    public final void synpred426_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred426_ChemicalChunker2251_static.FOLLOW_nn_in_synpred426_ChemicalChunker2251);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:43: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred429_ChemicalChunker2277_static.FOLLOW_dt_in_synpred429_ChemicalChunker2277);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred430_ChemicalChunker
    public final void synpred430_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred430_ChemicalChunker2289_static.FOLLOW_measurementtypes_in_synpred430_ChemicalChunker2289);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred430_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:29: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:29: yield
        {
        pushFollow(FOLLOW_yield_in_synpred435_ChemicalChunker2324_static.FOLLOW_yield_in_synpred435_ChemicalChunker2324);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred436_ChemicalChunker2337_static.FOLLOW_oscaront_in_synpred436_ChemicalChunker2337);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred438_ChemicalChunker
    public final void synpred438_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:24: ( oscarCompound1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred438_ChemicalChunker2361_static.FOLLOW_oscarCompound1_in_synpred438_ChemicalChunker2361);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred438_ChemicalChunker

    // $ANTLR start synpred440_ChemicalChunker
    public final void synpred440_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:54: ( oscarCompound3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred440_ChemicalChunker2365_static.FOLLOW_oscarCompound3_in_synpred440_ChemicalChunker2365);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:93: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:93: adj
        {
        pushFollow(FOLLOW_adj_in_synpred442_ChemicalChunker2372_static.FOLLOW_adj_in_synpred442_ChemicalChunker2372);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // $ANTLR start synpred443_ChemicalChunker
    public final void synpred443_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:98: ( reference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:98: reference
        {
        pushFollow(FOLLOW_reference_in_synpred443_ChemicalChunker2375_static.FOLLOW_reference_in_synpred443_ChemicalChunker2375);
        reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred443_ChemicalChunker

    // $ANTLR start synpred444_ChemicalChunker
    public final void synpred444_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:26: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred444_ChemicalChunker2450_static.FOLLOW_oscarcm_in_synpred444_ChemicalChunker2450);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred444_ChemicalChunker

    // $ANTLR start synpred445_ChemicalChunker
    public final void synpred445_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:14: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:14: dash
        {
        pushFollow(FOLLOW_dash_in_synpred445_ChemicalChunker2478_static.FOLLOW_dash_in_synpred445_ChemicalChunker2478);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_ChemicalChunker

    // $ANTLR start synpred446_ChemicalChunker
    public final void synpred446_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:19: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:19: apost
        {
        pushFollow(FOLLOW_apost_in_synpred446_ChemicalChunker2480_static.FOLLOW_apost_in_synpred446_ChemicalChunker2480);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred446_ChemicalChunker

    // $ANTLR start synpred447_ChemicalChunker
    public final void synpred447_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:14: ( dash oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:14: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred447_ChemicalChunker2497_static.FOLLOW_dash_in_synpred447_ChemicalChunker2497);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred447_ChemicalChunker2499_static.FOLLOW_oscarcm_in_synpred447_ChemicalChunker2499);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred447_ChemicalChunker

    // $ANTLR start synpred448_ChemicalChunker
    public final void synpred448_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:30: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:30: dash
        {
        pushFollow(FOLLOW_dash_in_synpred448_ChemicalChunker2504_static.FOLLOW_dash_in_synpred448_ChemicalChunker2504);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred448_ChemicalChunker

    // $ANTLR start synpred449_ChemicalChunker
    public final void synpred449_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred449_ChemicalChunker2518_static.FOLLOW_quantity_in_synpred449_ChemicalChunker2518);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred449_ChemicalChunker

    // $ANTLR start synpred450_ChemicalChunker
    public final void synpred450_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred450_ChemicalChunker2520_static.FOLLOW_mixture_in_synpred450_ChemicalChunker2520);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred450_ChemicalChunker

    // $ANTLR start synpred451_ChemicalChunker
    public final void synpred451_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:42: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:42: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred451_ChemicalChunker2528_static.FOLLOW_mixture_in_synpred451_ChemicalChunker2528);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred451_ChemicalChunker

    // $ANTLR start synpred452_ChemicalChunker
    public final void synpred452_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred452_ChemicalChunker2539_static.FOLLOW_quantity_in_synpred452_ChemicalChunker2539);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred452_ChemicalChunker

    // $ANTLR start synpred453_ChemicalChunker
    public final void synpred453_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred453_ChemicalChunker2541_static.FOLLOW_mixture_in_synpred453_ChemicalChunker2541);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred453_ChemicalChunker

    // $ANTLR start synpred454_ChemicalChunker
    public final void synpred454_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred454_ChemicalChunker2545_static.FOLLOW_oscarCompound_in_synpred454_ChemicalChunker2545);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred454_ChemicalChunker

    // $ANTLR start synpred455_ChemicalChunker
    public final void synpred455_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:40: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred455_ChemicalChunker2550_static.FOLLOW_citation_in_synpred455_ChemicalChunker2550);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred455_ChemicalChunker

    // $ANTLR start synpred456_ChemicalChunker
    public final void synpred456_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:49: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred456_ChemicalChunker2552_static.FOLLOW_quantity_in_synpred456_ChemicalChunker2552);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred456_ChemicalChunker

    // $ANTLR start synpred457_ChemicalChunker
    public final void synpred457_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:58: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred457_ChemicalChunker2554_static.FOLLOW_mixture_in_synpred457_ChemicalChunker2554);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred457_ChemicalChunker

    // $ANTLR start synpred458_ChemicalChunker
    public final void synpred458_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred458_ChemicalChunker2568_static.FOLLOW_quantity_in_synpred458_ChemicalChunker2568);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred458_ChemicalChunker

    // $ANTLR start synpred460_ChemicalChunker
    public final void synpred460_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:18: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:18: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred460_ChemicalChunker2590_static.FOLLOW_moleculeamount3_in_synpred460_ChemicalChunker2590);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred460_ChemicalChunker

    // $ANTLR start synpred461_ChemicalChunker
    public final void synpred461_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:34: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:34: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred461_ChemicalChunker2592_static.FOLLOW_moleculeamount1_in_synpred461_ChemicalChunker2592);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred461_ChemicalChunker

    // $ANTLR start synpred465_ChemicalChunker
    public final void synpred465_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:32: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:32: citation
        {
        pushFollow(FOLLOW_citation_in_synpred465_ChemicalChunker2678_static.FOLLOW_citation_in_synpred465_ChemicalChunker2678);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred465_ChemicalChunker

    // $ANTLR start synpred466_ChemicalChunker
    public final void synpred466_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:41: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:41: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred466_ChemicalChunker2680_static.FOLLOW_quantity_in_synpred466_ChemicalChunker2680);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred466_ChemicalChunker

    // $ANTLR start synpred467_ChemicalChunker
    public final void synpred467_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred467_ChemicalChunker2682_static.FOLLOW_mixture_in_synpred467_ChemicalChunker2682);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred467_ChemicalChunker

    // $ANTLR start synpred468_ChemicalChunker
    public final void synpred468_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: ( jj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred468_ChemicalChunker2703_static.FOLLOW_jj_in_synpred468_ChemicalChunker2703);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred468_ChemicalChunker

    // $ANTLR start synpred469_ChemicalChunker
    public final void synpred469_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: ( ( jj )? noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: ( jj )? noun
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:18: ( jj )?
        int alt177=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA177_3 = input.LA(3);

                        if ( (synpred468_ChemicalChunker()) ) {
                            alt177=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt177) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred469_ChemicalChunker2703_static.FOLLOW_jj_in_synpred469_ChemicalChunker2703);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred469_ChemicalChunker2706_static.FOLLOW_noun_in_synpred469_ChemicalChunker2706);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred469_ChemicalChunker

    // $ANTLR start synpred470_ChemicalChunker
    public final void synpred470_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred470_ChemicalChunker2719_static.FOLLOW_quantity_in_synpred470_ChemicalChunker2719);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred470_ChemicalChunker

    // $ANTLR start synpred471_ChemicalChunker
    public final void synpred471_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:31: ( cdAlphanum )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:31: cdAlphanum
        {
        pushFollow(FOLLOW_cdAlphanum_in_synpred471_ChemicalChunker2747_static.FOLLOW_cdAlphanum_in_synpred471_ChemicalChunker2747);
        cdAlphanum();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred471_ChemicalChunker

    // $ANTLR start synpred472_ChemicalChunker
    public final void synpred472_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred472_ChemicalChunker2751_static.FOLLOW_quantity_in_synpred472_ChemicalChunker2751);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred472_ChemicalChunker

    // $ANTLR start synpred473_ChemicalChunker
    public final void synpred473_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred473_ChemicalChunker2753_static.FOLLOW_mixture_in_synpred473_ChemicalChunker2753);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred473_ChemicalChunker

    // $ANTLR start synpred475_ChemicalChunker
    public final void synpred475_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:27: ( unnamedmoleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:27: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred475_ChemicalChunker2769_static.FOLLOW_unnamedmoleculeamount1_in_synpred475_ChemicalChunker2769);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred475_ChemicalChunker

    // $ANTLR start synpred476_ChemicalChunker
    public final void synpred476_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:52: ( unnamedmoleculeamount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:52: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred476_ChemicalChunker2773_static.FOLLOW_unnamedmoleculeamount2_in_synpred476_ChemicalChunker2773);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred476_ChemicalChunker

    // $ANTLR start synpred477_ChemicalChunker
    public final void synpred477_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:77: ( unnamedmoleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:77: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred477_ChemicalChunker2777_static.FOLLOW_unnamedmoleculeamount3_in_synpred477_ChemicalChunker2777);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred477_ChemicalChunker

    // $ANTLR start synpred482_ChemicalChunker
    public final void synpred482_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred482_ChemicalChunker2881_static.FOLLOW_comma_in_synpred482_ChemicalChunker2881);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred482_ChemicalChunker2884_static.FOLLOW_measurements_in_synpred482_ChemicalChunker2884);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred482_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred475_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred475_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred453_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred460_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred460_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred461_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred461_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred451_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred451_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred447_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred447_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred456_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred456_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred482_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred482_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred468_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred458_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred458_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred465_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred465_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred473_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred473_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred440_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred476_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred476_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred449_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred449_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred469_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred469_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred452_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred452_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred425_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred446_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred446_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred472_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred472_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred438_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred438_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred443_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred443_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred467_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred467_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred455_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred455_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred450_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred450_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred477_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred477_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred471_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred471_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred444_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred444_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred457_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred457_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred470_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred470_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred448_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred448_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred466_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred466_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA176 dfa176 = new DFA176(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0090\uffff";
    static final String DFA2_eofS =
        "\1\1\u008f\uffff";
    static final String DFA2_minS =
        "\1\42\1\uffff\u008c\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00ae\1\uffff\u008c\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008c\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\64\1\u0088\1\144\1\157\1\167\1\67\1\143\1\147\1\u0089"+
        "\1\127\1\154\1\111\1\112\1\103\1\100\1\60\1\145\1\160\1\124\1\110"+
        "\1\u0083\1\21\1\161\1\142\1\47\1\46\1\40\1\171\1\166\1\106\1\137"+
        "\1\0\1\24\1\153\1\156\1\45\1\173\1\17\1\77\1\5\1\34\1\4\1\175\1"+
        "\120\1\141\1\42\1\20\1\71\1\115\1\104\1\62\1\43\1\u0082\1\3\1\51"+
        "\1\113\1\35\1\u0080\1\u0084\1\76\1\56\1\12\1\10\1\121\1\102\1\36"+
        "\1\37\1\65\1\15\1\u0085\1\136\1\u0086\1\26\1\134\1\101\1\131\1\66"+
        "\1\135\1\22\1\7\1\u008b\1\1\1\6\1\163\1\116\1\162\1\41\1\70\1\57"+
        "\1\61\1\122\1\170\1\176\1\130\1\16\1\u0087\1\75\1\151\1\152\1\30"+
        "\1\140\1\14\1\174\1\2\1\31\1\63\1\50\1\74\1\u0081\1\u008a\1\165"+
        "\1\123\1\73\1\52\1\32\1\13\1\177\1\164\1\146\1\125\1\72\1\54\1\44"+
        "\1\11\1\155\1\114\1\126\1\133\1\107\1\25\1\172\1\23\1\150\1\117"+
        "\1\132\1\105\1\53\1\33\1\27\1\55\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\6\1\12\1\14\1\107\1\42\1\45\1\u0084\1\13\1\33\1\113\1\114"+
            "\1\112\1\120\1\121\1\130\1\131\1\115\1\127\1\122\1\124\1\116"+
            "\1\117\1\126\1\125\1\123\1\22\1\43\1\u0085\1\53\1\5\1\44\1\46"+
            "\1\62\1\21\1\47\1\50\1\51\1\52\1\15\1\54\1\55\1\56\1\57\1\60"+
            "\1\41\1\20\1\142\1\u0082\1\143\1\146\1\16\1\65\1\150\1\147\1"+
            "\151\1\152\1\153\1\154\1\155\1\156\1\157\1\24\1\160\1\61\1\161"+
            "\1\145\1\162\1\163\1\67\1\164\1\70\1\165\1\71\1\166\1\167\1"+
            "\144\1\170\1\171\1\72\1\172\1\63\1\173\1\174\1\175\1\73\1\176"+
            "\1\40\1\64\1\177\1\u0080\1\u0081\1\36\1\133\1\u0086\1\17\1\u0087"+
            "\1\u0083\1\u0088\1\1\1\u0089\1\66\1\u008a\1\25\1\3\1\u008b\1"+
            "\u008c\1\4\1\2\1\101\1\74\1\111\1\7\1\10\1\11\1\104\1\132\1"+
            "\23\1\37\1\32\1\105\1\102\1\106\1\34\1\35\1\26\1\27\1\31\1\30"+
            "\1\75\1\110\1\u008d\1\134\1\137\1\136\1\141\1\135\1\140\1\76"+
            "\1\103\1\77\1\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 53:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u0088\uffff";
    static final String DFA4_eofS =
        "\1\13\u0087\uffff";
    static final String DFA4_minS =
        "\1\42\12\0\1\uffff\170\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00ae\12\0\1\uffff\170\0\4\uffff";
    static final String DFA4_acceptS =
        "\13\uffff\1\5\170\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\100\1\27\1\25\1\125\1\32\1\167\1\134\1\155\1\44\1\101"+
        "\1\uffff\1\113\1\174\1\153\1\30\1\26\1\56\1\136\1\63\1\151\1\76"+
        "\1\11\1\165\1\60\1\24\1\22\1\10\1\47\1\115\1\51\1\103\1\50\1\175"+
        "\1\116\1\133\1\147\1\u0080\1\62\1\142\1\65\1\46\1\72\1\123\1\33"+
        "\1\177\1\1\1\43\1\73\1\77\1\53\1\122\1\127\1\160\1\176\1\145\1\131"+
        "\1\3\1\163\1\157\1\13\1\36\1\111\1\57\1\135\1\104\1\12\1\164\1\37"+
        "\1\143\1\5\1\130\1\105\1\40\1\17\1\152\1\71\1\6\1\156\1\162\1\15"+
        "\1\61\1\23\1\54\1\66\1\117\1\120\1\172\1\20\1\64\1\114\1\132\1\166"+
        "\1\107\1\121\1\144\1\74\1\137\1\67\1\41\1\161\1\154\1\31\1\16\1"+
        "\4\1\150\1\171\1\110\1\75\1\124\1\34\1\55\1\7\1\141\1\170\1\112"+
        "\1\70\1\35\1\14\1\173\1\146\1\126\1\52\1\42\1\21\1\0\1\u0081\1\102"+
        "\1\106\1\2\1\45\1\140\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\22\1\10\1\12\1\110\1\43\1\46\1\13\1\11\1\34\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\27\1\44\1\13\1\54\1\21\1\45\1\47"+
            "\1\63\1\26\1\50\1\51\1\52\1\53\1\23\1\55\1\56\1\57\1\60\1\61"+
            "\1\42\1\25\1\142\1\u0082\1\143\1\146\1\24\1\66\1\150\1\147\1"+
            "\151\1\152\1\153\1\154\1\155\1\156\1\157\1\31\1\160\1\62\1\161"+
            "\1\145\1\162\1\163\1\70\1\164\1\71\1\165\1\72\1\166\1\167\1"+
            "\144\1\170\1\171\1\73\1\172\1\64\1\173\1\174\1\175\1\74\1\176"+
            "\1\41\1\65\1\177\1\u0080\1\u0081\1\37\1\15\1\13\1\14\1\13\1"+
            "\u0083\3\13\1\67\1\13\1\32\1\17\2\13\1\20\1\16\1\102\1\75\1"+
            "\112\1\5\1\6\1\7\1\105\1\133\1\30\1\40\1\33\1\106\1\103\1\107"+
            "\1\35\1\36\1\1\1\2\1\4\1\3\1\76\1\111\1\13\1\134\1\137\1\136"+
            "\1\141\1\135\1\140\1\77\1\104\1\100\1\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 55:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\32\uffff";
    static final String DFA5_eofS =
        "\1\1\31\uffff";
    static final String DFA5_minS =
        "\1\42\1\uffff\13\41\13\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00ae\1\uffff\13\41\13\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\15\uffff\1\7\1\3\1\1\1\6\1\12\1\0\1\11\1\5\1\10\1\2\1\4\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\125\1\1\14\21\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\42\1\uffff\3\41\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00ae\1\uffff\3\41\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\1\1\2\1\0\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\134\1\1\3\1\1\1\2\12\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\110\uffff";
    static final String DFA8_eofS =
        "\110\uffff";
    static final String DFA8_minS =
        "\1\42\23\0\64\uffff";
    static final String DFA8_maxS =
        "\1\u00ae\23\0\64\uffff";
    static final String DFA8_acceptS =
        "\24\uffff\1\2\62\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\64\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\11\1\13\3\24\1\uffff\1\12\1\24\20\uffff\1\21\1\24\1"+
            "\uffff\1\24\1\4\3\24\1\20\4\24\1\14\6\24\1\17\4\uffff\1\15\1"+
            "\24\11\uffff\1\23\1\uffff\1\24\4\uffff\1\24\1\uffff\1\24\1\uffff"+
            "\1\24\5\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff\2\24\3"+
            "\uffff\1\24\2\uffff\1\16\5\uffff\1\24\1\uffff\1\24\1\2\2\uffff"+
            "\1\3\1\1\2\24\1\uffff\1\6\1\7\1\10\1\24\1\uffff\1\22\14\24\10"+
            "\uffff\4\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "71:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\42\6\41\2\uffff\6\0";
    static final String DFA11_maxS =
        "\1\u00ae\6\41\2\uffff\6\0";
    static final String DFA11_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA11_specialS =
        "\11\uffff\1\4\1\1\1\0\1\2\1\3\1\5}>";
    static final String[] DFA11_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\22\7"+
            "\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\2"+
            "\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7\2\uffff\4"+
            "\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10\uffff\4"+
            "\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\107\uffff";
    static final String DFA12_eofS =
        "\1\1\106\uffff";
    static final String DFA12_minS =
        "\1\42\1\uffff\101\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00ae\1\uffff\101\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\101\uffff\1\1\1\2\1\4\1\3";
    static final String DFA12_specialS =
        "\2\uffff\1\73\1\23\1\47\1\52\1\37\1\24\1\33\1\41\1\36\1\61\1\74"+
        "\1\55\1\45\1\34\1\53\1\27\1\21\1\17\1\32\1\72\1\22\1\1\1\0\1\6\1"+
        "\12\1\64\1\60\1\70\1\40\1\15\1\42\1\100\1\46\1\43\1\75\1\13\1\65"+
        "\1\44\1\26\1\66\1\54\1\5\1\31\1\50\1\25\1\51\1\77\1\14\1\63\1\20"+
        "\1\56\1\4\1\62\1\3\1\16\1\10\1\30\1\7\1\57\1\2\1\71\1\76\1\67\1"+
        "\35\1\11\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\15\1\6\1\10\1\102\1\35\1\40\1\1\1\7\1\17\20\1\1\26\1\36"+
            "\1\1\1\46\1\14\1\37\1\41\1\55\1\25\1\42\1\43\1\44\1\45\1\23"+
            "\1\47\1\50\1\51\1\52\1\53\1\34\1\16\4\1\1\24\1\60\11\1\1\30"+
            "\1\1\1\54\4\1\1\62\1\1\1\63\1\1\1\64\5\1\1\65\1\1\1\56\3\1\1"+
            "\66\1\1\1\33\1\57\3\1\1\31\2\1\1\2\5\1\1\61\2\1\1\12\2\1\1\13"+
            "\1\22\1\74\1\67\1\1\1\3\1\4\1\5\1\77\1\1\1\27\1\32\1\11\1\100"+
            "\1\75\1\101\1\20\1\21\4\1\1\70\10\1\1\71\1\76\1\72\1\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 76:24: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\111\uffff";
    static final String DFA16_eofS =
        "\1\1\110\uffff";
    static final String DFA16_minS =
        "\1\42\1\uffff\106\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00ae\1\uffff\106\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\106\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\36\1\45\1\12\1\60\1\57\1\16\1\30\1\51\1\77\1\71\1\3"+
        "\1\27\1\35\1\32\1\100\1\103\1\6\1\25\1\43\1\42\1\52\1\65\1\11\1"+
        "\55\1\24\1\40\1\7\1\104\1\62\1\23\1\31\1\54\1\21\1\4\1\46\1\10\1"+
        "\26\1\5\1\102\1\20\1\41\1\34\1\13\1\75\1\63\1\1\1\105\1\74\1\73"+
        "\1\2\1\66\1\17\1\37\1\61\1\70\1\14\1\33\1\53\1\47\1\56\1\64\1\15"+
        "\1\101\1\72\1\44\1\22\1\50\1\0\1\67\1\76\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\22\1\11\1\13\1\107\1\42\1\45\1\1\1\12\1\33\20\1\1\27\1\43"+
            "\1\1\1\53\1\21\1\44\1\46\1\62\1\26\1\47\1\50\1\51\1\52\1\23"+
            "\1\54\1\55\1\56\1\57\1\60\1\41\1\25\4\1\1\24\1\65\11\1\1\31"+
            "\1\1\1\61\4\1\1\67\1\1\1\70\1\1\1\71\5\1\1\72\1\1\1\63\3\1\1"+
            "\73\1\1\1\40\1\64\3\1\1\36\2\1\1\15\5\1\1\66\2\1\1\17\1\1\1"+
            "\14\1\20\1\16\1\101\1\74\1\1\1\6\1\7\1\10\1\104\1\1\1\30\1\37"+
            "\1\32\1\105\1\102\1\106\1\34\1\35\1\2\1\3\1\5\1\4\1\75\10\1"+
            "\1\76\1\103\1\77\1\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA16_71 = input.LA(1);

                         
                        int index16_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_71);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA13_static {
    static final String DFA13_eotS =
        "\107\uffff";
    static final String DFA13_eofS =
        "\107\uffff";
    static final String DFA13_minS =
        "\1\42\17\uffff\1\0\66\uffff";
    static final String DFA13_maxS =
        "\1\u00ae\17\uffff\1\0\66\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA13_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\22\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff"+
            "\1\20\5\uffff\1\1\2\uffff\1\1\1\uffff\1\106\4\1\1\uffff\4\1"+
            "\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_static.DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_static.DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_static.DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_static.DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_static.DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_static.DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\42\6\41\2\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00ae\6\41\2\uffff\6\0";
    static final String DFA14_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\0\1\1\1\3\1\2\1\4\1\5}>";
    static final String[] DFA14_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\22\7"+
            "\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\2"+
            "\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7\2\uffff\4"+
            "\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10\uffff\4"+
            "\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\106\uffff";
    static final String DFA15_eofS =
        "\106\uffff";
    static final String DFA15_minS =
        "\1\42\101\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00ae\101\0\4\uffff";
    static final String DFA15_acceptS =
        "\102\uffff\1\1\1\2\1\4\1\3";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\13\1\4\1\6\1\101\1\34\1\37\1\uffff\1\5\1\16\20\uffff\1\25"+
            "\1\35\1\uffff\1\45\1\12\1\36\1\40\1\54\1\24\1\41\1\42\1\43\1"+
            "\44\1\22\1\46\1\47\1\50\1\51\1\52\1\33\1\15\4\uffff\1\23\1\57"+
            "\11\uffff\1\27\1\uffff\1\53\4\uffff\1\61\1\uffff\1\62\1\uffff"+
            "\1\63\5\uffff\1\64\1\uffff\1\55\3\uffff\1\65\1\uffff\1\32\1"+
            "\56\3\uffff\1\30\2\uffff\1\14\5\uffff\1\60\2\uffff\1\10\2\uffff"+
            "\1\11\1\21\1\73\1\66\1\uffff\1\1\1\2\1\3\1\76\1\uffff\1\26\1"+
            "\31\1\7\1\77\1\74\1\100\1\17\1\20\4\uffff\1\67\10\uffff\1\70"+
            "\1\75\1\71\1\72",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "76:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\21\uffff";
    static final String DFA18_eofS =
        "\1\17\20\uffff";
    static final String DFA18_minS =
        "\1\42\16\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00ae\16\0\2\uffff";
    static final String DFA18_acceptS =
        "\17\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\12\1\3\1\2\1\15\1\13\1\5\1\14\1\6\1\1\1\11\1\10\1\4"+
        "\1\0\1\7\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\13\1\4\1\6\4\17\1\5\1\16\24\17\1\12\17\17\1\15\60\17\1\14"+
            "\10\17\1\10\2\17\1\11\4\17\1\1\1\2\1\3\4\17\1\7\26\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "76:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\20\uffff";
    static final String DFA20_eofS =
        "\20\uffff";
    static final String DFA20_minS =
        "\1\42\7\uffff\1\0\7\uffff";
    static final String DFA20_maxS =
        "\1\u0098\7\uffff\1\0\7\uffff";
    static final String DFA20_acceptS =
        "\1\uffff\1\1\15\uffff\1\2";
    static final String DFA20_specialS =
        "\10\uffff\1\0\7\uffff}>";
    static final String[] DFA20_transitionS = {
            "\3\1\4\uffff\2\1\24\uffff\1\1\17\uffff\1\1\60\uffff\1\1\10"+
            "\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "78:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\17\uffff";
    static final String DFA21_eofS =
        "\17\uffff";
    static final String DFA21_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u0098\6\41\1\uffff\6\0\1\uffff";
    static final String DFA21_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA21_specialS =
        "\10\uffff\1\3\1\0\1\1\1\4\1\2\1\5\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\24\uffff\1\7\17\uffff\1\7\60\uffff"+
            "\1\7\10\uffff\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "81:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\17\uffff";
    static final String DFA22_eofS =
        "\17\uffff";
    static final String DFA22_minS =
        "\1\42\5\0\11\uffff";
    static final String DFA22_maxS =
        "\1\u0093\5\0\11\uffff";
    static final String DFA22_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\1\3";
    static final String DFA22_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\11\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\24\uffff\1\3\3\uffff\1\16\13\uffff"+
            "\1\6\60\uffff\1\5\10\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "81:14: ( molecule | unnamedmolecule | nnchementity )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index22_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA22_3 = input.LA(1);

                         
                        int index22_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index22_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA22_4 = input.LA(1);

                         
                        int index22_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index22_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA22_5 = input.LA(1);

                         
                        int index22_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index22_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\16\uffff";
    static final String DFA23_eofS =
        "\16\uffff";
    static final String DFA23_minS =
        "\1\42\5\0\10\uffff";
    static final String DFA23_maxS =
        "\1\u0093\5\0\10\uffff";
    static final String DFA23_acceptS =
        "\6\uffff\1\1\6\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\10\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\24\uffff\1\3\17\uffff\1\6\60\uffff"+
            "\1\5\10\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "81:56: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA26_static {
    static final String DFA26_eotS =
        "\17\uffff";
    static final String DFA26_eofS =
        "\17\uffff";
    static final String DFA26_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u0098\6\41\1\uffff\6\0\1\uffff";
    static final String DFA26_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA26_specialS =
        "\10\uffff\1\5\1\1\1\4\1\3\1\2\1\0\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\24\uffff\1\7\17\uffff\1\7\60\uffff"+
            "\1\7\10\uffff\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_static.DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_static.DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_static.DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_static.DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_static.DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_static.DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "81:97: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA28_static {
    static final String DFA28_eotS =
        "\16\uffff";
    static final String DFA28_eofS =
        "\16\uffff";
    static final String DFA28_minS =
        "\1\42\5\0\10\uffff";
    static final String DFA28_maxS =
        "\1\u0093\5\0\10\uffff";
    static final String DFA28_acceptS =
        "\6\uffff\1\1\6\uffff\1\2";
    static final String DFA28_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\10\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\24\uffff\1\3\17\uffff\1\6\60\uffff"+
            "\1\5\10\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_static.DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_static.DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_static.DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_static.DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_static.DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_static.DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "81:107: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA28_1 = input.LA(1);

                         
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA28_2 = input.LA(1);

                         
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA28_3 = input.LA(1);

                         
                        int index28_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA28_4 = input.LA(1);

                         
                        int index28_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA28_5 = input.LA(1);

                         
                        int index28_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\67\uffff";
    static final String DFA45_eofS =
        "\1\1\66\uffff";
    static final String DFA45_minS =
        "\1\42\1\uffff\64\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00ae\1\uffff\64\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA45_specialS =
        "\2\uffff\1\14\1\52\1\24\1\26\1\56\1\41\1\50\1\15\1\42\1\3\1\45"+
        "\1\54\1\35\1\7\1\6\1\32\1\47\1\60\1\17\1\27\1\0\1\43\1\33\1\51\1"+
        "\53\1\1\1\30\1\22\1\2\1\55\1\31\1\46\1\5\1\37\1\4\1\36\1\63\1\20"+
        "\1\57\1\21\1\34\1\62\1\12\1\44\1\13\1\25\1\40\1\11\1\61\1\10\1\23"+
        "\1\16\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\46\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\22\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()+ loopback of 88:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_22 = input.LA(1);

                         
                        int index45_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_27 = input.LA(1);

                         
                        int index45_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_27);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_30 = input.LA(1);

                         
                        int index45_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_30);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_11 = input.LA(1);

                         
                        int index45_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA45_36 = input.LA(1);

                         
                        int index45_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_36);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA45_34 = input.LA(1);

                         
                        int index45_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_34);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA45_16 = input.LA(1);

                         
                        int index45_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA45_15 = input.LA(1);

                         
                        int index45_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA45_51 = input.LA(1);

                         
                        int index45_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA45_49 = input.LA(1);

                         
                        int index45_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA45_44 = input.LA(1);

                         
                        int index45_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_44);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA45_46 = input.LA(1);

                         
                        int index45_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_46);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA45_2 = input.LA(1);

                         
                        int index45_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_2);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA45_53 = input.LA(1);

                         
                        int index45_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_53);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA45_20 = input.LA(1);

                         
                        int index45_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_20);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA45_39 = input.LA(1);

                         
                        int index45_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_39);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA45_41 = input.LA(1);

                         
                        int index45_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_41);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA45_29 = input.LA(1);

                         
                        int index45_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA45_52 = input.LA(1);

                         
                        int index45_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_52);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA45_4 = input.LA(1);

                         
                        int index45_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_4);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA45_47 = input.LA(1);

                         
                        int index45_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_47);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA45_5 = input.LA(1);

                         
                        int index45_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_5);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA45_21 = input.LA(1);

                         
                        int index45_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_21);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA45_28 = input.LA(1);

                         
                        int index45_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_28);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA45_32 = input.LA(1);

                         
                        int index45_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_32);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA45_17 = input.LA(1);

                         
                        int index45_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_17);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA45_24 = input.LA(1);

                         
                        int index45_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_24);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA45_42 = input.LA(1);

                         
                        int index45_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_42);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA45_14 = input.LA(1);

                         
                        int index45_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_14);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA45_37 = input.LA(1);

                         
                        int index45_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_37);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA45_35 = input.LA(1);

                         
                        int index45_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_35);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA45_48 = input.LA(1);

                         
                        int index45_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_48);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA45_10 = input.LA(1);

                         
                        int index45_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_10);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA45_23 = input.LA(1);

                         
                        int index45_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_23);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA45_45 = input.LA(1);

                         
                        int index45_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_45);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA45_12 = input.LA(1);

                         
                        int index45_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_12);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA45_33 = input.LA(1);

                         
                        int index45_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_33);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA45_18 = input.LA(1);

                         
                        int index45_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_18);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA45_25 = input.LA(1);

                         
                        int index45_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_25);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA45_3 = input.LA(1);

                         
                        int index45_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_3);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA45_26 = input.LA(1);

                         
                        int index45_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_26);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA45_13 = input.LA(1);

                         
                        int index45_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_13);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA45_31 = input.LA(1);

                         
                        int index45_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_31);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA45_40 = input.LA(1);

                         
                        int index45_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_40);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA45_19 = input.LA(1);

                         
                        int index45_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_19);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA45_50 = input.LA(1);

                         
                        int index45_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA45_43 = input.LA(1);

                         
                        int index45_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_43);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA45_38 = input.LA(1);

                         
                        int index45_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_38);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\53\uffff";
    static final String DFA40_eofS =
        "\1\1\52\uffff";
    static final String DFA40_minS =
        "\1\42\1\uffff\50\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00ae\1\uffff\50\0\1\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA40_specialS =
        "\2\uffff\1\20\1\33\1\11\1\46\1\7\1\34\1\31\1\0\1\4\1\23\1\6\1\16"+
        "\1\24\1\13\1\21\1\40\1\17\1\44\1\22\1\42\1\47\1\35\1\41\1\30\1\36"+
        "\1\37\1\14\1\12\1\45\1\26\1\2\1\3\1\5\1\25\1\10\1\1\1\43\1\15\1"+
        "\32\1\27\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\56\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\50\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 88:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\1\1\12\uffff";
    static final String DFA42_minS =
        "\1\42\1\uffff\4\41\4\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00ae\1\uffff\4\41\4\0\1\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA42_specialS =
        "\6\uffff\1\0\1\3\1\2\1\1\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\174\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 88:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA43_static {
    static final String DFA43_eotS =
        "\17\uffff";
    static final String DFA43_eofS =
        "\1\7\16\uffff";
    static final String DFA43_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA43_maxS =
        "\1\u00ae\6\41\1\uffff\6\0\1\uffff";
    static final String DFA43_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA43_specialS =
        "\10\uffff\1\3\1\5\1\0\1\1\1\4\1\2\1\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\147\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_static.DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_static.DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_static.DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_static.DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_static.DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_static.DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "88:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_11 = input.LA(1);

                         
                        int index43_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_13 = input.LA(1);

                         
                        int index43_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0090\uffff";
    static final String DFA49_eofS =
        "\1\13\u008f\uffff";
    static final String DFA49_minS =
        "\1\42\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\23\uffff\1\0\3\uffff"+
        "\1\0\40\uffff\22\0\50\uffff\1\0\11\uffff";
    static final String DFA49_maxS =
        "\1\u00ae\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\23\uffff\1\0"+
        "\3\uffff\1\0\40\uffff\22\0\50\uffff\1\0\11\uffff";
    static final String DFA49_acceptS =
        "\13\uffff\1\2\u0083\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\3\uffff\1\14\1\uffff\1\15\23\uffff\1\16\3\uffff\1\17\40\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\11\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\117\1\120\1\116\1\124\1\125"+
            "\1\134\1\135\1\121\1\133\1\126\1\130\1\122\1\123\1\132\1\131"+
            "\1\127\1\13\1\47\7\13\1\53\73\13\1\15\1\13\1\u0086\10\13\1\14"+
            "\1\23\1\21\2\13\1\115\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\114\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 88:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_17 = input.LA(1);

                         
                        int index49_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_19 = input.LA(1);

                         
                        int index49_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_39 = input.LA(1);

                         
                        int index49_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_39);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_43 = input.LA(1);

                         
                        int index49_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_43);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_76 = input.LA(1);

                         
                        int index49_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_76);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_86);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_87);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_88);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_89);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_90);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_91);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_92);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA49_93 = input.LA(1);

                         
                        int index49_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_93);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA49_134 = input.LA(1);

                         
                        int index49_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_134);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA50_static {
    static final String DFA50_eotS =
        "\60\uffff";
    static final String DFA50_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA50_minS =
        "\1\120\11\uffff\1\41\36\uffff\1\42\1\uffff\1\41\1\42\1\41\1\0\1"+
        "\uffff";
    static final String DFA50_maxS =
        "\1\u00aa\11\uffff\1\41\36\uffff\1\u00ae\1\uffff\1\41\1\u00ae\1"+
        "\41\1\0\1\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA50_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\50\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\151\52\1\53\43\52",
            "",
            "\1\54",
            "\71\52\1\55\123\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_static.DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_static.DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_static.DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_static.DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_static.DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_static.DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "89:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA50_46 = input.LA(1);

                         
                        int index50_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index50_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\121\uffff";
    static final String DFA54_eofS =
        "\121\uffff";
    static final String DFA54_minS =
        "\1\42\2\uffff\14\0\1\uffff\5\0\74\uffff";
    static final String DFA54_maxS =
        "\1\u00ae\2\uffff\14\0\1\uffff\5\0\74\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\1\2\14\uffff\1\6\6\uffff\1\10\1\11\1\14\1\15\1\17"+
        "\1\20\1\23\1\24\1\25\1\26\1\27\1\33\1\34\1\35\1\36\1\37\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\5\uffff\1\66\1\67\1\70\1\71\1\3\1\5\1\7\1\30"+
        "\1\56\1\4\1\21\1\22\1\32\1\55\1\40\1\16\1\31\1\12\1\13";
    static final String DFA54_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\uffff\1\14\1\15\1\16\1\17\1\20\74\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\7\1\13\1\15\1\101\1\34\1\37\1\uffff\1\14\1\26\20\uffff\1"+
            "\23\1\35\1\uffff\1\45\1\6\1\36\1\40\1\54\1\22\1\41\1\42\1\43"+
            "\1\44\1\20\1\46\1\47\1\50\1\51\1\52\1\33\1\16\4\uffff\1\21\1"+
            "\57\11\uffff\1\17\1\uffff\1\53\4\uffff\1\61\1\uffff\1\62\1\uffff"+
            "\1\63\5\uffff\1\64\1\uffff\1\55\3\uffff\1\65\1\uffff\1\32\1"+
            "\56\3\uffff\1\27\2\uffff\1\4\5\uffff\1\60\2\uffff\1\3\2\uffff"+
            "\1\5\1\17\1\70\1\66\1\uffff\1\10\1\11\1\12\1\76\1\uffff\1\24"+
            "\1\30\1\31\1\77\1\70\1\100\1\1\1\2\4\uffff\1\67\10\uffff\4\70",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "97:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | amount | oscaronts | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | reference | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred221_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred221_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_16 = input.LA(1);

                         
                        int index54_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred208_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index54_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index54_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_19 = input.LA(1);

                         
                        int index54_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index54_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_20 = input.LA(1);

                         
                        int index54_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index54_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA59_static {
    static final String DFA59_eotS =
        "\13\uffff";
    static final String DFA59_eofS =
        "\13\uffff";
    static final String DFA59_minS =
        "\1\42\1\41\1\uffff\1\43\2\41\1\42\1\0\1\41\1\uffff\1\0";
    static final String DFA59_maxS =
        "\1\u00ae\1\41\1\uffff\1\u0096\2\41\1\u00ae\1\0\1\41\1\uffff\1\0";
    static final String DFA59_acceptS =
        "\2\uffff\1\2\6\uffff\1\1\1\uffff";
    static final String DFA59_specialS =
        "\7\uffff\1\1\2\uffff\1\0}>";
    static final String[] DFA59_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\2\2\1\uffff\22\2\4\uffff\2\2\11\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff\1\2\2\uffff"+
            "\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\1\3\2\1\uffff\4\2\1\uffff"+
            "\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\3",
            "",
            "\2\2\3\uffff\2\2\23\uffff\3\2\2\uffff\1\2\11\uffff\1\2\62"+
            "\uffff\1\4\3\uffff\1\2\1\uffff\1\2\6\uffff\1\5\4\uffff\3\2\2"+
            "\uffff\1\2",
            "\1\6",
            "\1\7",
            "\1\10\5\2\1\uffff\2\2\20\uffff\2\2\1\uffff\22\2\4\uffff\2"+
            "\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\4\2\1\uffff"+
            "\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\uffff",
            "\1\12",
            "",
            "\1\uffff"
    };
    }

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_static.DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_static.DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_static.DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_static.DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_static.DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_static.DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_static.DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_static.DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "103:9: ( numberratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA59_7 = input.LA(1);

                         
                        int index59_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index59_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA60_static {
    static final String DFA60_eotS =
        "\12\uffff";
    static final String DFA60_eofS =
        "\1\1\4\uffff\1\1\4\uffff";
    static final String DFA60_minS =
        "\1\42\1\uffff\2\41\1\0\1\42\1\uffff\1\41\1\0\1\uffff";
    static final String DFA60_maxS =
        "\1\u00ae\1\uffff\2\41\1\0\1\u00ae\1\uffff\1\41\1\0\1\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\3\4\uffff\1\2\2\uffff\1\1";
    static final String DFA60_specialS =
        "\4\uffff\1\1\3\uffff\1\0\1\uffff}>";
    static final String[] DFA60_transitionS = {
            "\135\1\1\3\14\1\1\2\42\1",
            "",
            "\1\4",
            "\1\5",
            "\1\uffff",
            "\1\7\u008c\1",
            "",
            "\1\10",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_static.DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_static.DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_static.DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_static.DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_static.DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_static.DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_static.DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_static.DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()+ loopback of 104:19: ( colon cdAlphanum | cd )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA60_8 = input.LA(1);

                         
                        int index60_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA60_4 = input.LA(1);

                         
                        int index60_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA68_static {
    static final String DFA68_eotS =
        "\u008e\uffff";
    static final String DFA68_eofS =
        "\u008e\uffff";
    static final String DFA68_minS =
        "\1\42\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff\1\0\60"+
        "\uffff\1\0\40\uffff";
    static final String DFA68_maxS =
        "\1\u00ae\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff\1\0"+
        "\60\uffff\1\0\40\uffff";
    static final String DFA68_acceptS =
        "\2\uffff\1\2\53\uffff\1\5\1\6\13\uffff\1\13\1\uffff\1\16\60\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\3\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA68_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\uffff\1\21\60"+
        "\uffff\1\22\40\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\55\1\64\1\66\3\75\1\uffff\1\65\1\72\11\156\1\155\6\156\2"+
            "\75\1\uffff\1\75\1\54\17\75\1\67\4\2\2\75\11\2\1\75\1\2\1\75"+
            "\4\2\1\75\1\2\1\75\1\2\1\75\5\2\1\75\1\2\1\75\3\2\1\75\1\2\1"+
            "\45\1\75\3\2\1\75\1\uffff\1\177\1\71\2\uffff\1\73\1\60\1\57"+
            "\1\75\2\uffff\1\70\2\uffff\1\53\2\75\1\1\1\156\1\61\1\62\1\63"+
            "\1\75\1\56\1\52\7\75\4\uffff\1\74\1\156\1\uffff\6\2\4\75",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_static.DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_static.DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_static.DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_static.DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_static.DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_static.DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_static.DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_static.DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "124:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA68_1 = input.LA(1);

                         
                        int index68_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA68_37 = input.LA(1);

                         
                        int index68_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA68_42 = input.LA(1);

                         
                        int index68_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA68_43 = input.LA(1);

                         
                        int index68_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred267_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred271_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index68_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA68_44 = input.LA(1);

                         
                        int index68_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA68_45 = input.LA(1);

                         
                        int index68_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA68_48 = input.LA(1);

                         
                        int index68_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 136;}

                         
                        input.seek(index68_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA68_49 = input.LA(1);

                         
                        int index68_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index68_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA68_50 = input.LA(1);

                         
                        int index68_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index68_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA68_51 = input.LA(1);

                         
                        int index68_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index68_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA68_52 = input.LA(1);

                         
                        int index68_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index68_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA68_53 = input.LA(1);

                         
                        int index68_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index68_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA68_54 = input.LA(1);

                         
                        int index68_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred273_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index68_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA68_55 = input.LA(1);

                         
                        int index68_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA68_56 = input.LA(1);

                         
                        int index68_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA68_57 = input.LA(1);

                         
                        int index68_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred272_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index68_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA68_58 = input.LA(1);

                         
                        int index68_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA68_60 = input.LA(1);

                         
                        int index68_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index68_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA68_109 = input.LA(1);

                         
                        int index68_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred270_ChemicalChunker()) ) {s = 110;}

                         
                        input.seek(index68_109);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA69_static {
    static final String DFA69_eotS =
        "\u0090\uffff";
    static final String DFA69_eofS =
        "\u0090\uffff";
    static final String DFA69_minS =
        "\1\42\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\11\0\1\uffff"+
        "\1\0\60\uffff\1\0\41\uffff";
    static final String DFA69_maxS =
        "\1\u00ae\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\11\0\1\uffff"+
        "\1\0\60\uffff\1\0\41\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\27\3\uffff\1\3\53\uffff\1\6\1\7\11\uffff\1\14\1\uffff"+
        "\1\17\60\uffff\1\21\20\uffff\1\25\1\1\1\12\1\13\1\23\1\11\1\2\1"+
        "\4\1\16\1\22\1\5\1\10\1\26\1\24\1\15\1\20";
    static final String DFA69_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\uffff\1\21\60\uffff"+
        "\1\22\41\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\57\1\67\1\71\3\76\1\uffff\1\70\1\73\11\157\1\156\6\157\2"+
            "\76\1\uffff\1\76\1\56\17\76\1\72\4\5\2\76\11\5\1\76\1\5\1\76"+
            "\4\5\1\76\1\5\1\76\1\5\1\76\5\5\1\76\1\5\1\76\3\5\1\76\1\5\1"+
            "\50\1\76\3\5\1\60\1\uffff\1\u0080\1\2\2\uffff\1\74\1\63\1\62"+
            "\1\76\2\uffff\1\3\1\1\1\uffff\1\55\2\76\1\4\1\157\1\64\1\65"+
            "\1\66\1\76\1\61\10\76\4\uffff\1\75\1\157\1\uffff\6\5\4\76",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_static.DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_static.DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_static.DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_static.DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_static.DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_static.DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()+ loopback of 124:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA69_2 = input.LA(1);

                         
                        int index69_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index69_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA69_3 = input.LA(1);

                         
                        int index69_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA69_4 = input.LA(1);

                         
                        int index69_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA69_40 = input.LA(1);

                         
                        int index69_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA69_45 = input.LA(1);

                         
                        int index69_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index69_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA69_46 = input.LA(1);

                         
                        int index69_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA69_47 = input.LA(1);

                         
                        int index69_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA69_48 = input.LA(1);

                         
                        int index69_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA69_51 = input.LA(1);

                         
                        int index69_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred296_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index69_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA69_52 = input.LA(1);

                         
                        int index69_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index69_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA69_53 = input.LA(1);

                         
                        int index69_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index69_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA69_54 = input.LA(1);

                         
                        int index69_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index69_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA69_55 = input.LA(1);

                         
                        int index69_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index69_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA69_56 = input.LA(1);

                         
                        int index69_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index69_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA69_57 = input.LA(1);

                         
                        int index69_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index69_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA69_58 = input.LA(1);

                         
                        int index69_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA69_59 = input.LA(1);

                         
                        int index69_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA69_61 = input.LA(1);

                         
                        int index69_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index69_61);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA69_110 = input.LA(1);

                         
                        int index69_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred291_ChemicalChunker()) ) {s = 111;}

                         
                        input.seek(index69_110);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA71_static {
    static final String DFA71_eotS =
        "\u008e\uffff";
    static final String DFA71_eofS =
        "\u008e\uffff";
    static final String DFA71_minS =
        "\1\42\2\0\43\uffff\1\0\4\uffff\3\0\2\uffff\13\0\1\uffff\1\0\60"+
        "\uffff\1\0\40\uffff";
    static final String DFA71_maxS =
        "\1\u00ae\2\0\43\uffff\1\0\4\uffff\3\0\2\uffff\13\0\1\uffff\1\0"+
        "\60\uffff\1\0\40\uffff";
    static final String DFA71_acceptS =
        "\3\uffff\1\3\52\uffff\1\5\1\6\13\uffff\1\13\1\uffff\1\16\60\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\2\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA71_specialS =
        "\1\uffff\1\0\1\1\43\uffff\1\2\4\uffff\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\uffff\1\21\60"+
        "\uffff\1\22\40\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\55\1\64\1\66\3\75\1\uffff\1\65\1\72\11\156\1\155\6\156\2"+
            "\75\1\uffff\1\75\1\54\17\75\1\67\4\3\2\75\11\3\1\75\1\3\1\75"+
            "\4\3\1\75\1\3\1\75\1\3\1\75\5\3\1\75\1\3\1\75\3\3\1\75\1\3\1"+
            "\46\1\75\3\3\1\75\1\uffff\1\177\1\71\2\uffff\1\73\1\60\1\56"+
            "\1\75\2\uffff\1\70\2\uffff\1\53\2\75\1\1\1\156\1\61\1\62\1\63"+
            "\1\75\1\57\1\2\7\75\4\uffff\1\74\1\156\1\uffff\6\3\4\75",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_static.DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_static.DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_static.DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_static.DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_static.DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_static.DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_static.DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_static.DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "129:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA71_2 = input.LA(1);

                         
                        int index71_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA71_38 = input.LA(1);

                         
                        int index71_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_38);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA71_43 = input.LA(1);

                         
                        int index71_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred314_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index71_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA71_44 = input.LA(1);

                         
                        int index71_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA71_45 = input.LA(1);

                         
                        int index71_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA71_48 = input.LA(1);

                         
                        int index71_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 136;}

                         
                        input.seek(index71_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA71_49 = input.LA(1);

                         
                        int index71_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index71_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA71_50 = input.LA(1);

                         
                        int index71_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index71_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA71_51 = input.LA(1);

                         
                        int index71_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index71_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA71_52 = input.LA(1);

                         
                        int index71_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index71_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA71_53 = input.LA(1);

                         
                        int index71_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index71_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA71_54 = input.LA(1);

                         
                        int index71_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index71_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA71_55 = input.LA(1);

                         
                        int index71_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA71_56 = input.LA(1);

                         
                        int index71_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA71_57 = input.LA(1);

                         
                        int index71_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index71_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA71_58 = input.LA(1);

                         
                        int index71_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA71_60 = input.LA(1);

                         
                        int index71_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index71_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA71_109 = input.LA(1);

                         
                        int index71_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 110;}

                         
                        input.seek(index71_109);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA72_static {
    static final String DFA72_eotS =
        "\u008f\uffff";
    static final String DFA72_eofS =
        "\1\1\u008e\uffff";
    static final String DFA72_minS =
        "\1\42\1\uffff\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\60\uffff\1\0\40\uffff";
    static final String DFA72_maxS =
        "\1\u00ae\1\uffff\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\60\uffff\1\0\40\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\26\1\uffff\1\2\53\uffff\1\5\1\6\13\uffff\1\13\1\uffff"+
        "\1\16\60\uffff\1\20\20\uffff\1\24\1\1\1\3\1\11\1\12\1\15\1\21\1"+
        "\4\1\7\1\25\1\10\1\23\1\22\1\14\1\17";
    static final String DFA72_specialS =
        "\2\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\uffff\1\21\60"+
        "\uffff\1\22\40\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\55\1\65\1\67\3\76\1\uffff\1\66\1\73\11\157\1\156\6\157\2"+
            "\76\1\uffff\1\76\1\54\17\76\1\70\4\3\2\76\11\3\1\76\1\3\1\76"+
            "\4\3\1\76\1\3\1\76\1\3\1\76\5\3\1\76\1\3\1\76\3\3\1\76\1\3\1"+
            "\46\1\76\3\3\1\56\1\uffff\1\u0080\1\72\2\uffff\1\74\1\61\1\57"+
            "\1\76\2\uffff\1\71\2\uffff\1\53\2\76\1\2\1\157\1\62\1\63\1\64"+
            "\1\76\1\60\10\76\4\uffff\1\75\1\157\1\uffff\6\3\4\76",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_static.DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_static.DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_static.DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_static.DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_static.DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_static.DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_static.DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_static.DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()+ loopback of 129:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA72_2 = input.LA(1);

                         
                        int index72_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA72_38 = input.LA(1);

                         
                        int index72_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_38);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA72_43 = input.LA(1);

                         
                        int index72_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred330_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index72_43);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA72_44 = input.LA(1);

                         
                        int index72_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_44);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA72_45 = input.LA(1);

                         
                        int index72_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA72_46 = input.LA(1);

                         
                        int index72_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA72_49 = input.LA(1);

                         
                        int index72_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred338_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index72_49);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA72_50 = input.LA(1);

                         
                        int index72_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index72_50);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA72_51 = input.LA(1);

                         
                        int index72_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index72_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA72_52 = input.LA(1);

                         
                        int index72_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index72_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA72_53 = input.LA(1);

                         
                        int index72_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index72_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA72_54 = input.LA(1);

                         
                        int index72_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index72_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA72_55 = input.LA(1);

                         
                        int index72_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index72_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA72_56 = input.LA(1);

                         
                        int index72_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA72_57 = input.LA(1);

                         
                        int index72_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA72_58 = input.LA(1);

                         
                        int index72_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred335_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index72_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA72_59 = input.LA(1);

                         
                        int index72_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA72_61 = input.LA(1);

                         
                        int index72_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index72_61);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA72_110 = input.LA(1);

                         
                        int index72_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred333_ChemicalChunker()) ) {s = 111;}

                         
                        input.seek(index72_110);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\45\uffff";
    static final String DFA76_eofS =
        "\45\uffff";
    static final String DFA76_minS =
        "\1\43\36\0\6\uffff";
    static final String DFA76_maxS =
        "\1\u00a3\36\0\6\uffff";
    static final String DFA76_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA76_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\107\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "137:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_1 = input.LA(1);

                         
                        int index76_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_2 = input.LA(1);

                         
                        int index76_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_3 = input.LA(1);

                         
                        int index76_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_4 = input.LA(1);

                         
                        int index76_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_5 = input.LA(1);

                         
                        int index76_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_6 = input.LA(1);

                         
                        int index76_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_7 = input.LA(1);

                         
                        int index76_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_11 = input.LA(1);

                         
                        int index76_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_12 = input.LA(1);

                         
                        int index76_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_13 = input.LA(1);

                         
                        int index76_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index76_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_14 = input.LA(1);

                         
                        int index76_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred352_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_15 = input.LA(1);

                         
                        int index76_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_16 = input.LA(1);

                         
                        int index76_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_17 = input.LA(1);

                         
                        int index76_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_18 = input.LA(1);

                         
                        int index76_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA76_19 = input.LA(1);

                         
                        int index76_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred351_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA76_20 = input.LA(1);

                         
                        int index76_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA76_21 = input.LA(1);

                         
                        int index76_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA76_22 = input.LA(1);

                         
                        int index76_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA76_23 = input.LA(1);

                         
                        int index76_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA76_24 = input.LA(1);

                         
                        int index76_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA76_25 = input.LA(1);

                         
                        int index76_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA76_26 = input.LA(1);

                         
                        int index76_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA76_27 = input.LA(1);

                         
                        int index76_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA76_28 = input.LA(1);

                         
                        int index76_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index76_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA76_29 = input.LA(1);

                         
                        int index76_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index76_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA76_30 = input.LA(1);

                         
                        int index76_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index76_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA80_static {
    static final String DFA80_eotS =
        "\27\uffff";
    static final String DFA80_eofS =
        "\27\uffff";
    static final String DFA80_minS =
        "\1\43\1\uffff\12\41\12\0\1\uffff";
    static final String DFA80_maxS =
        "\1\u00a3\1\uffff\12\41\12\0\1\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA80_specialS =
        "\14\uffff\1\3\1\5\1\6\1\2\1\7\1\11\1\10\1\4\1\1\1\0\1\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\117\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_static.DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_static.DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_static.DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_static.DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_static.DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_static.DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_static.DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_static.DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()* loopback of 149:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA80_21 = input.LA(1);

                         
                        int index80_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA80_20 = input.LA(1);

                         
                        int index80_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA80_15 = input.LA(1);

                         
                        int index80_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA80_12 = input.LA(1);

                         
                        int index80_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA80_19 = input.LA(1);

                         
                        int index80_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA80_13 = input.LA(1);

                         
                        int index80_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_13);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA80_14 = input.LA(1);

                         
                        int index80_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_14);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA80_16 = input.LA(1);

                         
                        int index80_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_16);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA80_18 = input.LA(1);

                         
                        int index80_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA80_17 = input.LA(1);

                         
                        int index80_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index80_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA88_static {
    static final String DFA88_eotS =
        "\17\uffff";
    static final String DFA88_eofS =
        "\17\uffff";
    static final String DFA88_minS =
        "\1\42\1\uffff\6\41\1\uffff\6\0";
    static final String DFA88_maxS =
        "\1\u00a1\1\uffff\6\41\1\uffff\6\0";
    static final String DFA88_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA88_specialS =
        "\11\uffff\1\1\1\3\1\4\1\5\1\2\1\0}>";
    static final String[] DFA88_transitionS = {
            "\1\1\1\5\1\7\4\uffff\1\6\25\uffff\1\1\17\uffff\1\1\60\uffff"+
            "\1\1\10\uffff\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4"+
            "\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_static.DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_static.DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_static.DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_static.DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_static.DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_static.DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()* loopback of 159:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA88_14 = input.LA(1);

                         
                        int index88_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA88_9 = input.LA(1);

                         
                        int index88_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA88_13 = input.LA(1);

                         
                        int index88_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA88_10 = input.LA(1);

                         
                        int index88_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA88_11 = input.LA(1);

                         
                        int index88_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA88_12 = input.LA(1);

                         
                        int index88_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA92_static {
    static final String DFA92_eotS =
        "\27\uffff";
    static final String DFA92_eofS =
        "\27\uffff";
    static final String DFA92_minS =
        "\1\43\12\41\1\uffff\12\0\1\uffff";
    static final String DFA92_maxS =
        "\1\u00a3\12\41\1\uffff\12\0\1\uffff";
    static final String DFA92_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA92_specialS =
        "\14\uffff\1\1\1\11\1\6\1\3\1\10\1\4\1\2\1\0\1\7\1\5\1\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\107\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_static.DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_static.DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_static.DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_static.DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_static.DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_static.DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "167:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA92_12 = input.LA(1);

                         
                        int index92_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA92_21 = input.LA(1);

                         
                        int index92_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_21);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_14);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA92_20 = input.LA(1);

                         
                        int index92_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index92_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA106_static {
    static final String DFA106_eotS =
        "\u0090\uffff";
    static final String DFA106_eofS =
        "\1\1\u008f\uffff";
    static final String DFA106_minS =
        "\1\42\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\163\uffff";
    static final String DFA106_maxS =
        "\1\u00ae\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\163\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\2\u008d\uffff\1\1";
    static final String DFA106_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\163\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\25\1\10\1\12\4\1\1\11\21\1\1\32\3\1\1\24\3\1\1\31\4\1\1"+
            "\26\6\1\1\30\4\1\1\27\12\1\1\34\40\1\1\15\10\1\1\22\1\1\1\14"+
            "\1\23\1\21\3\1\1\5\1\6\1\7\2\1\1\33\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_static.DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_static.DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_static.DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_static.DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_static.DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_static.DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "()* loopback of 184:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA106_5 = input.LA(1);

                         
                        int index106_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA106_6 = input.LA(1);

                         
                        int index106_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA106_7 = input.LA(1);

                         
                        int index106_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA106_8 = input.LA(1);

                         
                        int index106_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA106_9 = input.LA(1);

                         
                        int index106_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA106_10 = input.LA(1);

                         
                        int index106_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA106_12 = input.LA(1);

                         
                        int index106_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA106_13 = input.LA(1);

                         
                        int index106_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA106_17 = input.LA(1);

                         
                        int index106_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA106_18 = input.LA(1);

                         
                        int index106_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA106_19 = input.LA(1);

                         
                        int index106_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA106_20 = input.LA(1);

                         
                        int index106_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA106_21 = input.LA(1);

                         
                        int index106_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_21);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA106_22 = input.LA(1);

                         
                        int index106_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA106_23 = input.LA(1);

                         
                        int index106_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_23);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA106_24 = input.LA(1);

                         
                        int index106_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_24);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA106_25 = input.LA(1);

                         
                        int index106_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA106_26 = input.LA(1);

                         
                        int index106_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA106_27 = input.LA(1);

                         
                        int index106_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_27);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA106_28 = input.LA(1);

                         
                        int index106_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred413_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\25\uffff";
    static final String DFA105_eofS =
        "\25\uffff";
    static final String DFA105_minS =
        "\1\42\15\uffff\1\0\6\uffff";
    static final String DFA105_maxS =
        "\1\u0096\15\uffff\1\0\6\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA105_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA105_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\3\uffff\1\1\3\uffff\1\1\4\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\10\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()* loopback of 184:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA105_14 = input.LA(1);

                         
                        int index105_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\33\uffff";
    static final String DFA112_eofS =
        "\1\1\32\uffff";
    static final String DFA112_minS =
        "\1\42\1\uffff\21\0\10\uffff";
    static final String DFA112_maxS =
        "\1\u0096\1\uffff\21\0\10\uffff";
    static final String DFA112_acceptS =
        "\1\uffff\1\11\21\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA112_specialS =
        "\2\uffff\1\6\1\7\1\2\1\15\1\3\1\0\1\17\1\14\1\11\1\20\1\16\1\12"+
        "\1\4\1\13\1\1\1\10\1\5\10\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\5\1\11\1\13\4\uffff\1\12\21\uffff\1\21\3\uffff\1\4\3\uffff"+
            "\1\20\4\uffff\1\14\6\uffff\1\17\4\uffff\1\15\12\uffff\1\1\40"+
            "\uffff\1\16\10\uffff\1\2\2\uffff\1\3\4\uffff\1\6\1\7\1\10\2"+
            "\uffff\1\22",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()+ loopback of 191:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_16 = input.LA(1);

                         
                        int index112_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA112_14 = input.LA(1);

                         
                        int index112_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA112_18 = input.LA(1);

                         
                        int index112_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred426_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA112_2 = input.LA(1);

                         
                        int index112_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_2);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA112_17 = input.LA(1);

                         
                        int index112_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA112_13 = input.LA(1);

                         
                        int index112_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_15);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA112_12 = input.LA(1);

                         
                        int index112_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_12);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA112_11 = input.LA(1);

                         
                        int index112_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\u0090\uffff";
    static final String DFA116_eofS =
        "\1\4\u008f\uffff";
    static final String DFA116_minS =
        "\1\42\3\0\u008c\uffff";
    static final String DFA116_maxS =
        "\1\u00ae\3\0\u008c\uffff";
    static final String DFA116_acceptS =
        "\4\uffff\1\2\u008a\uffff\1\1";
    static final String DFA116_specialS =
        "\1\uffff\1\0\1\1\1\2\u008c\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\3\34\4\1\2\114\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "194:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA116_2 = input.LA(1);

                         
                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA116_3 = input.LA(1);

                         
                        int index116_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index116_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\23\uffff";
    static final String DFA117_eofS =
        "\16\uffff\1\20\4\uffff";
    static final String DFA117_minS =
        "\1\42\1\41\1\uffff\1\41\1\75\1\u0085\3\41\3\uffff\1\75\1\u0085"+
        "\1\42\1\41\1\uffff\1\0\1\uffff";
    static final String DFA117_maxS =
        "\1\u008c\1\41\1\uffff\1\41\2\u0096\3\41\3\uffff\1\u008c\1\u0085"+
        "\1\u00ae\1\41\1\uffff\1\0\1\uffff";
    static final String DFA117_acceptS =
        "\2\uffff\1\1\6\uffff\1\2\1\3\1\4\4\uffff\1\6\1\uffff\1\5";
    static final String DFA117_specialS =
        "\21\uffff\1\0\1\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\3\34\uffff\1\2\114\uffff\1\1",
            "\1\4",
            "",
            "\1\5",
            "\1\12\1\11\1\2\2\uffff\1\13\102\uffff\1\10\6\uffff\1\6\11"+
            "\uffff\1\7",
            "\1\10\20\uffff\1\7",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "",
            "\1\12\1\11\1\2\2\uffff\1\13\111\uffff\1\6",
            "\1\10",
            "\133\20\1\17\61\20",
            "\1\21",
            "",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "195:1: measurementtypes : ( molar | amount | mass | volume | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_17 = input.LA(1);

                         
                        int index117_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA120_static {
    static final String DFA120_eotS =
        "\16\uffff";
    static final String DFA120_eofS =
        "\3\uffff\1\4\12\uffff";
    static final String DFA120_minS =
        "\1\117\1\41\1\uffff\1\42\1\uffff\3\41\1\117\2\0\3\uffff";
    static final String DFA120_maxS =
        "\1\u0089\1\41\1\uffff\1\u00ae\1\uffff\3\41\1\117\2\0\3\uffff";
    static final String DFA120_acceptS =
        "\2\uffff\1\4\1\uffff\1\5\6\uffff\1\2\1\3\1\1";
    static final String DFA120_specialS =
        "\10\uffff\1\1\1\2\1\0\3\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\1\71\uffff\1\2",
            "\1\3",
            "",
            "\55\4\1\6\61\4\1\7\1\4\1\5\53\4",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_static.DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_static.DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_static.DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_static.DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_static.DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_static.DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "201:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA120_10 = input.LA(1);

                         
                        int index120_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index120_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA120_8 = input.LA(1);

                         
                        int index120_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA120_8==79) ) {s = 11;}

                        else if ( (synpred440_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index120_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA120_9 = input.LA(1);

                         
                        int index120_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred438_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index120_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\17\uffff";
    static final String DFA121_eofS =
        "\1\7\16\uffff";
    static final String DFA121_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA121_maxS =
        "\1\u00ae\6\41\1\uffff\6\0\1\uffff";
    static final String DFA121_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA121_specialS =
        "\10\uffff\1\5\1\3\1\4\1\1\1\0\1\2\1\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\147\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "201:93: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_12 = input.LA(1);

                         
                        int index121_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index121_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA121_11 = input.LA(1);

                         
                        int index121_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index121_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA121_13 = input.LA(1);

                         
                        int index121_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index121_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\u0090\uffff";
    static final String DFA128_eofS =
        "\1\4\u008f\uffff";
    static final String DFA128_minS =
        "\1\42\3\0\u008c\uffff";
    static final String DFA128_maxS =
        "\1\u00ae\3\0\u008c\uffff";
    static final String DFA128_acceptS =
        "\4\uffff\1\2\u008a\uffff\1\1";
    static final String DFA128_specialS =
        "\1\uffff\1\0\1\1\1\2\u008c\uffff}>";
    static final String[] DFA128_transitionS = {
            "\136\4\1\3\10\4\1\2\2\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "217:42: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_1 = input.LA(1);

                         
                        int index128_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index128_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA128_2 = input.LA(1);

                         
                        int index128_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index128_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA128_3 = input.LA(1);

                         
                        int index128_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index128_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA129_static {
    static final String DFA129_eotS =
        "\15\uffff";
    static final String DFA129_eofS =
        "\15\uffff";
    static final String DFA129_minS =
        "\1\42\7\uffff\2\0\3\uffff";
    static final String DFA129_maxS =
        "\1\u0093\7\uffff\2\0\3\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\uffff\1\2";
    static final String DFA129_specialS =
        "\10\uffff\1\0\1\1\3\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\12\2\1\4\uffff\1\1\25\uffff\1\12\17\uffff\1\1\60\uffff\1"+
            "\14\10\uffff\1\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_static.DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_static.DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_static.DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_static.DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_static.DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_static.DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "()* loopback of 220:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA129_8 = input.LA(1);

                         
                        int index129_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index129_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA129_9 = input.LA(1);

                         
                        int index129_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred452_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred453_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index129_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA130_static {
    static final String DFA130_eotS =
        "\13\uffff";
    static final String DFA130_eofS =
        "\1\2\12\uffff";
    static final String DFA130_minS =
        "\1\42\1\0\1\uffff\7\0\1\uffff";
    static final String DFA130_maxS =
        "\1\u00ae\1\0\1\uffff\7\0\1\uffff";
    static final String DFA130_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA130_specialS =
        "\1\uffff\1\7\1\uffff\1\3\1\5\1\2\1\0\1\1\1\4\1\6\1\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\45\2\1\11\71\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_static.DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_static.DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_static.DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_static.DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_static.DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_static.DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()+ loopback of 220:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA130_7 = input.LA(1);

                         
                        int index130_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA130_5 = input.LA(1);

                         
                        int index130_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA130_8 = input.LA(1);

                         
                        int index130_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_4);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA130_9 = input.LA(1);

                         
                        int index130_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index130_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA131_static {
    static final String DFA131_eotS =
        "\u0092\uffff";
    static final String DFA131_eofS =
        "\1\1\u0091\uffff";
    static final String DFA131_minS =
        "\1\42\2\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA131_maxS =
        "\1\u00ae\2\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\4\u008d\uffff\1\1\1\3\1\2";
    static final String DFA131_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\22\34\1\1\21\100\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_static.DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_static.DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_static.DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_static.DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_static.DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_static.DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "()* loopback of 220:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA131_3 = input.LA(1);

                         
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred455_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred457_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA131_15 = input.LA(1);

                         
                        int index131_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred455_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred456_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred457_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA131_16 = input.LA(1);

                         
                        int index131_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred456_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred457_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA131_17 = input.LA(1);

                         
                        int index131_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred456_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA131_18 = input.LA(1);

                         
                        int index131_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred456_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA134_static {
    static final String DFA134_eotS =
        "\17\uffff";
    static final String DFA134_eofS =
        "\17\uffff";
    static final String DFA134_minS =
        "\1\42\5\0\11\uffff";
    static final String DFA134_maxS =
        "\1\u0093\5\0\11\uffff";
    static final String DFA134_acceptS =
        "\6\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA134_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\11\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\4\2\6\4\uffff\1\6\25\uffff\1\3\17\uffff\1\6\60\uffff\1\5"+
            "\10\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_static.DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_static.DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_static.DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_static.DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_static.DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_static.DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "225:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred460_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred461_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA134_2 = input.LA(1);

                         
                        int index134_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred460_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred461_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index134_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA134_3 = input.LA(1);

                         
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred460_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred461_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA134_4 = input.LA(1);

                         
                        int index134_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred460_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred461_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index134_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA134_5 = input.LA(1);

                         
                        int index134_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred460_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred461_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index134_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA138_static {
    static final String DFA138_eotS =
        "\u0092\uffff";
    static final String DFA138_eofS =
        "\1\1\u0091\uffff";
    static final String DFA138_minS =
        "\1\42\2\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA138_maxS =
        "\1\u00ae\2\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\4\u008d\uffff\1\1\1\3\1\2";
    static final String DFA138_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\22\34\1\1\21\100\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_static.DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_static.DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_static.DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_static.DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_static.DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_static.DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()* loopback of 236:31: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA138_3 = input.LA(1);

                         
                        int index138_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred467_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA138_15 = input.LA(1);

                         
                        int index138_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred466_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred467_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA138_16 = input.LA(1);

                         
                        int index138_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred466_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred467_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA138_17 = input.LA(1);

                         
                        int index138_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred466_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA138_18 = input.LA(1);

                         
                        int index138_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred466_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA140_static {
    static final String DFA140_eotS =
        "\104\uffff";
    static final String DFA140_eofS =
        "\1\1\103\uffff";
    static final String DFA140_minS =
        "\1\42\1\uffff\101\0\1\uffff";
    static final String DFA140_maxS =
        "\1\u00ae\1\uffff\101\0\1\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA140_specialS =
        "\2\uffff\1\64\1\3\1\36\1\1\1\22\1\60\1\41\1\37\1\12\1\20\1\62\1"+
        "\42\1\46\1\27\1\43\1\7\1\55\1\63\1\31\1\17\1\72\1\35\1\40\1\100"+
        "\1\67\1\45\1\75\1\50\1\56\1\13\1\0\1\53\1\32\1\77\1\47\1\5\1\30"+
        "\1\21\1\26\1\76\1\2\1\51\1\14\1\70\1\57\1\11\1\24\1\25\1\52\1\66"+
        "\1\73\1\6\1\4\1\23\1\54\1\15\1\33\1\16\1\10\1\71\1\61\1\65\1\44"+
        "\1\34\1\74\1\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\15\1\6\1\10\1\102\1\35\1\40\1\1\1\7\1\17\20\1\1\26\1\36"+
            "\1\1\1\46\1\14\1\37\1\41\1\55\1\25\1\42\1\43\1\44\1\45\1\23"+
            "\1\47\1\50\1\51\1\52\1\53\1\34\1\16\4\1\1\24\1\60\11\1\1\30"+
            "\1\1\1\54\4\1\1\62\1\1\1\63\1\1\1\64\5\1\1\65\1\1\1\56\3\1\1"+
            "\66\1\1\1\33\1\57\3\1\1\31\2\1\1\2\5\1\1\61\2\1\1\12\2\1\1\13"+
            "\1\22\1\74\1\67\1\1\1\3\1\4\1\5\1\77\1\1\1\27\1\32\1\11\1\100"+
            "\1\75\1\101\1\20\1\21\4\1\1\70\10\1\1\71\1\76\1\72\1\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_static.DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_static.DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_static.DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_static.DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_static.DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_static.DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()+ loopback of 242:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA140_32 = input.LA(1);

                         
                        int index140_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_32);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA140_5 = input.LA(1);

                         
                        int index140_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA140_42 = input.LA(1);

                         
                        int index140_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA140_3 = input.LA(1);

                         
                        int index140_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_3);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA140_54 = input.LA(1);

                         
                        int index140_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_54);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA140_37 = input.LA(1);

                         
                        int index140_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_37);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA140_53 = input.LA(1);

                         
                        int index140_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_53);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA140_17 = input.LA(1);

                         
                        int index140_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_17);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA140_60 = input.LA(1);

                         
                        int index140_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_60);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA140_47 = input.LA(1);

                         
                        int index140_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_47);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA140_10 = input.LA(1);

                         
                        int index140_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_10);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA140_31 = input.LA(1);

                         
                        int index140_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_31);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA140_44 = input.LA(1);

                         
                        int index140_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_44);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA140_57 = input.LA(1);

                         
                        int index140_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_57);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA140_59 = input.LA(1);

                         
                        int index140_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_59);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA140_21 = input.LA(1);

                         
                        int index140_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_21);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA140_11 = input.LA(1);

                         
                        int index140_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_11);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA140_39 = input.LA(1);

                         
                        int index140_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_39);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA140_6 = input.LA(1);

                         
                        int index140_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_6);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA140_55 = input.LA(1);

                         
                        int index140_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_55);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA140_48 = input.LA(1);

                         
                        int index140_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_48);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA140_49 = input.LA(1);

                         
                        int index140_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_49);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA140_40 = input.LA(1);

                         
                        int index140_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_40);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA140_15 = input.LA(1);

                         
                        int index140_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_15);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA140_38 = input.LA(1);

                         
                        int index140_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_38);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA140_20 = input.LA(1);

                         
                        int index140_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_20);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA140_34 = input.LA(1);

                         
                        int index140_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_34);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA140_58 = input.LA(1);

                         
                        int index140_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_58);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA140_65 = input.LA(1);

                         
                        int index140_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_65);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA140_23 = input.LA(1);

                         
                        int index140_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_23);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA140_4 = input.LA(1);

                         
                        int index140_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_4);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA140_9 = input.LA(1);

                         
                        int index140_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_9);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA140_24 = input.LA(1);

                         
                        int index140_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_24);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA140_8 = input.LA(1);

                         
                        int index140_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_8);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA140_13 = input.LA(1);

                         
                        int index140_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_13);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA140_16 = input.LA(1);

                         
                        int index140_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_16);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA140_64 = input.LA(1);

                         
                        int index140_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_64);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA140_27 = input.LA(1);

                         
                        int index140_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_27);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA140_14 = input.LA(1);

                         
                        int index140_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_14);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA140_36 = input.LA(1);

                         
                        int index140_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_36);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA140_29 = input.LA(1);

                         
                        int index140_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_29);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA140_43 = input.LA(1);

                         
                        int index140_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_43);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA140_50 = input.LA(1);

                         
                        int index140_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_50);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA140_33 = input.LA(1);

                         
                        int index140_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_33);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA140_56 = input.LA(1);

                         
                        int index140_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_56);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA140_18 = input.LA(1);

                         
                        int index140_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_18);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA140_30 = input.LA(1);

                         
                        int index140_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_30);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA140_46 = input.LA(1);

                         
                        int index140_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_46);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA140_7 = input.LA(1);

                         
                        int index140_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_7);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA140_62 = input.LA(1);

                         
                        int index140_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_62);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA140_12 = input.LA(1);

                         
                        int index140_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_12);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA140_19 = input.LA(1);

                         
                        int index140_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_19);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA140_63 = input.LA(1);

                         
                        int index140_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_63);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA140_51 = input.LA(1);

                         
                        int index140_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_51);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA140_26 = input.LA(1);

                         
                        int index140_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_26);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA140_45 = input.LA(1);

                         
                        int index140_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_45);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA140_61 = input.LA(1);

                         
                        int index140_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_61);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA140_22 = input.LA(1);

                         
                        int index140_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_22);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA140_52 = input.LA(1);

                         
                        int index140_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_52);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA140_66 = input.LA(1);

                         
                        int index140_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_66);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA140_28 = input.LA(1);

                         
                        int index140_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_28);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA140_41 = input.LA(1);

                         
                        int index140_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_41);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA140_35 = input.LA(1);

                         
                        int index140_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_35);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA140_25 = input.LA(1);

                         
                        int index140_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred469_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index140_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA143_static {
    static final String DFA143_eotS =
        "\u0091\uffff";
    static final String DFA143_eofS =
        "\1\1\u0090\uffff";
    static final String DFA143_minS =
        "\1\42\2\uffff\1\0\13\uffff\4\0\176\uffff";
    static final String DFA143_maxS =
        "\1\u00ae\2\uffff\1\0\13\uffff\4\0\176\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\3\u008d\uffff\1\2\1\1";
    static final String DFA143_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\176\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\22\34\1\1\21\100\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_static.DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_static.DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_static.DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_static.DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_static.DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_static.DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()* loopback of 249:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred473_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA143_15 = input.LA(1);

                         
                        int index143_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred472_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred473_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA143_16 = input.LA(1);

                         
                        int index143_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred472_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred473_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA143_17 = input.LA(1);

                         
                        int index143_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred472_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA143_18 = input.LA(1);

                         
                        int index143_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred472_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA144_static {
    static final String DFA144_eotS =
        "\12\uffff";
    static final String DFA144_eofS =
        "\12\uffff";
    static final String DFA144_minS =
        "\1\42\1\uffff\4\0\4\uffff";
    static final String DFA144_maxS =
        "\1\u008c\1\uffff\4\0\4\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\4\uffff\1\5\1\2\1\3\1\4";
    static final String DFA144_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\4\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\5\7\uffff\1\1\24\uffff\1\4\100\uffff\1\6\10\uffff\1\2\2"+
            "\uffff\1\3",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_static.DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_static.DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_static.DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_static.DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_static.DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_static.DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "252:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA144_2 = input.LA(1);

                         
                        int index144_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred475_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred476_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred477_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index144_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred475_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred477_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA144_4 = input.LA(1);

                         
                        int index144_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred475_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred477_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index144_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA144_5 = input.LA(1);

                         
                        int index144_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred475_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred476_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred477_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index144_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA149_static {
    static final String DFA149_eotS =
        "\u0090\uffff";
    static final String DFA149_eofS =
        "\1\1\u008f\uffff";
    static final String DFA149_minS =
        "\1\42\2\uffff\1\0\u008c\uffff";
    static final String DFA149_maxS =
        "\1\u00ae\2\uffff\1\0\u008c\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\2\u008d\uffff\1\1";
    static final String DFA149_specialS =
        "\3\uffff\1\0\u008c\uffff}>";
    static final String[] DFA149_transitionS = {
            "\136\1\1\3\56\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_static.DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_static.DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_static.DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_static.DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_static.DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_static.DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "()* loopback of 262:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred482_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\107\uffff";
    static final String DFA153_eofS =
        "\107\uffff";
    static final String DFA153_minS =
        "\1\42\17\uffff\1\0\66\uffff";
    static final String DFA153_maxS =
        "\1\u00ae\17\uffff\1\0\66\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA153_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA153_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\22\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\2\uffff"+
            "\1\20\5\uffff\1\1\2\uffff\1\1\1\uffff\1\106\4\1\1\uffff\4\1"+
            "\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_16 = input.LA(1);

                         
                        int index153_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA154_static {
    static final String DFA154_eotS =
        "\17\uffff";
    static final String DFA154_eofS =
        "\17\uffff";
    static final String DFA154_minS =
        "\1\42\6\41\2\uffff\6\0";
    static final String DFA154_maxS =
        "\1\u00ae\6\41\2\uffff\6\0";
    static final String DFA154_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA154_specialS =
        "\11\uffff\1\0\1\3\1\5\1\1\1\4\1\2}>";
    static final String[] DFA154_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\22\7"+
            "\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\2"+
            "\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7\2\uffff\4"+
            "\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10\uffff\4"+
            "\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_static.DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_static.DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_static.DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_static.DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_static.DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_static.DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA154_9 = input.LA(1);

                         
                        int index154_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index154_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA154_12 = input.LA(1);

                         
                        int index154_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index154_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA154_14 = input.LA(1);

                         
                        int index154_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index154_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA154_10 = input.LA(1);

                         
                        int index154_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index154_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA154_13 = input.LA(1);

                         
                        int index154_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index154_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA154_11 = input.LA(1);

                         
                        int index154_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index154_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA155_static {
    static final String DFA155_eotS =
        "\106\uffff";
    static final String DFA155_eofS =
        "\106\uffff";
    static final String DFA155_minS =
        "\1\42\101\0\4\uffff";
    static final String DFA155_maxS =
        "\1\u00ae\101\0\4\uffff";
    static final String DFA155_acceptS =
        "\102\uffff\1\1\1\2\1\4\1\3";
    static final String DFA155_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\4\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\13\1\4\1\6\1\101\1\34\1\37\1\uffff\1\5\1\16\20\uffff\1\25"+
            "\1\35\1\uffff\1\45\1\12\1\36\1\40\1\54\1\24\1\41\1\42\1\43\1"+
            "\44\1\22\1\46\1\47\1\50\1\51\1\52\1\33\1\15\4\uffff\1\23\1\57"+
            "\11\uffff\1\27\1\uffff\1\53\4\uffff\1\61\1\uffff\1\62\1\uffff"+
            "\1\63\5\uffff\1\64\1\uffff\1\55\3\uffff\1\65\1\uffff\1\32\1"+
            "\56\3\uffff\1\30\2\uffff\1\14\5\uffff\1\60\2\uffff\1\10\2\uffff"+
            "\1\11\1\21\1\73\1\66\1\uffff\1\1\1\2\1\3\1\76\1\uffff\1\26\1"+
            "\31\1\7\1\77\1\74\1\100\1\17\1\20\4\uffff\1\67\10\uffff\1\70"+
            "\1\75\1\71\1\72",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_static.DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_static.DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_static.DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_static.DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_static.DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_static.DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "76:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA155_5 = input.LA(1);

                         
                        int index155_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA155_6 = input.LA(1);

                         
                        int index155_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA155_7 = input.LA(1);

                         
                        int index155_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA155_8 = input.LA(1);

                         
                        int index155_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA155_9 = input.LA(1);

                         
                        int index155_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA155_10 = input.LA(1);

                         
                        int index155_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA155_11 = input.LA(1);

                         
                        int index155_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA155_12 = input.LA(1);

                         
                        int index155_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA155_13 = input.LA(1);

                         
                        int index155_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA155_14 = input.LA(1);

                         
                        int index155_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA155_15 = input.LA(1);

                         
                        int index155_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA155_16 = input.LA(1);

                         
                        int index155_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA155_17 = input.LA(1);

                         
                        int index155_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA155_18 = input.LA(1);

                         
                        int index155_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA155_19 = input.LA(1);

                         
                        int index155_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA155_20 = input.LA(1);

                         
                        int index155_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA155_21 = input.LA(1);

                         
                        int index155_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA155_22 = input.LA(1);

                         
                        int index155_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA155_23 = input.LA(1);

                         
                        int index155_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA155_24 = input.LA(1);

                         
                        int index155_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA155_25 = input.LA(1);

                         
                        int index155_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA155_26 = input.LA(1);

                         
                        int index155_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA155_27 = input.LA(1);

                         
                        int index155_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA155_28 = input.LA(1);

                         
                        int index155_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA155_29 = input.LA(1);

                         
                        int index155_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA155_30 = input.LA(1);

                         
                        int index155_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA155_31 = input.LA(1);

                         
                        int index155_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA155_32 = input.LA(1);

                         
                        int index155_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA155_33 = input.LA(1);

                         
                        int index155_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA155_34 = input.LA(1);

                         
                        int index155_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA155_35 = input.LA(1);

                         
                        int index155_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA155_36 = input.LA(1);

                         
                        int index155_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA155_37 = input.LA(1);

                         
                        int index155_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA155_38 = input.LA(1);

                         
                        int index155_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA155_39 = input.LA(1);

                         
                        int index155_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA155_40 = input.LA(1);

                         
                        int index155_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA155_41 = input.LA(1);

                         
                        int index155_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA155_42 = input.LA(1);

                         
                        int index155_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA155_43 = input.LA(1);

                         
                        int index155_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA155_44 = input.LA(1);

                         
                        int index155_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA155_45 = input.LA(1);

                         
                        int index155_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA155_46 = input.LA(1);

                         
                        int index155_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA155_47 = input.LA(1);

                         
                        int index155_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA155_48 = input.LA(1);

                         
                        int index155_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA155_49 = input.LA(1);

                         
                        int index155_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA155_50 = input.LA(1);

                         
                        int index155_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA155_51 = input.LA(1);

                         
                        int index155_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA155_52 = input.LA(1);

                         
                        int index155_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA155_53 = input.LA(1);

                         
                        int index155_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA155_54 = input.LA(1);

                         
                        int index155_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA155_55 = input.LA(1);

                         
                        int index155_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA155_56 = input.LA(1);

                         
                        int index155_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA155_57 = input.LA(1);

                         
                        int index155_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA155_58 = input.LA(1);

                         
                        int index155_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA155_59 = input.LA(1);

                         
                        int index155_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA155_60 = input.LA(1);

                         
                        int index155_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA155_61 = input.LA(1);

                         
                        int index155_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA155_62 = input.LA(1);

                         
                        int index155_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA155_63 = input.LA(1);

                         
                        int index155_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA155_64 = input.LA(1);

                         
                        int index155_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA155_65 = input.LA(1);

                         
                        int index155_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index155_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA160_static {
    static final String DFA160_eotS =
        "\17\uffff";
    static final String DFA160_eofS =
        "\17\uffff";
    static final String DFA160_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA160_maxS =
        "\1\u0098\6\41\1\uffff\6\0\1\uffff";
    static final String DFA160_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA160_specialS =
        "\10\uffff\1\5\1\0\1\1\1\2\1\4\1\3\1\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\24\uffff\1\7\17\uffff\1\7\60\uffff"+
            "\1\7\10\uffff\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_static.DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_static.DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_static.DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_static.DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_static.DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_static.DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "81:97: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA160_9 = input.LA(1);

                         
                        int index160_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA160_10 = input.LA(1);

                         
                        int index160_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA160_11 = input.LA(1);

                         
                        int index160_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA160_13 = input.LA(1);

                         
                        int index160_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA160_12 = input.LA(1);

                         
                        int index160_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA160_8 = input.LA(1);

                         
                        int index160_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA162_static {
    static final String DFA162_eotS =
        "\16\uffff";
    static final String DFA162_eofS =
        "\16\uffff";
    static final String DFA162_minS =
        "\1\42\5\0\10\uffff";
    static final String DFA162_maxS =
        "\1\u0093\5\0\10\uffff";
    static final String DFA162_acceptS =
        "\6\uffff\1\1\6\uffff\1\2";
    static final String DFA162_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\10\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\24\uffff\1\3\17\uffff\1\6\60\uffff"+
            "\1\5\10\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_static.DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_static.DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_static.DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_static.DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_static.DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_static.DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_static.DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_static.DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "81:107: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA162_1 = input.LA(1);

                         
                        int index162_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index162_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA162_2 = input.LA(1);

                         
                        int index162_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index162_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA162_3 = input.LA(1);

                         
                        int index162_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index162_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA162_4 = input.LA(1);

                         
                        int index162_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index162_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA162_5 = input.LA(1);

                         
                        int index162_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index162_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA176_static {
    static final String DFA176_eotS =
        "\25\uffff";
    static final String DFA176_eofS =
        "\25\uffff";
    static final String DFA176_minS =
        "\1\42\15\uffff\1\0\6\uffff";
    static final String DFA176_maxS =
        "\1\u0096\15\uffff\1\0\6\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA176_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA176_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\3\uffff\1\1\3\uffff\1\1\4\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\10\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_static.DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_static.DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_static.DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_static.DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_static.DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_static.DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_static.DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_static.DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "()* loopback of 184:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA176_14 = input.LA(1);

                         
                        int index176_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index176_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentences_in_document184_static {
    public static final BitSet FOLLOW_sentences_in_document184 = new BitSet(new long[]{0xFFFFFFFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FFFFFFFFFEFL});

    }static class FOLLOW_sentenceStructure_in_sentences205_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences205 = new BitSet(new long[]{0xFFFFFFFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences207_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences207 = new BitSet(new long[]{0xFFFFFFFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentences211_static {
    public static final BitSet FOLLOW_stop_in_sentences211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_nounphrase_in_sentenceStructure221_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure221 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_verbphrase_in_sentenceStructure223_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure223 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_prepphrase_in_sentenceStructure225_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure225 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure227_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure227 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_advAdj_in_sentenceStructure232_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure232 = new BitSet(new long[]{0x0000021800000002L,0xC000000000000000L,0x00000003C00E0801L});

    }static class FOLLOW_colon_in_sentenceStructure234_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure234 = new BitSet(new long[]{0x0000021800000002L,0xC000000000000000L,0x00000003C00E0801L});

    }static class FOLLOW_conjunction_in_sentenceStructure239_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure239 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000801L});

    }static class FOLLOW_rbconj_in_sentenceStructure241_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure241 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000801L});

    }static class FOLLOW_comma_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure243 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000801L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase256_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase256 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_unmatchedToken276_static {
    public static final BitSet FOLLOW_number_in_unmatchedToken276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken278_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken280_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken282_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken284_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken286_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken290_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken290 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken292_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken304_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken306_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken348_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken350_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken400_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase429_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure452_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure454_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1463_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1463 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2483_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2483 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_dt_in_nounphraseStructure2486_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2486 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2489_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2489 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2494_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2494 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_noun_in_nounphraseStructure2496_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2496 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_number_in_nounphraseStructure2498_static {
    public static final BitSet FOLLOW_number_in_nounphraseStructure2498 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_ratio_in_nounphraseStructure2500_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2500 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2508_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2508 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2511_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2511 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2515_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2515 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_noun_in_nounphraseStructure2517_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2517 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_number_in_nounphraseStructure2519_static {
    public static final BitSet FOLLOW_number_in_nounphraseStructure2519 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_ratio_in_nounphraseStructure2521_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2521 = new BitSet(new long[]{0xD81046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2531_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2531 = new BitSet(new long[]{0x8010461C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2534_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2534 = new BitSet(new long[]{0x8010461C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2537_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2537 = new BitSet(new long[]{0x0010400000000002L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase552_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase554_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase554 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase556_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_dissolvePhrase558_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure583_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure583 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_nnp_in_dissolveStructure587_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure587 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008008L,0x00000000010E1201L});

    }static class FOLLOW_molecule_in_dissolveStructure590_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure590 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure592_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure592 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_nnchementity_in_dissolveStructure594_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure594 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_molecule_in_dissolveStructure600_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure600 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure602_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure602 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_inin_in_dissolveStructure607_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure607 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1301L});

    }static class FOLLOW_dtTHE_in_dissolveStructure609_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure609 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_adj_in_dissolveStructure612_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure612 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_nnp_in_dissolveStructure615_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure615 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_molecule_in_dissolveStructure619_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure619 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure621_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure621 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_conjunction_in_dissolveStructure625_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure625 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_dissolveStructure627_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure627 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_cc_in_conjunction643_static {
    public static final BitSet FOLLOW_cc_in_conjunction643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction645_static {
    public static final BitSet FOLLOW_comma_in_conjunction645 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase654_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure672_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure672 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_to_in_verbphraseStructure675_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure675 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_inAll_in_verbphraseStructure678_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure678 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_inafter_in_verbphraseStructure681_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure681 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_md_in_verbphraseStructure685_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure685 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_rbconj_in_verbphraseStructure688_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure688 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adv_in_verbphraseStructure691_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure691 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adj_in_verbphraseStructure694_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure694 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_verb_in_verbphraseStructure697_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure697 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_md_in_verbphraseStructure700_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure700 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_adv_in_verbphraseStructure703_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure703 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_adj_in_verbphraseStructure706_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure706 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_neg_in_verbphraseStructure709_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure709 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_inoff_in_verbphraseStructure715_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure715 = new BitSet(new long[]{0x17FFFA1800000002L,0x0000000000000010L,0x0000000BC00F3805L});

    }static class FOLLOW_cc_in_verbphraseStructure719_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure719 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3005L});

    }static class FOLLOW_comma_in_verbphraseStructure722_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure722 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure725_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure725 = new BitSet(new long[]{0x17FFFA1800000002L,0x0000000000000010L,0x0000000BC00F3805L});

    }static class FOLLOW_vb_in_verb737_static {
    public static final BitSet FOLLOW_vb_in_verb737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb739_static {
    public static final BitSet FOLLOW_vbp_in_verb739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb741_static {
    public static final BitSet FOLLOW_vbg_in_verb741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb743_static {
    public static final BitSet FOLLOW_vbd_in_verb743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb745_static {
    public static final BitSet FOLLOW_vbz_in_verb745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb747_static {
    public static final BitSet FOLLOW_vbn_in_verb747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb749_static {
    public static final BitSet FOLLOW_vbuse_in_verb749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb751_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb753_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb755_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb757_static {
    public static final BitSet FOLLOW_vbsubject_in_verb757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb759_static {
    public static final BitSet FOLLOW_vbadd_in_verb759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb761_static {
    public static final BitSet FOLLOW_vbdilute_in_verb761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb763_static {
    public static final BitSet FOLLOW_vbcharge_in_verb763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb765_static {
    public static final BitSet FOLLOW_vbcontain_in_verb765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb767_static {
    public static final BitSet FOLLOW_vbdrop_in_verb767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb769_static {
    public static final BitSet FOLLOW_vbfill_in_verb769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb771_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb773_static {
    public static final BitSet FOLLOW_vbtreat_in_verb773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb775_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb777_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb779_static {
    public static final BitSet FOLLOW_vbcool_in_verb779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb781_static {
    public static final BitSet FOLLOW_vbdegass_in_verb781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb783_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb785_static {
    public static final BitSet FOLLOW_vbdry_in_verb785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb787_static {
    public static final BitSet FOLLOW_vbextract_in_verb787 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb789_static {
    public static final BitSet FOLLOW_vbfilter_in_verb789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb792_static {
    public static final BitSet FOLLOW_vbheat_in_verb792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb794_static {
    public static final BitSet FOLLOW_vbincrease_in_verb794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb796_static {
    public static final BitSet FOLLOW_vbpartition_in_verb796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb798_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb798 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb800_static {
    public static final BitSet FOLLOW_vbpurify_in_verb800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb802_static {
    public static final BitSet FOLLOW_vbquench_in_verb802 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb804_static {
    public static final BitSet FOLLOW_vbrecover_in_verb804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb806_static {
    public static final BitSet FOLLOW_vbremove_in_verb806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb808_static {
    public static final BitSet FOLLOW_vbstir_in_verb808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb810_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb812_static {
    public static final BitSet FOLLOW_vbwait_in_verb812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb814_static {
    public static final BitSet FOLLOW_vbwash_in_verb814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb816_static {
    public static final BitSet FOLLOW_vbyield_in_verb816 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb818_static {
    public static final BitSet FOLLOW_vbchange_in_verb818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb827_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_cc_in_degassMultiVerb829_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb829 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb831_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_number838_static {
    public static final BitSet FOLLOW_cd_in_number838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_number840_static {
    public static final BitSet FOLLOW_cdAlphanum_in_number840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause848_static {
    public static final BitSet FOLLOW_wdt_in_clause848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause850_static {
    public static final BitSet FOLLOW_wp_poss_in_clause850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause852_static {
    public static final BitSet FOLLOW_wrb_in_clause852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause854_static {
    public static final BitSet FOLLOW_ex_in_clause854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause856_static {
    public static final BitSet FOLLOW_pdt_in_clause856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause858_static {
    public static final BitSet FOLLOW_wp_in_clause858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun866_static {
    public static final BitSet FOLLOW_nounStructure_in_noun866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_noun869_static {
    public static final BitSet FOLLOW_dash_in_noun869 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_nounStructure_in_noun871_static {
    public static final BitSet FOLLOW_nounStructure_in_noun871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_prp_in_nounStructure882_static {
    public static final BitSet FOLLOW_prp_in_nounStructure882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure884_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure886_static {
    public static final BitSet FOLLOW_citation_in_nounStructure886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure888_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure890_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure892_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure894_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure896_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure898_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure900_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure902_static {
    public static final BitSet FOLLOW_nn_in_nounStructure902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure904_static {
    public static final BitSet FOLLOW_nns_in_nounStructure904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure906_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure908_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure910_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure912_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure914_static {
    public static final BitSet FOLLOW_range_in_nounStructure914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_nounStructure916_static {
    public static final BitSet FOLLOW_amount_in_nounStructure916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure918_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure920_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure922_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure924_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure926_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure928_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure930_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_nounStructure932_static {
    public static final BitSet FOLLOW_measurements_in_nounStructure932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure934_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure936_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure938_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_nounStructure940_static {
    public static final BitSet FOLLOW_nnmethod_in_nounStructure940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure942_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure944_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure946_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure948_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure950_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure952_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure952 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure954_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure956_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure958_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure960_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure962_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure964_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_reference_in_nounStructure966_static {
    public static final BitSet FOLLOW_reference_in_nounStructure966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure968_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_nounStructure970_static {
    public static final BitSet FOLLOW_number_in_nounStructure970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_nounStructure972_static {
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure974_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure976_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure978_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure980_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure982_static {
    public static final BitSet FOLLOW_fw_in_nounStructure982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure984_static {
    public static final BitSet FOLLOW_sym_in_nounStructure984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure986_static {
    public static final BitSet FOLLOW_clause_in_nounStructure986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure988_static {
    public static final BitSet FOLLOW_ls_in_nounStructure988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure990_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure992_static {
    public static final BitSet FOLLOW_pos_in_nounStructure992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure994_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_range1001_static {
    public static final BitSet FOLLOW_number_in_range1001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_range1003_static {
    public static final BitSet FOLLOW_dash_in_range1003 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_number_in_range1005_static {
    public static final BitSet FOLLOW_number_in_range1005 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles1012_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure1029_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure1029 = new BitSet(new long[]{0x8800021C00000000L,0x0000000000109108L,0x00000000004E1201L});

    }static class FOLLOW_dashNN_in_cycleStructure1031_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure1031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nncycle_in_cycleStructure1034_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure1034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN1044_static {
    public static final BitSet FOLLOW_adj_in_dashNN1044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nn_in_dashNN1046_static {
    public static final BitSet FOLLOW_nn_in_dashNN1046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_cd_in_dashNN1048_static {
    public static final BitSet FOLLOW_cd_in_dashNN1048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_dashNN1052_static {
    public static final BitSet FOLLOW_dash_in_dashNN1052 = new BitSet(new long[]{0x8800021C00000000L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_adj_in_dashNN1055_static {
    public static final BitSet FOLLOW_adj_in_dashNN1055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nn_in_dashNN1057_static {
    public static final BitSet FOLLOW_nn_in_dashNN1057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_cd_in_dashNN1059_static {
    public static final BitSet FOLLOW_cd_in_dashNN1059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_numberratio_in_ratio1072_static {
    public static final BitSet FOLLOW_numberratio_in_ratio1072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio1074_static {
    public static final BitSet FOLLOW_nounratio_in_ratio1074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberratio1097_static {
    public static final BitSet FOLLOW_cd_in_numberratio1097 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000001000L});

    }static class FOLLOW_colon_in_numberratio1100_static {
    public static final BitSet FOLLOW_colon_in_numberratio1100 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_numberratio1102_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numberratio1102 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_numberratio1104_static {
    public static final BitSet FOLLOW_cd_in_numberratio1104 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000001000L});

    }static class FOLLOW_noun_in_nounratio1117_static {
    public static final BitSet FOLLOW_noun_in_nounratio1117 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});

    }static class FOLLOW_colon_in_nounratio1121_static {
    public static final BitSet FOLLOW_colon_in_nounratio1121 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_nounratio1123_static {
    public static final BitSet FOLLOW_noun_in_nounratio1123 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});

    }static class FOLLOW_lsqb_in_reference1137_static {
    public static final BitSet FOLLOW_lsqb_in_reference1137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_reference1139_static {
    public static final BitSet FOLLOW_cd_in_reference1139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_rsqb_in_reference1141_static {
    public static final BitSet FOLLOW_rsqb_in_reference1141 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure1_in_citation1148_static {
    public static final BitSet FOLLOW_citationStructure1_in_citation1148 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure2_in_citation1150_static {
    public static final BitSet FOLLOW_citationStructure2_in_citation1150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationStructure11172_static {
    public static final BitSet FOLLOW_lrb_in_citationStructure11172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_citationContent_in_citationStructure11174_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure11174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_citationStructure11176_static {
    public static final BitSet FOLLOW_rrb_in_citationStructure11176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citationStructure21182_static {
    public static final BitSet FOLLOW_comma_in_citationStructure21182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_lrb_in_citationStructure21184_static {
    public static final BitSet FOLLOW_lrb_in_citationStructure21184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_citationContent_in_citationStructure21186_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure21186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_citationStructure21188_static {
    public static final BitSet FOLLOW_rrb_in_citationStructure21188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_citationStructure21190_static {
    public static final BitSet FOLLOW_comma_in_citationStructure21190 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_citationContent1199_static {
    public static final BitSet FOLLOW_nnp_in_citationContent1199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_fw_in_citationContent1201_static {
    public static final BitSet FOLLOW_fw_in_citationContent1201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_cd_in_citationContent1203_static {
    public static final BitSet FOLLOW_cd_in_citationContent1203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_conjunction_in_citationContent1205_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent1205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_nnp_in_citationContent1209_static {
    public static final BitSet FOLLOW_nnp_in_citationContent1209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_fw_in_citationContent1211_static {
    public static final BitSet FOLLOW_fw_in_citationContent1211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_cd_in_citationContent1213_static {
    public static final BitSet FOLLOW_cd_in_citationContent1213 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_conjunction_in_citationContent1215_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent1215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_mixtureRatio_in_mixture1225_static {
    public static final BitSet FOLLOW_mixtureRatio_in_mixture1225 = new BitSet(new long[]{0x8000000400000000L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixtureStructure3_in_mixture1230_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture1230 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture1232_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture1232 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture1234_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture1234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure21261_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure21261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_lrb_in_mixtureStructure21263_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure21263 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_mixtureStructure21265_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure21265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_mixtureStructure21267_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure21267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_mixtureStructure21269_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure21269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure11275_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11275 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_mixtureStructure11277_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_mixtureStructure11279_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11279 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure31287_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure31287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnpercent_in_mixtureStructure31290_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure31290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_mixtureStructure31292_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure31292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mixtureRatio1303_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio1303 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});

    }static class FOLLOW_colon_in_mixtureRatio1305_static {
    public static final BitSet FOLLOW_colon_in_mixtureRatio1305 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_mixtureRatio1308_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio1308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_mixtureRatio1310_static {
    public static final BitSet FOLLOW_cdAlphanum_in_mixtureRatio1310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent1320_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent1320 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_mixtureContent1322_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent1322 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nn_in_mixtureContent1324_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent1324 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_measurements_in_mixtureContent1326_static {
    public static final BitSet FOLLOW_measurements_in_mixtureContent1326 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_mixtureContent1328_static {
    public static final BitSet FOLLOW_md_in_mixtureContent1328 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_mixtureContent1330_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1330 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent1332_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1332 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_mixtureContent1334_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1334 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_mixtureContent1336_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent1336 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent1338_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1338 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_mixtureContent1340_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent1340 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_mixtureContent1342_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent1342 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent1344_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1344 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_mixtureContent1346_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent1346 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inof_in_mixtureContent1348_static {
    public static final BitSet FOLLOW_inof_in_mixtureContent1348 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_mixtureContent1350_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent1350 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent1352_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1352 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_mixtureContent1354_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent1354 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_mixtureContent1356_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent1356 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_mixtureContent1358_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent1358 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent1360_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1360 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_minimixture_in_mixtureContent1364_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent1364 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_fw_in_mixtureContent1366_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent1366 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_mixtureContent1368_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent1368 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_measurements_in_mixtureContent1370_static {
    public static final BitSet FOLLOW_measurements_in_mixtureContent1370 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnyield_in_mixtureContent1372_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent1372 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_mixtureContent1374_static {
    public static final BitSet FOLLOW_md_in_mixtureContent1374 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_mixtureContent1376_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1376 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent1378_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1378 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_mixtureContent1380_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1380 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_mixtureContent1382_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent1382 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent1384_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1384 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_mixtureContent1386_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent1386 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_mixtureContent1388_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent1388 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent1390_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1390 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_mixtureContent1392_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent1392 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inof_in_mixtureContent1394_static {
    public static final BitSet FOLLOW_inof_in_mixtureContent1394 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_mixtureContent1396_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent1396 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent1398_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1398 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_mixtureContent1400_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent1400 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_mixtureContent1402_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent1402 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_mixtureContent1404_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent1404 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent1406_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1406 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureStructure2_in_minimixture1417_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture1417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture1419_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture1419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_minimixtureStructure21439_static {
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_lrb_in_minimixtureStructure21441_static {
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure21441 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_minimixtureStructure21443_static {
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure21443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_minimixtureStructure21445_static {
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure21445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_minimixtureStructure21447_static {
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_minimixtureStructure11454_static {
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure11454 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_minimixtureStructure11456_static {
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure11456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_minimixtureStructure11458_static {
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure11458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_minimixtureContent1467_static {
    public static final BitSet FOLLOW_fw_in_minimixtureContent1467 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nn_in_minimixtureContent1469_static {
    public static final BitSet FOLLOW_nn_in_minimixtureContent1469 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_minimixtureContent1471_static {
    public static final BitSet FOLLOW_verb_in_minimixtureContent1471 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_measurements_in_minimixtureContent1473_static {
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1473 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_minimixtureContent1475_static {
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1475 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_minimixtureContent1477_static {
    public static final BitSet FOLLOW_md_in_minimixtureContent1477 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent1479_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1479 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_minimixtureContent1481_static {
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1481 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_minimixtureContent1483_static {
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1483 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_minimixtureContent1485_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1485 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_minimixtureContent1487_static {
    public static final BitSet FOLLOW_dash_in_minimixtureContent1487 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_minimixtureContent1489_static {
    public static final BitSet FOLLOW_sym_in_minimixtureContent1489 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent1491_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1491 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_minimixtureContent1493_static {
    public static final BitSet FOLLOW_noun_in_minimixtureContent1493 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inof_in_minimixtureContent1495_static {
    public static final BitSet FOLLOW_inof_in_minimixtureContent1495 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_minimixtureContent1497_static {
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1497 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent1499_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1499 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_minimixtureContent1501_static {
    public static final BitSet FOLLOW_comma_in_minimixtureContent1501 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_minimixtureContent1503_static {
    public static final BitSet FOLLOW_adj_in_minimixtureContent1503 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_minimixtureContent1505_static {
    public static final BitSet FOLLOW_colon_in_minimixtureContent1505 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent1507_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1507 = new BitSet(new long[]{0xDFFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_fw_in_minimixtureContent1511_static {
    public static final BitSet FOLLOW_fw_in_minimixtureContent1511 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_minimixtureContent1513_static {
    public static final BitSet FOLLOW_verb_in_minimixtureContent1513 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_measurements_in_minimixtureContent1515_static {
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1515 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnyield_in_minimixtureContent1517_static {
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent1517 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_minimixtureContent1519_static {
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1519 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_minimixtureContent1521_static {
    public static final BitSet FOLLOW_md_in_minimixtureContent1521 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent1523_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1523 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_minimixtureContent1525_static {
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1525 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_minimixtureContent1527_static {
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1527 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_minimixtureContent1529_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1529 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_minimixtureContent1531_static {
    public static final BitSet FOLLOW_dash_in_minimixtureContent1531 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_minimixtureContent1533_static {
    public static final BitSet FOLLOW_sym_in_minimixtureContent1533 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent1535_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1535 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_minimixtureContent1537_static {
    public static final BitSet FOLLOW_noun_in_minimixtureContent1537 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inof_in_minimixtureContent1539_static {
    public static final BitSet FOLLOW_inof_in_minimixtureContent1539 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_minimixtureContent1541_static {
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1541 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent1543_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1543 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_minimixtureContent1545_static {
    public static final BitSet FOLLOW_comma_in_minimixtureContent1545 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_minimixtureContent1547_static {
    public static final BitSet FOLLOW_adj_in_minimixtureContent1547 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_minimixtureContent1549_static {
    public static final BitSet FOLLOW_colon_in_minimixtureContent1549 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent1551_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1551 = new BitSet(new long[]{0xDFFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_jj_in_adj1562_static {
    public static final BitSet FOLLOW_jj_in_adj1562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj1564_static {
    public static final BitSet FOLLOW_jjr_in_adj1564 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj1566_static {
    public static final BitSet FOLLOW_jjs_in_adj1566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj1568_static {
    public static final BitSet FOLLOW_oscarcj_in_adj1568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj1570_static {
    public static final BitSet FOLLOW_jjchem_in_adj1570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj1572_static {
    public static final BitSet FOLLOW_oscarrn_in_adj1572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv1579_static {
    public static final BitSet FOLLOW_rb_in_adv1579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv1581_static {
    public static final BitSet FOLLOW_rbr_in_adv1581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv1583_static {
    public static final BitSet FOLLOW_rp_in_adv1583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv1585_static {
    public static final BitSet FOLLOW_rbs_in_adv1585 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1598_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1598 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1602_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1602 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1604_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1604 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1606_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1608_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1608 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1610_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1612_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1612 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj1626_static {
    public static final BitSet FOLLOW_adv_in_advAdj1626 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj1628_static {
    public static final BitSet FOLLOW_adj_in_advAdj1628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1637_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1637 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_inMost_in_prepphraseOther1640_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1640 = new BitSet(new long[]{0xDFFFFEFC00000000L,0x234505428030FFFFL,0x0000780FFFDFF345L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1644_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1644 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1670_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1670 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1673_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1694_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1711_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1711 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000000L,0x0000000BC00F3000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1714_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1714 = new BitSet(new long[]{0x1000021800000000L,0x0000000000000000L,0x00000003C00E3000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1718_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1718 = new BitSet(new long[]{0x1000021800000000L,0x0000000000000000L,0x00000003C00E1000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1721_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1721 = new BitSet(new long[]{0x1000021800000000L,0x0000000000000000L,0x00000003C00E1000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1724_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1724 = new BitSet(new long[]{0x1000000000000000L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1727_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1727 = new BitSet(new long[]{0x1000000000000002L});

    }static class FOLLOW_inin_in_prepphraseIN1739_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1739 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_prepphraseIN1741_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1762_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000002000L});

    }static class FOLLOW_dt_in_prepphraseRole1764_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1767_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1790_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1809_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1809 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000003C00E3201L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1812_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1812 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000003C00E1201L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1815_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1815 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000003C00E1201L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1818_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1820_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost1831_static {
    public static final BitSet FOLLOW_in_in_inMost1831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost1833_static {
    public static final BitSet FOLLOW_inas_in_inMost1833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost1835_static {
    public static final BitSet FOLLOW_inbefore_in_inMost1835 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost1837_static {
    public static final BitSet FOLLOW_inby_in_inMost1837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost1839_static {
    public static final BitSet FOLLOW_infor_in_inMost1839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost1841_static {
    public static final BitSet FOLLOW_infrom_in_inMost1841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost1843_static {
    public static final BitSet FOLLOW_inin_in_inMost1843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost1845_static {
    public static final BitSet FOLLOW_ininto_in_inMost1845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost1847_static {
    public static final BitSet FOLLOW_inof_in_inMost1847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost1849_static {
    public static final BitSet FOLLOW_inoff_in_inMost1849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost1851_static {
    public static final BitSet FOLLOW_inon_in_inMost1851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost1853_static {
    public static final BitSet FOLLOW_inover_in_inMost1853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost1855_static {
    public static final BitSet FOLLOW_inunder_in_inMost1855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost1857_static {
    public static final BitSet FOLLOW_invia_in_inMost1857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost1859_static {
    public static final BitSet FOLLOW_inwith_in_inMost1859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost1861_static {
    public static final BitSet FOLLOW_inwithout_in_inMost1861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost1863_static {
    public static final BitSet FOLLOW_to_in_inMost1863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll1871_static {
    public static final BitSet FOLLOW_in_in_inAll1871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll1873_static {
    public static final BitSet FOLLOW_inafter_in_inAll1873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll1875_static {
    public static final BitSet FOLLOW_inas_in_inAll1875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll1877_static {
    public static final BitSet FOLLOW_inbefore_in_inAll1877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll1879_static {
    public static final BitSet FOLLOW_inby_in_inAll1879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll1881_static {
    public static final BitSet FOLLOW_infor_in_inAll1881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll1883_static {
    public static final BitSet FOLLOW_infrom_in_inAll1883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll1885_static {
    public static final BitSet FOLLOW_inin_in_inAll1885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll1887_static {
    public static final BitSet FOLLOW_ininto_in_inAll1887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll1889_static {
    public static final BitSet FOLLOW_inof_in_inAll1889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll1891_static {
    public static final BitSet FOLLOW_inoff_in_inAll1891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll1893_static {
    public static final BitSet FOLLOW_inon_in_inAll1893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll1895_static {
    public static final BitSet FOLLOW_inover_in_inAll1895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll1897_static {
    public static final BitSet FOLLOW_inunder_in_inAll1897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll1899_static {
    public static final BitSet FOLLOW_invia_in_inAll1899 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll1901_static {
    public static final BitSet FOLLOW_inwith_in_inAll1901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll1903_static {
    public static final BitSet FOLLOW_inwithout_in_inAll1903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll1905_static {
    public static final BitSet FOLLOW_to_in_inAll1905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1912_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1933_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1933 = new BitSet(new long[]{0x07FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1936_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1936 = new BitSet(new long[]{0x0000021800000000L,0x0000000000000010L,0x00000003C00E3000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1939_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1939 = new BitSet(new long[]{0x0000021800000000L,0x0000000000000010L,0x00000003C00E1000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1942_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000001000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1945_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1948_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1961_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1961 = new BitSet(new long[]{0x0000200000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1964_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1964 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1967_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount1997_static {
    public static final BitSet FOLLOW_cd_in_amount1997 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nnamount_in_amount2000_static {
    public static final BitSet FOLLOW_nnamount_in_amount2000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2021_static {
    public static final BitSet FOLLOW_cd_in_mass2021 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nnmass_in_mass2024_static {
    public static final BitSet FOLLOW_nnmass_in_mass2024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_percent2045_static {
    public static final BitSet FOLLOW_number_in_percent2045 = new BitSet(new long[]{0x8800021C00000000L,0x0000000000108108L,0x00000000004E1221L});

    }static class FOLLOW_nn_in_percent2047_static {
    public static final BitSet FOLLOW_nn_in_percent2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnpercent_in_percent2050_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2050 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2073_static {
    public static final BitSet FOLLOW_cd_in_volume2073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000001000L});

    }static class FOLLOW_nnvol_in_volume2076_static {
    public static final BitSet FOLLOW_nnvol_in_volume2076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2097_static {
    public static final BitSet FOLLOW_cd_in_molar2097 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nnmolar_in_molar2100_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield2120_static {
    public static final BitSet FOLLOW_percent_in_yield2120 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_nnyield_in_yield2122_static {
    public static final BitSet FOLLOW_nnyield_in_yield2122 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase2142_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase2142 = new BitSet(new long[]{0x0000080000000000L});

    }static class FOLLOW_inas_in_preparationphrase2144_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase2144 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000004010L,0x0000000BC00F3004L});

    }static class FOLLOW_nnexample_in_preparationphrase2147_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase2147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_preparationphrase2149_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase2149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase2152_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase2152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus2165_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2165 = new BitSet(new long[]{0x8800021C00000002L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_conjunction_in_multiApparatus2168_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus2168 = new BitSet(new long[]{0x8800021C00000000L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_apparatus_in_multiApparatus2171_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2171 = new BitSet(new long[]{0x8800021C00000002L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_dt_in_apparatus2183_static {
    public static final BitSet FOLLOW_dt_in_apparatus2183 = new BitSet(new long[]{0x8800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_preapparatus_in_apparatus2186_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus2186 = new BitSet(new long[]{0x8800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnApp_in_apparatus2189_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus2189 = new BitSet(new long[]{0x8800021C00000002L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnapparatus_in_nnApp2217_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2217 = new BitSet(new long[]{0x8800021C00000002L,0x0000000080108108L,0x00000000004E3209L});

    }static class FOLLOW_dash_in_nnApp2221_static {
    public static final BitSet FOLLOW_dash_in_nnApp2221 = new BitSet(new long[]{0x8800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnapparatus_in_nnApp2223_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_quantity_in_preapparatus2237_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus2237 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_adj_in_preapparatus2239_static {
    public static final BitSet FOLLOW_adj_in_preapparatus2239 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnpressure_in_preapparatus2241_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus2241 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnadd_in_preapparatus2243_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus2243 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_molecule_in_preapparatus2245_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus2245 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnchementity_in_preapparatus2247_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus2247 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnstate_in_preapparatus2249_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus2249 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nn_in_preapparatus2251_static {
    public static final BitSet FOLLOW_nn_in_preapparatus2251 = new BitSet(new long[]{0x8800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_cd_in_measurements2262_static {
    public static final BitSet FOLLOW_cd_in_measurements2262 = new BitSet(new long[]{0x8800021C00000000L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nn_in_measurements2264_static {
    public static final BitSet FOLLOW_nn_in_measurements2264 = new BitSet(new long[]{0x8000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_multiple_in_measurements2269_static {
    public static final BitSet FOLLOW_multiple_in_measurements2269 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_measurementtypes_in_measurements2271_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_dt_in_measurements2277_static {
    public static final BitSet FOLLOW_dt_in_measurements2277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2285_static {
    public static final BitSet FOLLOW_cd_in_multiple2285 = new BitSet(new long[]{0x0000010000000000L});

    }static class FOLLOW_cdunicode_in_multiple2287_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2287 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurementtypes_in_multiple2289_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2316_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2318_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2320_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2322_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2324_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2326_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_oscaronts2337_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts2337 = new BitSet(new long[]{0x0000004000000002L});

    }static class FOLLOW_adj_in_oscarCompound2357_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound2357 = new BitSet(new long[]{0x0000021800000000L,0x0000000000008000L,0x00000000000E0200L});

    }static class FOLLOW_oscarCompound1_in_oscarCompound2361_static {
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound2361 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarCompound2_in_oscarCompound2363_static {
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound2363 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarCompound3_in_oscarCompound2365_static {
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound2365 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarCompound4_in_oscarCompound2367_static {
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound2367 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarcm_in_oscarCompound2369_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2369 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_adj_in_oscarCompound2372_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound2372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_reference_in_oscarCompound2375_static {
    public static final BitSet FOLLOW_reference_in_oscarCompound2375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_oscarCompound42384_static {
    public static final BitSet FOLLOW_lrb_in_oscarCompound42384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound42387_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound42387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_oscarCompound42389_static {
    public static final BitSet FOLLOW_rrb_in_oscarCompound42389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound3Structure_in_oscarCompound32412_static {
    public static final BitSet FOLLOW_oscarCompound3Structure_in_oscarCompound32412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound2Structure_in_oscarCompound22430_static {
    public static final BitSet FOLLOW_oscarCompound2Structure_in_oscarCompound22430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompound12448_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound12450_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound3Structure2475_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound3Structure2475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000AL});

    }static class FOLLOW_dash_in_oscarCompound3Structure2478_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound3Structure2478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});

    }static class FOLLOW_apost_in_oscarCompound3Structure2480_static {
    public static final BitSet FOLLOW_apost_in_oscarCompound3Structure2480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});

    }static class FOLLOW_oscarcm_in_oscarCompound2Structure2494_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_oscarCompound2Structure2497_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound2Structure2499_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_oscarCompound2Structure2504_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount12518_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount12518 = new BitSet(new long[]{0x8010000400000000L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_moleculeamount12520_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount12520 = new BitSet(new long[]{0x8010000400000000L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_inof_in_moleculeamount12524_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount12524 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_oscarCompound_in_moleculeamount12526_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount12526 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_moleculeamount12528_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount12528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount22539_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount22539 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_mixture_in_moleculeamount22541_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount22541 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_oscarCompound_in_moleculeamount22545_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount22545 = new BitSet(new long[]{0x8000021C00000002L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_citation_in_moleculeamount22550_static {
    public static final BitSet FOLLOW_citation_in_moleculeamount22550 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_moleculeamount22552_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount22552 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_moleculeamount22554_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount22554 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_moleculeamount32568_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount32568 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_mixture_in_moleculeamount32570_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount32570 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_inof_in_moleculeamount32573_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount32573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_mixtureRatio_in_moleculeamount32575_static {
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount32575 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_mixture_in_moleculeamount32577_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount32577 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_oscarCompound_in_moleculeamount32580_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount32580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount2590_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount2590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount2592_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount2592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount2596_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount2596 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule2617_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule2617 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_cdAlphanumType2639_static {
    public static final BitSet FOLLOW_lrb_in_cdAlphanumType2639 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_cdAlphanumType2642_static {
    public static final BitSet FOLLOW_cdAlphanum_in_cdAlphanumType2642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_cd_in_cdAlphanumType2644_static {
    public static final BitSet FOLLOW_cd_in_cdAlphanumType2644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_cdAlphanumType2647_static {
    public static final BitSet FOLLOW_rrb_in_cdAlphanumType2647 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount12656_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12656 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount12658_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12658 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount12661_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount12661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_unnamedmoleculeamount12663_static {
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount22672_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount22672 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22674_static {
    public static final BitSet FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22674 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount22678_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22678 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount22680_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22680 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount22682_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22682 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount32698_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32698 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount32700_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32700 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount32703_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32703 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_unnamedmoleculeamount32706_static {
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32706 = new BitSet(new long[]{0xD80006FC00000002L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount42719_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount42719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount42721_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount42721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount42724_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount42724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount52743_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount52743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount52745_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount52745 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount52747_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount52747 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount52751_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount52751 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount52753_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount52753 = new BitSet(new long[]{0x8000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2767_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2769_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2773_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2777_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2779_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2790_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity2812_static {
    public static final BitSet FOLLOW_quantity1_in_quantity2812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2814_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12839_static {
    public static final BitSet FOLLOW_lrb_in_quantity12839 = new BitSet(new long[]{0x8000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_quantity12841_static {
    public static final BitSet FOLLOW_measurements_in_quantity12841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000411L});

    }static class FOLLOW_comma_in_quantity12844_static {
    public static final BitSet FOLLOW_comma_in_quantity12844 = new BitSet(new long[]{0x8000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_quantity12847_static {
    public static final BitSet FOLLOW_measurements_in_quantity12847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000411L});

    }static class FOLLOW_comma_in_quantity12852_static {
    public static final BitSet FOLLOW_comma_in_quantity12852 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12854_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000411L});

    }static class FOLLOW_stop_in_quantity12859_static {
    public static final BitSet FOLLOW_stop_in_quantity12859 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12861_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000410L});

    }static class FOLLOW_rrb_in_quantity12866_static {
    public static final BitSet FOLLOW_rrb_in_quantity12866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22878_static {
    public static final BitSet FOLLOW_measurements_in_quantity22878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_quantity22881_static {
    public static final BitSet FOLLOW_comma_in_quantity22881 = new BitSet(new long[]{0x8000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_quantity22884_static {
    public static final BitSet FOLLOW_measurements_in_quantity22884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nngeneral_in_method2899_static {
    public static final BitSet FOLLOW_nngeneral_in_method2899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nn_in_method2901_static {
    public static final BitSet FOLLOW_nn_in_method2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnmethod_in_method2905_static {
    public static final BitSet FOLLOW_nnmethod_in_method2905 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_method2908_static {
    public static final BitSet FOLLOW_cdAlphanum_in_method2908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_method2910_static {
    public static final BitSet FOLLOW_cd_in_method2910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_brackets2932_static {
    public static final BitSet FOLLOW_lrb_in_brackets2932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_rrb_in_brackets2934_static {
    public static final BitSet FOLLOW_rrb_in_brackets2934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_lsqb_in_brackets2936_static {
    public static final BitSet FOLLOW_lsqb_in_brackets2936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_rsqb_in_brackets2938_static {
    public static final BitSet FOLLOW_rsqb_in_brackets2938 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_34_in_cdAlphanum2951_static {
    public static final BitSet FOLLOW_34_in_cdAlphanum2951 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum2953_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum2953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_35_in_oscarcj2966_static {
    public static final BitSet FOLLOW_35_in_oscarcj2966 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarcj2968_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_36_in_oscarrn2981_static {
    public static final BitSet FOLLOW_36_in_oscarrn2981 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarrn2983_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_37_in_oscarase2996_static {
    public static final BitSet FOLLOW_37_in_oscarase2996 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarase2998_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase2998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_oscaront3011_static {
    public static final BitSet FOLLOW_38_in_oscaront3011 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscaront3013_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_tmunicode3026_static {
    public static final BitSet FOLLOW_39_in_tmunicode3026 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3028_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_cdunicode3041_static {
    public static final BitSet FOLLOW_40_in_cdunicode3041 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3043_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_jjchem3056_static {
    public static final BitSet FOLLOW_41_in_jjchem3056 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjchem3058_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_jjcomp3071_static {
    public static final BitSet FOLLOW_42_in_jjcomp3071 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3073_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_inas3087_static {
    public static final BitSet FOLLOW_43_in_inas3087 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inas3089_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_inbefore3102_static {
    public static final BitSet FOLLOW_44_in_inbefore3102 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inbefore3104_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_inafter3117_static {
    public static final BitSet FOLLOW_45_in_inafter3117 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inafter3119_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_inin3132_static {
    public static final BitSet FOLLOW_46_in_inin3132 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inin3134_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3134 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_ininto3147_static {
    public static final BitSet FOLLOW_47_in_ininto3147 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_ininto3149_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inwith3162_static {
    public static final BitSet FOLLOW_48_in_inwith3162 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inwith3164_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3164 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inwithout3177_static {
    public static final BitSet FOLLOW_49_in_inwithout3177 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inwithout3179_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3179 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inby3192_static {
    public static final BitSet FOLLOW_50_in_inby3192 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inby3194_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3194 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_invia3207_static {
    public static final BitSet FOLLOW_51_in_invia3207 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_invia3209_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3209 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inof3222_static {
    public static final BitSet FOLLOW_52_in_inof3222 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inof3224_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inon3237_static {
    public static final BitSet FOLLOW_53_in_inon3237 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inon3239_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_infor3252_static {
    public static final BitSet FOLLOW_54_in_infor3252 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_infor3254_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_infrom3267_static {
    public static final BitSet FOLLOW_55_in_infrom3267 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_infrom3269_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inunder3282_static {
    public static final BitSet FOLLOW_56_in_inunder3282 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inunder3284_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inover3297_static {
    public static final BitSet FOLLOW_57_in_inover3297 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inover3299_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_inoff3312_static {
    public static final BitSet FOLLOW_58_in_inoff3312 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inoff3314_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_nnstate3329_static {
    public static final BitSet FOLLOW_59_in_nnstate3329 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnstate3331_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_nntime3344_static {
    public static final BitSet FOLLOW_60_in_nntime3344 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nntime3346_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_nnmass3359_static {
    public static final BitSet FOLLOW_61_in_nnmass3359 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmass3361_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_nnamount3374_static {
    public static final BitSet FOLLOW_62_in_nnamount3374 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnamount3376_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnmolar3389_static {
    public static final BitSet FOLLOW_63_in_nnmolar3389 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3391_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nnatmosphere3404_static {
    public static final BitSet FOLLOW_64_in_nnatmosphere3404 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3406_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nneq3419_static {
    public static final BitSet FOLLOW_65_in_nneq3419 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nneq3421_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnvol3434_static {
    public static final BitSet FOLLOW_66_in_nnvol3434 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnvol3436_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnchementity3449_static {
    public static final BitSet FOLLOW_67_in_nnchementity3449 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3451_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nntemp3464_static {
    public static final BitSet FOLLOW_68_in_nntemp3464 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nntemp3466_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nnflash3479_static {
    public static final BitSet FOLLOW_69_in_nnflash3479 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnflash3481_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nngeneral3494_static {
    public static final BitSet FOLLOW_70_in_nngeneral3494 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3496_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnmethod3509_static {
    public static final BitSet FOLLOW_71_in_nnmethod3509 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3511_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nnpressure3524_static {
    public static final BitSet FOLLOW_72_in_nnpressure3524 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3526_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nncolumn3539_static {
    public static final BitSet FOLLOW_73_in_nncolumn3539 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3541_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnchromatography3554_static {
    public static final BitSet FOLLOW_74_in_nnchromatography3554 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3556_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nnvacuum3569_static {
    public static final BitSet FOLLOW_75_in_nnvacuum3569 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3571_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3571 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nncycle3584_static {
    public static final BitSet FOLLOW_76_in_nncycle3584 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nncycle3586_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nntimes3599_static {
    public static final BitSet FOLLOW_77_in_nntimes3599 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nntimes3601_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nnexample3614_static {
    public static final BitSet FOLLOW_78_in_nnexample3614 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnexample3616_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_oscarcm3631_static {
    public static final BitSet FOLLOW_79_in_oscarcm3631 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3633_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_vbuse3648_static {
    public static final BitSet FOLLOW_80_in_vbuse3648 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbuse3650_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3650 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_vbchange3663_static {
    public static final BitSet FOLLOW_81_in_vbchange3663 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbchange3665_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_vbsubmerge3678_static {
    public static final BitSet FOLLOW_82_in_vbsubmerge3678 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3680_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_vbsubject3693_static {
    public static final BitSet FOLLOW_83_in_vbsubject3693 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3695_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_nnadd3710_static {
    public static final BitSet FOLLOW_84_in_nnadd3710 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnadd3712_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_nnmixture3725_static {
    public static final BitSet FOLLOW_85_in_nnmixture3725 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3727_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbdilute3740_static {
    public static final BitSet FOLLOW_86_in_vbdilute3740 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3742_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbadd3756_static {
    public static final BitSet FOLLOW_87_in_vbadd3756 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbadd3758_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd3758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbcharge3771_static {
    public static final BitSet FOLLOW_88_in_vbcharge3771 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbcharge3773_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_vbcontain3786_static {
    public static final BitSet FOLLOW_89_in_vbcontain3786 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbcontain3788_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_vbdrop3801_static {
    public static final BitSet FOLLOW_90_in_vbdrop3801 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdrop3803_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbfill3816_static {
    public static final BitSet FOLLOW_91_in_vbfill3816 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbfill3818_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill3818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbsuspend3831_static {
    public static final BitSet FOLLOW_92_in_vbsuspend3831 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend3833_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbtreat3846_static {
    public static final BitSet FOLLOW_93_in_vbtreat3846 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbtreat3848_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbapparatus3863_static {
    public static final BitSet FOLLOW_94_in_vbapparatus3863 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus3865_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_nnapparatus3878_static {
    public static final BitSet FOLLOW_95_in_nnapparatus3878 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus3880_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbconcentrate3895_static {
    public static final BitSet FOLLOW_96_in_vbconcentrate3895 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate3897_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_nnconcentrate3910_static {
    public static final BitSet FOLLOW_97_in_nnconcentrate3910 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate3912_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbcool3927_static {
    public static final BitSet FOLLOW_98_in_vbcool3927 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbcool3929_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool3929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbdegass3944_static {
    public static final BitSet FOLLOW_99_in_vbdegass3944 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdegass3946_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass3946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_vbdissolve3961_static {
    public static final BitSet FOLLOW_100_in_vbdissolve3961 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve3963_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve3963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbdry3978_static {
    public static final BitSet FOLLOW_101_in_vbdry3978 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdry3980_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry3980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nndry3993_static {
    public static final BitSet FOLLOW_102_in_nndry3993 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nndry3995_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry3995 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbextract4010_static {
    public static final BitSet FOLLOW_103_in_vbextract4010 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbextract4012_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_nnextract4025_static {
    public static final BitSet FOLLOW_104_in_nnextract4025 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnextract4027_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbfilter4042_static {
    public static final BitSet FOLLOW_105_in_vbfilter4042 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4044_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_nnfilter4057_static {
    public static final BitSet FOLLOW_106_in_nnfilter4057 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4059_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_vbheat4074_static {
    public static final BitSet FOLLOW_107_in_vbheat4074 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbheat4076_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbincrease4089_static {
    public static final BitSet FOLLOW_108_in_vbincrease4089 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4091_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4091 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_vbimmerse4106_static {
    public static final BitSet FOLLOW_109_in_vbimmerse4106 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4108_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbpartition4123_static {
    public static final BitSet FOLLOW_110_in_vbpartition4123 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4125_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_vbprecipitate4140_static {
    public static final BitSet FOLLOW_111_in_vbprecipitate4140 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4142_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_nnprecipitate4155_static {
    public static final BitSet FOLLOW_112_in_nnprecipitate4155 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4157_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbpurify4172_static {
    public static final BitSet FOLLOW_113_in_vbpurify4172 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4174_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_nnpurify4187_static {
    public static final BitSet FOLLOW_114_in_nnpurify4187 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4189_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4189 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbquench4204_static {
    public static final BitSet FOLLOW_115_in_vbquench4204 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbquench4206_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbrecover4221_static {
    public static final BitSet FOLLOW_116_in_vbrecover4221 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4223_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_vbremove4238_static {
    public static final BitSet FOLLOW_117_in_vbremove4238 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbremove4240_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4240 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_nnremove4253_static {
    public static final BitSet FOLLOW_118_in_nnremove4253 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnremove4255_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_vbstir4270_static {
    public static final BitSet FOLLOW_119_in_vbstir4270 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbstir4272_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4272 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbsynthesize4287_static {
    public static final BitSet FOLLOW_120_in_vbsynthesize4287 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4289_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_nnsynthesize4302_static {
    public static final BitSet FOLLOW_121_in_nnsynthesize4302 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4304_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbwait4319_static {
    public static final BitSet FOLLOW_122_in_vbwait4319 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbwait4321_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_vbwash4336_static {
    public static final BitSet FOLLOW_123_in_vbwash4336 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbwash4338_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbyield4353_static {
    public static final BitSet FOLLOW_124_in_vbyield4353 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbyield4355_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_nnyield4370_static {
    public static final BitSet FOLLOW_125_in_nnyield4370 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnyield4372_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_rbconj4388_static {
    public static final BitSet FOLLOW_126_in_rbconj4388 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rbconj4390_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_colon4403_static {
    public static final BitSet FOLLOW_127_in_colon4403 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_colon4405_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_comma4418_static {
    public static final BitSet FOLLOW_128_in_comma4418 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_comma4420_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_apost4433_static {
    public static final BitSet FOLLOW_129_in_apost4433 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_apost4435_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_neg4448_static {
    public static final BitSet FOLLOW_130_in_neg4448 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_neg4450_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4450 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_dash4463_static {
    public static final BitSet FOLLOW_131_in_dash4463 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_dash4465_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4465 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_stop4478_static {
    public static final BitSet FOLLOW_132_in_stop4478 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_stop4480_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4480 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_nnpercent4493_static {
    public static final BitSet FOLLOW_133_in_nnpercent4493 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4495_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4495 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_lsqb4508_static {
    public static final BitSet FOLLOW_134_in_lsqb4508 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_lsqb4510_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_rsqb4523_static {
    public static final BitSet FOLLOW_135_in_rsqb4523 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rsqb4525_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dtTHE4540_static {
    public static final BitSet FOLLOW_136_in_dtTHE4540 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4542_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4542 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_lrb4556_static {
    public static final BitSet FOLLOW_137_in_lrb4556 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_lrb4558_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_rrb4571_static {
    public static final BitSet FOLLOW_138_in_rrb4571 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rrb4573_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4573 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_cc4590_static {
    public static final BitSet FOLLOW_139_in_cc4590 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cc4592_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_cd4607_static {
    public static final BitSet FOLLOW_140_in_cd4607 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cd4609_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4609 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_dt4624_static {
    public static final BitSet FOLLOW_141_in_dt4624 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_dt4626_static {
    public static final BitSet FOLLOW_TOKEN_in_dt4626 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_ex4641_static {
    public static final BitSet FOLLOW_142_in_ex4641 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_ex4643_static {
    public static final BitSet FOLLOW_TOKEN_in_ex4643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_fw4658_static {
    public static final BitSet FOLLOW_143_in_fw4658 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_fw4660_static {
    public static final BitSet FOLLOW_TOKEN_in_fw4660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_in4675_static {
    public static final BitSet FOLLOW_144_in_in4675 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_in4677_static {
    public static final BitSet FOLLOW_TOKEN_in_in4677 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_jj4692_static {
    public static final BitSet FOLLOW_145_in_jj4692 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jj4694_static {
    public static final BitSet FOLLOW_TOKEN_in_jj4694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_jjr4709_static {
    public static final BitSet FOLLOW_146_in_jjr4709 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjr4711_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr4711 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_jjs4726_static {
    public static final BitSet FOLLOW_147_in_jjs4726 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjs4728_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs4728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ls4743_static {
    public static final BitSet FOLLOW_148_in_ls4743 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_ls4745_static {
    public static final BitSet FOLLOW_TOKEN_in_ls4745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_md4760_static {
    public static final BitSet FOLLOW_149_in_md4760 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_md4762_static {
    public static final BitSet FOLLOW_TOKEN_in_md4762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_nn4777_static {
    public static final BitSet FOLLOW_150_in_nn4777 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nn4779_static {
    public static final BitSet FOLLOW_TOKEN_in_nn4779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_nns4794_static {
    public static final BitSet FOLLOW_151_in_nns4794 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nns4796_static {
    public static final BitSet FOLLOW_TOKEN_in_nns4796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_nnp4811_static {
    public static final BitSet FOLLOW_152_in_nnp4811 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnp4813_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp4813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_nnps4828_static {
    public static final BitSet FOLLOW_153_in_nnps4828 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnps4830_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps4830 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_pdt4845_static {
    public static final BitSet FOLLOW_154_in_pdt4845 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_pdt4847_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt4847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_pos4862_static {
    public static final BitSet FOLLOW_155_in_pos4862 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_pos4864_static {
    public static final BitSet FOLLOW_TOKEN_in_pos4864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_prp4879_static {
    public static final BitSet FOLLOW_156_in_prp4879 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_prp4881_static {
    public static final BitSet FOLLOW_TOKEN_in_prp4881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_prp_poss4896_static {
    public static final BitSet FOLLOW_157_in_prp_poss4896 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_prp_poss4898_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss4898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_rb4913_static {
    public static final BitSet FOLLOW_158_in_rb4913 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rb4915_static {
    public static final BitSet FOLLOW_TOKEN_in_rb4915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_rbr4930_static {
    public static final BitSet FOLLOW_159_in_rbr4930 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rbr4932_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr4932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_rbs4947_static {
    public static final BitSet FOLLOW_160_in_rbs4947 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rbs4949_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs4949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_rp4964_static {
    public static final BitSet FOLLOW_161_in_rp4964 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rp4966_static {
    public static final BitSet FOLLOW_TOKEN_in_rp4966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_sym4981_static {
    public static final BitSet FOLLOW_162_in_sym4981 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_sym4983_static {
    public static final BitSet FOLLOW_TOKEN_in_sym4983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_to4998_static {
    public static final BitSet FOLLOW_163_in_to4998 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_to5000_static {
    public static final BitSet FOLLOW_TOKEN_in_to5000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_uh5015_static {
    public static final BitSet FOLLOW_164_in_uh5015 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_uh5017_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_vb5032_static {
    public static final BitSet FOLLOW_165_in_vb5032 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vb5034_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_vbd5049_static {
    public static final BitSet FOLLOW_166_in_vbd5049 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbd5051_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_vbg5066_static {
    public static final BitSet FOLLOW_167_in_vbg5066 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbg5068_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_vbn5083_static {
    public static final BitSet FOLLOW_168_in_vbn5083 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbn5085_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_vbp5100_static {
    public static final BitSet FOLLOW_169_in_vbp5100 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbp5102_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_vbz5117_static {
    public static final BitSet FOLLOW_170_in_vbz5117 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbz5119_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_wdt5134_static {
    public static final BitSet FOLLOW_171_in_wdt5134 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wdt5136_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_wp5151_static {
    public static final BitSet FOLLOW_172_in_wp5151 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wp5153_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5153 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_wp_poss5168_static {
    public static final BitSet FOLLOW_173_in_wp_poss5168 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5170_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5170 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_wrb5185_static {
    public static final BitSet FOLLOW_174_in_wrb5185 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wrb5187_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker205_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker205 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker207_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker221_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker223_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker225_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker227_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker232_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker234_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker239_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker241_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker243_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker452_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred84_ChemicalChunker486_static {
    public static final BitSet FOLLOW_dt_in_synpred84_ChemicalChunker486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred85_ChemicalChunker489_static {
    public static final BitSet FOLLOW_advAdj_in_synpred85_ChemicalChunker489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker494_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred87_ChemicalChunker496_static {
    public static final BitSet FOLLOW_noun_in_synpred87_ChemicalChunker496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred88_ChemicalChunker498_static {
    public static final BitSet FOLLOW_number_in_synpred88_ChemicalChunker498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred89_ChemicalChunker500_static {
    public static final BitSet FOLLOW_ratio_in_synpred89_ChemicalChunker500 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred90_ChemicalChunker508_static {
    public static final BitSet FOLLOW_conjunction_in_synpred90_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred91_ChemicalChunker511_static {
    public static final BitSet FOLLOW_advAdj_in_synpred91_ChemicalChunker511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker515_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker515 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred93_ChemicalChunker517_static {
    public static final BitSet FOLLOW_noun_in_synpred93_ChemicalChunker517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred94_ChemicalChunker519_static {
    public static final BitSet FOLLOW_number_in_synpred94_ChemicalChunker519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker508_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker508 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEFB41L});

    }static class FOLLOW_advAdj_in_synpred95_ChemicalChunker511_static {
    public static final BitSet FOLLOW_advAdj_in_synpred95_ChemicalChunker511 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker515_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker515 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred95_ChemicalChunker517_static {
    public static final BitSet FOLLOW_noun_in_synpred95_ChemicalChunker517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred95_ChemicalChunker519_static {
    public static final BitSet FOLLOW_number_in_synpred95_ChemicalChunker519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred95_ChemicalChunker521_static {
    public static final BitSet FOLLOW_ratio_in_synpred95_ChemicalChunker521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker537_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker531_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker531 = new BitSet(new long[]{0x8000061C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker534_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker534 = new BitSet(new long[]{0x8000061C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker537_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker552_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred100_ChemicalChunker583_static {
    public static final BitSet FOLLOW_adj_in_synpred100_ChemicalChunker583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred101_ChemicalChunker590_static {
    public static final BitSet FOLLOW_molecule_in_synpred101_ChemicalChunker590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker592_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred104_ChemicalChunker600_static {
    public static final BitSet FOLLOW_molecule_in_synpred104_ChemicalChunker600 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred106_ChemicalChunker612_static {
    public static final BitSet FOLLOW_adj_in_synpred106_ChemicalChunker612 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker619_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker625_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker625 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker627_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred110_ChemicalChunker607_static {
    public static final BitSet FOLLOW_inin_in_synpred110_ChemicalChunker607 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1301L});

    }static class FOLLOW_dtTHE_in_synpred110_ChemicalChunker609_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred110_ChemicalChunker609 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_adj_in_synpred110_ChemicalChunker612_static {
    public static final BitSet FOLLOW_adj_in_synpred110_ChemicalChunker612 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_nnp_in_synpred110_ChemicalChunker615_static {
    public static final BitSet FOLLOW_nnp_in_synpred110_ChemicalChunker615 = new BitSet(new long[]{0x8000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker619_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker621_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_conjunction_in_synpred110_ChemicalChunker625_static {
    public static final BitSet FOLLOW_conjunction_in_synpred110_ChemicalChunker625 = new BitSet(new long[]{0x8000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker627_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_to_in_synpred113_ChemicalChunker675_static {
    public static final BitSet FOLLOW_to_in_synpred113_ChemicalChunker675 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred114_ChemicalChunker678_static {
    public static final BitSet FOLLOW_inAll_in_synpred114_ChemicalChunker678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred120_ChemicalChunker697_static {
    public static final BitSet FOLLOW_verb_in_synpred120_ChemicalChunker697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred121_ChemicalChunker700_static {
    public static final BitSet FOLLOW_md_in_synpred121_ChemicalChunker700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred122_ChemicalChunker703_static {
    public static final BitSet FOLLOW_adv_in_synpred122_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred123_ChemicalChunker706_static {
    public static final BitSet FOLLOW_adj_in_synpred123_ChemicalChunker706 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred124_ChemicalChunker709_static {
    public static final BitSet FOLLOW_neg_in_synpred124_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred125_ChemicalChunker685_static {
    public static final BitSet FOLLOW_md_in_synpred125_ChemicalChunker685 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_rbconj_in_synpred125_ChemicalChunker688_static {
    public static final BitSet FOLLOW_rbconj_in_synpred125_ChemicalChunker688 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adv_in_synpred125_ChemicalChunker691_static {
    public static final BitSet FOLLOW_adv_in_synpred125_ChemicalChunker691 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adj_in_synpred125_ChemicalChunker694_static {
    public static final BitSet FOLLOW_adj_in_synpred125_ChemicalChunker694 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_verb_in_synpred125_ChemicalChunker697_static {
    public static final BitSet FOLLOW_verb_in_synpred125_ChemicalChunker697 = new BitSet(new long[]{0x07FFFA1800000002L,0x5DBAFABD7FCF0000L,0x000007EBC02F2004L});

    }static class FOLLOW_md_in_synpred125_ChemicalChunker700_static {
    public static final BitSet FOLLOW_md_in_synpred125_ChemicalChunker700 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000003C02E0004L});

    }static class FOLLOW_adv_in_synpred125_ChemicalChunker703_static {
    public static final BitSet FOLLOW_adv_in_synpred125_ChemicalChunker703 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000003C00E0004L});

    }static class FOLLOW_adj_in_synpred125_ChemicalChunker706_static {
    public static final BitSet FOLLOW_adj_in_synpred125_ChemicalChunker706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_neg_in_synpred125_ChemicalChunker709_static {
    public static final BitSet FOLLOW_neg_in_synpred125_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred126_ChemicalChunker715_static {
    public static final BitSet FOLLOW_inoff_in_synpred126_ChemicalChunker715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred129_ChemicalChunker719_static {
    public static final BitSet FOLLOW_cc_in_synpred129_ChemicalChunker719 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3005L});

    }static class FOLLOW_comma_in_synpred129_ChemicalChunker722_static {
    public static final BitSet FOLLOW_comma_in_synpred129_ChemicalChunker722 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_prepphrase_in_synpred129_ChemicalChunker725_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred129_ChemicalChunker725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker755_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred152_ChemicalChunker781_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred152_ChemicalChunker781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred176_ChemicalChunker869_static {
    public static final BitSet FOLLOW_dash_in_synpred176_ChemicalChunker869 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_nounStructure_in_synpred176_ChemicalChunker871_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred176_ChemicalChunker871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred179_ChemicalChunker886_static {
    public static final BitSet FOLLOW_citation_in_synpred179_ChemicalChunker886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred180_ChemicalChunker888_static {
    public static final BitSet FOLLOW_cycles_in_synpred180_ChemicalChunker888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred181_ChemicalChunker890_static {
    public static final BitSet FOLLOW_molecule_in_synpred181_ChemicalChunker890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred182_ChemicalChunker892_static {
    public static final BitSet FOLLOW_apparatus_in_synpred182_ChemicalChunker892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred183_ChemicalChunker894_static {
    public static final BitSet FOLLOW_mixture_in_synpred183_ChemicalChunker894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred184_ChemicalChunker896_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred184_ChemicalChunker896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred186_ChemicalChunker900_static {
    public static final BitSet FOLLOW_nnstate_in_synpred186_ChemicalChunker900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred187_ChemicalChunker902_static {
    public static final BitSet FOLLOW_nn_in_synpred187_ChemicalChunker902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred190_ChemicalChunker908_static {
    public static final BitSet FOLLOW_nnadd_in_synpred190_ChemicalChunker908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred193_ChemicalChunker914_static {
    public static final BitSet FOLLOW_range_in_synpred193_ChemicalChunker914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_synpred194_ChemicalChunker916_static {
    public static final BitSet FOLLOW_amount_in_synpred194_ChemicalChunker916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred200_ChemicalChunker928_static {
    public static final BitSet FOLLOW_quantity_in_synpred200_ChemicalChunker928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred201_ChemicalChunker930_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred201_ChemicalChunker930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred202_ChemicalChunker932_static {
    public static final BitSet FOLLOW_measurements_in_synpred202_ChemicalChunker932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred208_ChemicalChunker944_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred208_ChemicalChunker944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred221_ChemicalChunker970_static {
    public static final BitSet FOLLOW_number_in_synpred221_ChemicalChunker970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred222_ChemicalChunker972_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred222_ChemicalChunker972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberratio_in_synpred239_ChemicalChunker1072_static {
    public static final BitSet FOLLOW_numberratio_in_synpred239_ChemicalChunker1072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred240_ChemicalChunker1100_static {
    public static final BitSet FOLLOW_colon_in_synpred240_ChemicalChunker1100 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_synpred240_ChemicalChunker1102_static {
    public static final BitSet FOLLOW_cdAlphanum_in_synpred240_ChemicalChunker1102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred241_ChemicalChunker1104_static {
    public static final BitSet FOLLOW_cd_in_synpred241_ChemicalChunker1104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred242_ChemicalChunker1121_static {
    public static final BitSet FOLLOW_colon_in_synpred242_ChemicalChunker1121 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_synpred242_ChemicalChunker1123_static {
    public static final BitSet FOLLOW_noun_in_synpred242_ChemicalChunker1123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred255_ChemicalChunker1320_static {
    public static final BitSet FOLLOW_fw_in_synpred255_ChemicalChunker1320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred256_ChemicalChunker1322_static {
    public static final BitSet FOLLOW_verb_in_synpred256_ChemicalChunker1322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred257_ChemicalChunker1324_static {
    public static final BitSet FOLLOW_nn_in_synpred257_ChemicalChunker1324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred258_ChemicalChunker1326_static {
    public static final BitSet FOLLOW_measurements_in_synpred258_ChemicalChunker1326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred261_ChemicalChunker1332_static {
    public static final BitSet FOLLOW_stop_in_synpred261_ChemicalChunker1332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred262_ChemicalChunker1334_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred262_ChemicalChunker1334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred263_ChemicalChunker1336_static {
    public static final BitSet FOLLOW_molecule_in_synpred263_ChemicalChunker1336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred264_ChemicalChunker1338_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred264_ChemicalChunker1338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred266_ChemicalChunker1342_static {
    public static final BitSet FOLLOW_sym_in_synpred266_ChemicalChunker1342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred267_ChemicalChunker1344_static {
    public static final BitSet FOLLOW_cd_in_synpred267_ChemicalChunker1344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred268_ChemicalChunker1346_static {
    public static final BitSet FOLLOW_noun_in_synpred268_ChemicalChunker1346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred269_ChemicalChunker1348_static {
    public static final BitSet FOLLOW_inof_in_synpred269_ChemicalChunker1348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred270_ChemicalChunker1350_static {
    public static final BitSet FOLLOW_inAll_in_synpred270_ChemicalChunker1350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred271_ChemicalChunker1352_static {
    public static final BitSet FOLLOW_cd_in_synpred271_ChemicalChunker1352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred272_ChemicalChunker1354_static {
    public static final BitSet FOLLOW_comma_in_synpred272_ChemicalChunker1354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred273_ChemicalChunker1356_static {
    public static final BitSet FOLLOW_adj_in_synpred273_ChemicalChunker1356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred275_ChemicalChunker1364_static {
    public static final BitSet FOLLOW_minimixture_in_synpred275_ChemicalChunker1364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred276_ChemicalChunker1366_static {
    public static final BitSet FOLLOW_fw_in_synpred276_ChemicalChunker1366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred277_ChemicalChunker1368_static {
    public static final BitSet FOLLOW_verb_in_synpred277_ChemicalChunker1368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred278_ChemicalChunker1370_static {
    public static final BitSet FOLLOW_measurements_in_synpred278_ChemicalChunker1370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred279_ChemicalChunker1372_static {
    public static final BitSet FOLLOW_nnyield_in_synpred279_ChemicalChunker1372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred282_ChemicalChunker1378_static {
    public static final BitSet FOLLOW_stop_in_synpred282_ChemicalChunker1378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred283_ChemicalChunker1380_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred283_ChemicalChunker1380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred284_ChemicalChunker1382_static {
    public static final BitSet FOLLOW_molecule_in_synpred284_ChemicalChunker1382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred285_ChemicalChunker1384_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred285_ChemicalChunker1384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred287_ChemicalChunker1388_static {
    public static final BitSet FOLLOW_sym_in_synpred287_ChemicalChunker1388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred288_ChemicalChunker1390_static {
    public static final BitSet FOLLOW_cd_in_synpred288_ChemicalChunker1390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred289_ChemicalChunker1392_static {
    public static final BitSet FOLLOW_noun_in_synpred289_ChemicalChunker1392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred290_ChemicalChunker1394_static {
    public static final BitSet FOLLOW_inof_in_synpred290_ChemicalChunker1394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred291_ChemicalChunker1396_static {
    public static final BitSet FOLLOW_inAll_in_synpred291_ChemicalChunker1396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred292_ChemicalChunker1398_static {
    public static final BitSet FOLLOW_cd_in_synpred292_ChemicalChunker1398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred293_ChemicalChunker1400_static {
    public static final BitSet FOLLOW_comma_in_synpred293_ChemicalChunker1400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred294_ChemicalChunker1402_static {
    public static final BitSet FOLLOW_adj_in_synpred294_ChemicalChunker1402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred296_ChemicalChunker1406_static {
    public static final BitSet FOLLOW_stop_in_synpred296_ChemicalChunker1406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred298_ChemicalChunker1467_static {
    public static final BitSet FOLLOW_fw_in_synpred298_ChemicalChunker1467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred299_ChemicalChunker1469_static {
    public static final BitSet FOLLOW_nn_in_synpred299_ChemicalChunker1469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred300_ChemicalChunker1471_static {
    public static final BitSet FOLLOW_verb_in_synpred300_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred301_ChemicalChunker1473_static {
    public static final BitSet FOLLOW_measurements_in_synpred301_ChemicalChunker1473 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred304_ChemicalChunker1479_static {
    public static final BitSet FOLLOW_stop_in_synpred304_ChemicalChunker1479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1481_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred305_ChemicalChunker1481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred306_ChemicalChunker1483_static {
    public static final BitSet FOLLOW_molecule_in_synpred306_ChemicalChunker1483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred307_ChemicalChunker1485_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred307_ChemicalChunker1485 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred309_ChemicalChunker1489_static {
    public static final BitSet FOLLOW_sym_in_synpred309_ChemicalChunker1489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred310_ChemicalChunker1491_static {
    public static final BitSet FOLLOW_cd_in_synpred310_ChemicalChunker1491 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred311_ChemicalChunker1493_static {
    public static final BitSet FOLLOW_noun_in_synpred311_ChemicalChunker1493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred312_ChemicalChunker1495_static {
    public static final BitSet FOLLOW_inof_in_synpred312_ChemicalChunker1495 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred313_ChemicalChunker1497_static {
    public static final BitSet FOLLOW_inAll_in_synpred313_ChemicalChunker1497 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred314_ChemicalChunker1499_static {
    public static final BitSet FOLLOW_cd_in_synpred314_ChemicalChunker1499 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred315_ChemicalChunker1501_static {
    public static final BitSet FOLLOW_comma_in_synpred315_ChemicalChunker1501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred316_ChemicalChunker1503_static {
    public static final BitSet FOLLOW_adj_in_synpred316_ChemicalChunker1503 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred318_ChemicalChunker1511_static {
    public static final BitSet FOLLOW_fw_in_synpred318_ChemicalChunker1511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred319_ChemicalChunker1513_static {
    public static final BitSet FOLLOW_verb_in_synpred319_ChemicalChunker1513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred320_ChemicalChunker1515_static {
    public static final BitSet FOLLOW_measurements_in_synpred320_ChemicalChunker1515 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred321_ChemicalChunker1517_static {
    public static final BitSet FOLLOW_nnyield_in_synpred321_ChemicalChunker1517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred324_ChemicalChunker1523_static {
    public static final BitSet FOLLOW_stop_in_synpred324_ChemicalChunker1523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred325_ChemicalChunker1525_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred325_ChemicalChunker1525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred326_ChemicalChunker1527_static {
    public static final BitSet FOLLOW_molecule_in_synpred326_ChemicalChunker1527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred327_ChemicalChunker1529_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred327_ChemicalChunker1529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred329_ChemicalChunker1533_static {
    public static final BitSet FOLLOW_sym_in_synpred329_ChemicalChunker1533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred330_ChemicalChunker1535_static {
    public static final BitSet FOLLOW_cd_in_synpred330_ChemicalChunker1535 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred331_ChemicalChunker1537_static {
    public static final BitSet FOLLOW_noun_in_synpred331_ChemicalChunker1537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred332_ChemicalChunker1539_static {
    public static final BitSet FOLLOW_inof_in_synpred332_ChemicalChunker1539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred333_ChemicalChunker1541_static {
    public static final BitSet FOLLOW_inAll_in_synpred333_ChemicalChunker1541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred334_ChemicalChunker1543_static {
    public static final BitSet FOLLOW_cd_in_synpred334_ChemicalChunker1543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred335_ChemicalChunker1545_static {
    public static final BitSet FOLLOW_comma_in_synpred335_ChemicalChunker1545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred336_ChemicalChunker1547_static {
    public static final BitSet FOLLOW_adj_in_synpred336_ChemicalChunker1547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred338_ChemicalChunker1551_static {
    public static final BitSet FOLLOW_stop_in_synpred338_ChemicalChunker1551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred348_ChemicalChunker1602_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred348_ChemicalChunker1602 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred349_ChemicalChunker1604_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred349_ChemicalChunker1604 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred350_ChemicalChunker1606_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred350_ChemicalChunker1606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred351_ChemicalChunker1608_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred351_ChemicalChunker1608 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred352_ChemicalChunker1610_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred352_ChemicalChunker1610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred356_ChemicalChunker1711_static {
    public static final BitSet FOLLOW_advAdj_in_synpred356_ChemicalChunker1711 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred361_ChemicalChunker1727_static {
    public static final BitSet FOLLOW_nntime_in_synpred361_ChemicalChunker1727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred364_ChemicalChunker1815_static {
    public static final BitSet FOLLOW_advAdj_in_synpred364_ChemicalChunker1815 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred365_ChemicalChunker1820_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred365_ChemicalChunker1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred399_ChemicalChunker1933_static {
    public static final BitSet FOLLOW_advAdj_in_synpred399_ChemicalChunker1933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred404_ChemicalChunker1948_static {
    public static final BitSet FOLLOW_nntemp_in_synpred404_ChemicalChunker1948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred412_ChemicalChunker2168_static {
    public static final BitSet FOLLOW_conjunction_in_synpred412_ChemicalChunker2168 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred413_ChemicalChunker2168_static {
    public static final BitSet FOLLOW_conjunction_in_synpred413_ChemicalChunker2168 = new BitSet(new long[]{0x8800021C00000000L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_apparatus_in_synpred413_ChemicalChunker2171_static {
    public static final BitSet FOLLOW_apparatus_in_synpred413_ChemicalChunker2171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred416_ChemicalChunker2189_static {
    public static final BitSet FOLLOW_nnApp_in_synpred416_ChemicalChunker2189 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred417_ChemicalChunker2217_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred417_ChemicalChunker2217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred418_ChemicalChunker2221_static {
    public static final BitSet FOLLOW_dash_in_synpred418_ChemicalChunker2221 = new BitSet(new long[]{0x8800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnapparatus_in_synpred418_ChemicalChunker2223_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred418_ChemicalChunker2223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred419_ChemicalChunker2237_static {
    public static final BitSet FOLLOW_quantity_in_synpred419_ChemicalChunker2237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred420_ChemicalChunker2239_static {
    public static final BitSet FOLLOW_adj_in_synpred420_ChemicalChunker2239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred421_ChemicalChunker2241_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred421_ChemicalChunker2241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred422_ChemicalChunker2243_static {
    public static final BitSet FOLLOW_nnadd_in_synpred422_ChemicalChunker2243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred423_ChemicalChunker2245_static {
    public static final BitSet FOLLOW_molecule_in_synpred423_ChemicalChunker2245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred424_ChemicalChunker2247_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred424_ChemicalChunker2247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred425_ChemicalChunker2249_static {
    public static final BitSet FOLLOW_nnstate_in_synpred425_ChemicalChunker2249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred426_ChemicalChunker2251_static {
    public static final BitSet FOLLOW_nn_in_synpred426_ChemicalChunker2251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred429_ChemicalChunker2277_static {
    public static final BitSet FOLLOW_dt_in_synpred429_ChemicalChunker2277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred430_ChemicalChunker2289_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred430_ChemicalChunker2289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred435_ChemicalChunker2324_static {
    public static final BitSet FOLLOW_yield_in_synpred435_ChemicalChunker2324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred436_ChemicalChunker2337_static {
    public static final BitSet FOLLOW_oscaront_in_synpred436_ChemicalChunker2337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound1_in_synpred438_ChemicalChunker2361_static {
    public static final BitSet FOLLOW_oscarCompound1_in_synpred438_ChemicalChunker2361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound3_in_synpred440_ChemicalChunker2365_static {
    public static final BitSet FOLLOW_oscarCompound3_in_synpred440_ChemicalChunker2365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred442_ChemicalChunker2372_static {
    public static final BitSet FOLLOW_adj_in_synpred442_ChemicalChunker2372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_reference_in_synpred443_ChemicalChunker2375_static {
    public static final BitSet FOLLOW_reference_in_synpred443_ChemicalChunker2375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred444_ChemicalChunker2450_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred444_ChemicalChunker2450 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred445_ChemicalChunker2478_static {
    public static final BitSet FOLLOW_dash_in_synpred445_ChemicalChunker2478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred446_ChemicalChunker2480_static {
    public static final BitSet FOLLOW_apost_in_synpred446_ChemicalChunker2480 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred447_ChemicalChunker2497_static {
    public static final BitSet FOLLOW_dash_in_synpred447_ChemicalChunker2497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_synpred447_ChemicalChunker2499_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred447_ChemicalChunker2499 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred448_ChemicalChunker2504_static {
    public static final BitSet FOLLOW_dash_in_synpred448_ChemicalChunker2504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred449_ChemicalChunker2518_static {
    public static final BitSet FOLLOW_quantity_in_synpred449_ChemicalChunker2518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred450_ChemicalChunker2520_static {
    public static final BitSet FOLLOW_mixture_in_synpred450_ChemicalChunker2520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred451_ChemicalChunker2528_static {
    public static final BitSet FOLLOW_mixture_in_synpred451_ChemicalChunker2528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred452_ChemicalChunker2539_static {
    public static final BitSet FOLLOW_quantity_in_synpred452_ChemicalChunker2539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred453_ChemicalChunker2541_static {
    public static final BitSet FOLLOW_mixture_in_synpred453_ChemicalChunker2541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred454_ChemicalChunker2545_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred454_ChemicalChunker2545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred455_ChemicalChunker2550_static {
    public static final BitSet FOLLOW_citation_in_synpred455_ChemicalChunker2550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred456_ChemicalChunker2552_static {
    public static final BitSet FOLLOW_quantity_in_synpred456_ChemicalChunker2552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred457_ChemicalChunker2554_static {
    public static final BitSet FOLLOW_mixture_in_synpred457_ChemicalChunker2554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred458_ChemicalChunker2568_static {
    public static final BitSet FOLLOW_quantity_in_synpred458_ChemicalChunker2568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred460_ChemicalChunker2590_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred460_ChemicalChunker2590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred461_ChemicalChunker2592_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred461_ChemicalChunker2592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred465_ChemicalChunker2678_static {
    public static final BitSet FOLLOW_citation_in_synpred465_ChemicalChunker2678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred466_ChemicalChunker2680_static {
    public static final BitSet FOLLOW_quantity_in_synpred466_ChemicalChunker2680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred467_ChemicalChunker2682_static {
    public static final BitSet FOLLOW_mixture_in_synpred467_ChemicalChunker2682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred468_ChemicalChunker2703_static {
    public static final BitSet FOLLOW_jj_in_synpred468_ChemicalChunker2703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred469_ChemicalChunker2703_static {
    public static final BitSet FOLLOW_jj_in_synpred469_ChemicalChunker2703 = new BitSet(new long[]{0xD80006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_synpred469_ChemicalChunker2706_static {
    public static final BitSet FOLLOW_noun_in_synpred469_ChemicalChunker2706 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred470_ChemicalChunker2719_static {
    public static final BitSet FOLLOW_quantity_in_synpred470_ChemicalChunker2719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_synpred471_ChemicalChunker2747_static {
    public static final BitSet FOLLOW_cdAlphanum_in_synpred471_ChemicalChunker2747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred472_ChemicalChunker2751_static {
    public static final BitSet FOLLOW_quantity_in_synpred472_ChemicalChunker2751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred473_ChemicalChunker2753_static {
    public static final BitSet FOLLOW_mixture_in_synpred473_ChemicalChunker2753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_synpred475_ChemicalChunker2769_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred475_ChemicalChunker2769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred476_ChemicalChunker2773_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred476_ChemicalChunker2773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_synpred477_ChemicalChunker2777_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred477_ChemicalChunker2777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred482_ChemicalChunker2881_static {
    public static final BitSet FOLLOW_comma_in_synpred482_ChemicalChunker2881 = new BitSet(new long[]{0x8000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_synpred482_ChemicalChunker2884_static {
    public static final BitSet FOLLOW_measurements_in_synpred482_ChemicalChunker2884 = new BitSet(new long[]{0x0000000000000002L});

    }
}