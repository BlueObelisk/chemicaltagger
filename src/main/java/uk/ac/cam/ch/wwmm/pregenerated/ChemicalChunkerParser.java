// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-07-08 15:25:29

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int T__71=71;
    public static final int WS=5;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int NEWLINE=6;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 105:
                case 106:
                case 107:
                case 108:
                case 123:
                case 128:
                case 132:
                case 133:
                case 134:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 146:
                case 148:
                case 151:
                case 163:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document208);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:10: ( ( sentence | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences230);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences232);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:44: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 103:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences240);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:51: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences242);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:9: ( ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            loop4:
            do {
                int alt4=4;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence253);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence255);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence257);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:48: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentence262);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentence264);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction )*
            loop6:
            do {
                int alt6=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_4 = input.LA(3);

                        if ( (synpred11_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 122:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentence269);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens12 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase281);
            unmatchedTokens12=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens12.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 42:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:1: unmatchedTokens : ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw13 = null;

        ChemicalChunkerParser.noun_return noun14 = null;

        ChemicalChunkerParser.verb_return verb15 = null;

        ChemicalChunkerParser.inAll_return inAll16 = null;

        ChemicalChunkerParser.dt_return dt17 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd18 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm19 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn20 = null;

        ChemicalChunkerParser.oscaront_return oscaront21 = null;

        ChemicalChunkerParser.brackets_return brackets22 = null;

        ChemicalChunkerParser.sym_return sym23 = null;

        ChemicalChunkerParser.colon_return colon24 = null;

        ChemicalChunkerParser.md_return md25 = null;

        ChemicalChunkerParser.neg_return neg26 = null;

        ChemicalChunkerParser.number_return number27 = null;

        ChemicalChunkerParser.comma_return comma28 = null;

        ChemicalChunkerParser.advAdj_return advAdj29 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:2: ( ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )
            int alt7=17;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens302);
                    fw13=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw13.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens304);
                    noun14=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun14.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens306);
                    verb15=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb15.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:18: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens308);
                    inAll16=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll16.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens310);
                    dt17=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt17.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens312);
                    oscarcd18=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd18.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens314);
                    oscarcm19=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm19.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens316);
                    oscarrn20=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn20.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens318);
                    oscaront21=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront21.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens320);
                    brackets22=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets22.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens322);
                    sym23=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym23.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:73: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens324);
                    colon24=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon24.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:79: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens326);
                    md25=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md25.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:82: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens328);
                    neg26=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg26.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens330);
                    number27=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number27.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens332);
                    comma28=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma28.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens334);
                    advAdj29=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj29.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure30 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase346);
            nounphraseStructure30=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure30.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 49:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: nounphraseStructure : ( dt )? ( adj | adv )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt31 = null;

        ChemicalChunkerParser.adj_return adj32 = null;

        ChemicalChunkerParser.adv_return adv33 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase34 = null;

        ChemicalChunkerParser.noun_return noun35 = null;

        ChemicalChunkerParser.number_return number36 = null;

        ChemicalChunkerParser.ratio_return ratio37 = null;

        ChemicalChunkerParser.conjunction_return conjunction38 = null;

        ChemicalChunkerParser.adj_return adj39 = null;

        ChemicalChunkerParser.adv_return adv40 = null;

        ChemicalChunkerParser.noun_return noun41 = null;

        ChemicalChunkerParser.number_return number42 = null;

        ChemicalChunkerParser.ratio_return ratio43 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf44 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN45 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase46 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:21: ( ( dt )? ( adj | adv )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )? ( adj | adv )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )?
            int alt8=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt8=1;
                    }
                    break;
            }

            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure365);
                    dt31=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt31.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:27: ( adj | adv )*
            loop9:
            do {
                int alt9=3;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:28: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_nounphraseStructure369);
            	    adj32=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj32.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:32: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_nounphraseStructure371);
            	    adv33=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv33.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:39: ( dissolvePhrase | noun | number | ratio )+
            int cnt10=0;
            loop10:
            do {
                int alt10=5;
                alt10 = dfa10.predict(input);
                switch (alt10) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:40: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure377);
            	    dissolvePhrase34=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase34.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:55: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure379);
            	    noun35=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun35.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:60: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure381);
            	    number36=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number36.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:67: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure383);
            	    ratio37=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio37.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:78: ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )*
            loop14:
            do {
                int alt14=4;
                alt14 = dfa14.predict(input);
                switch (alt14) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: ( conjunction )* ( adj )* ( adv )* noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: ( conjunction )*
            	    loop11:
            	    do {
            	        int alt11=2;
            	        alt11 = dfa11.predict(input);
            	        switch (alt11) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure391);
            	    	    conjunction38=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction38.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:92: ( adj )*
            	    loop12:
            	    do {
            	        int alt12=2;
            	        alt12 = dfa12.predict(input);
            	        switch (alt12) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	    	    {
            	    	    pushFollow(FOLLOW_adj_in_nounphraseStructure394);
            	    	    adj39=adj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj39.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop12;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:97: ( adv )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        switch ( input.LA(1) ) {
            	        case 169:
            	        case 170:
            	        case 171:
            	        case 172:
            	        case 173:
            	        case 175:
            	            {
            	            alt13=1;
            	            }
            	            break;

            	        }

            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_nounphraseStructure397);
            	    	    adv40=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv40.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_noun_in_nounphraseStructure401);
            	    noun41=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun41.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:108: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure403);
            	    number42=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number42.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:115: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure405);
            	    ratio43=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio43.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:126: ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )*
            loop16:
            do {
                int alt16=3;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA16_2 = input.LA(2);

                    if ( (synpred43_ChemicalChunker()) ) {
                        alt16=2;
                    }


                    }
                    break;
                case 27:
                    {
                    int LA16_3 = input.LA(2);

                    if ( (synpred41_ChemicalChunker()) ) {
                        alt16=1;
                    }


                    }
                    break;

                }

                switch (alt16) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:127: prepphraseOf
            	    {
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure413);
            	    prepphraseOf44=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf44.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:141: prepphraseIN ( dissolvePhrase )?
            	    {
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure416);
            	    prepphraseIN45=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN45.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:154: ( dissolvePhrase )?
            	    int alt15=2;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure418);
            	            dissolvePhrase46=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase46.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:1: dissolvePhrase : molecule inin molecule -> ^( NODE[\"DissolvePhrase\"] molecule inin molecule ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molecule_return molecule47 = null;

        ChemicalChunkerParser.inin_return inin48 = null;

        ChemicalChunkerParser.molecule_return molecule49 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:2: ( molecule inin molecule -> ^( NODE[\"DissolvePhrase\"] molecule inin molecule ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: molecule inin molecule
            {
            pushFollow(FOLLOW_molecule_in_dissolvePhrase432);
            molecule47=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule47.getTree());
            pushFollow(FOLLOW_inin_in_dissolvePhrase434);
            inin48=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin48.getTree());
            pushFollow(FOLLOW_molecule_in_dissolvePhrase436);
            molecule49=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule49.getTree());


            // AST REWRITE
            // elements: inin, molecule, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 52:27: -> ^( NODE[\"DissolvePhrase\"] molecule inin molecule )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:31: ^( NODE[\"DissolvePhrase\"] molecule inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "DissolvePhrase"), root_1);

                adaptor.addChild(root_1, stream_molecule.nextTree());
                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc50 = null;

        ChemicalChunkerParser.comma_return comma51 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:2: ( cc | comma )
            int alt17=2;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt17=1;
                }
                break;
            case 99:
                {
                alt17=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction463);
                    cc50=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc50.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction465);
                    comma51=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:59:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure52 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase475);
            verbphraseStructure52=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure52.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 60:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:1: verbphraseStructure : ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to53 = null;

        ChemicalChunkerParser.inAll_return inAll54 = null;

        ChemicalChunkerParser.inafter_return inafter55 = null;

        ChemicalChunkerParser.md_return md56 = null;

        ChemicalChunkerParser.adv_return adv57 = null;

        ChemicalChunkerParser.adj_return adj58 = null;

        ChemicalChunkerParser.verb_return verb59 = null;

        ChemicalChunkerParser.md_return md60 = null;

        ChemicalChunkerParser.adv_return adv61 = null;

        ChemicalChunkerParser.adj_return adj62 = null;

        ChemicalChunkerParser.neg_return neg63 = null;

        ChemicalChunkerParser.inoff_return inoff64 = null;

        ChemicalChunkerParser.cc_return cc65 = null;

        ChemicalChunkerParser.comma_return comma66 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase67 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:21: ( ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:24: ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:24: ( to )?
            int alt18=2;
            switch ( input.LA(1) ) {
                case 177:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA18_3 = input.LA(3);

                            if ( (synpred45_ChemicalChunker()) ) {
                                alt18=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt18) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure494);
                    to53=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to53.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:28: ( inAll )?
            int alt19=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt19=1;
                    }
                    break;
                case 20:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA19_4 = input.LA(3);

                            if ( (synpred46_ChemicalChunker()) ) {
                                alt19=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure497);
                    inAll54=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll54.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:35: ( inafter )?
            int alt20=2;
            switch ( input.LA(1) ) {
                case 20:
                    {
                    alt20=1;
                    }
                    break;
            }

            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure500);
                    inafter55=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter55.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                alt29 = dfa29.predict(input);
                switch (alt29) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( md )*
            	    loop21:
            	    do {
            	        int alt21=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            alt21=1;
            	            }
            	            break;

            	        }

            	        switch (alt21) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure504);
            	    	    md56=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md56.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop21;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:49: ( adv )*
            	    loop22:
            	    do {
            	        int alt22=2;
            	        switch ( input.LA(1) ) {
            	        case 169:
            	        case 170:
            	        case 171:
            	        case 172:
            	        case 173:
            	        case 175:
            	            {
            	            alt22=1;
            	            }
            	            break;

            	        }

            	        switch (alt22) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure507);
            	    	    adv57=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv57.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop22;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:54: ( adj )?
            	    int alt23=2;
            	    switch ( input.LA(1) ) {
            	        case 12:
            	        case 13:
            	        case 140:
            	        case 141:
            	        case 142:
            	        case 143:
            	            {
            	            alt23=1;
            	            }
            	            break;
            	    }

            	    switch (alt23) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure510);
            	            adj58=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj58.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:59: ( verb )+
            	    int cnt24=0;
            	    loop24:
            	    do {
            	        int alt24=2;
            	        alt24 = dfa24.predict(input);
            	        switch (alt24) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure513);
            	    	    verb59=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb59.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt24 >= 1 ) break loop24;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(24, input);
            	                throw eee;
            	        }
            	        cnt24++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:65: ( md )*
            	    loop25:
            	    do {
            	        int alt25=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA25_3 = input.LA(3);

            	                if ( (synpred52_ChemicalChunker()) ) {
            	                    alt25=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt25) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure516);
            	    	    md60=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md60.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop25;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: ( adv )*
            	    loop26:
            	    do {
            	        int alt26=2;
            	        alt26 = dfa26.predict(input);
            	        switch (alt26) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure519);
            	    	    adv61=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv61.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop26;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:74: ( adj )?
            	    int alt27=2;
            	    alt27 = dfa27.predict(input);
            	    switch (alt27) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure522);
            	            adj62=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj62.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:79: ( neg )?
            	    int alt28=2;
            	    switch ( input.LA(1) ) {
            	        case 101:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA28_3 = input.LA(3);

            	                    if ( (synpred55_ChemicalChunker()) ) {
            	                        alt28=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt28) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure525);
            	            neg63=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg63.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:87: ( inoff )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 33:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA30_3 = input.LA(3);

                            if ( (synpred57_ChemicalChunker()) ) {
                                alt30=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure531);
                    inoff64=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff64.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:94: ( ( cc )? ( comma )? prepphrase )*
            loop33:
            do {
                int alt33=2;
                alt33 = dfa33.predict(input);
                switch (alt33) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:95: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:95: ( cc )?
            	    int alt31=2;
            	    switch ( input.LA(1) ) {
            	        case 122:
            	            {
            	            alt31=1;
            	            }
            	            break;
            	    }

            	    switch (alt31) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure535);
            	            cc65=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc65.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:99: ( comma )?
            	    int alt32=2;
            	    switch ( input.LA(1) ) {
            	        case 99:
            	            {
            	            alt32=1;
            	            }
            	            break;
            	    }

            	    switch (alt32) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure538);
            	            comma66=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma66.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure541);
            	    prepphrase67=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase67.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb68 = null;

        ChemicalChunkerParser.vbp_return vbp69 = null;

        ChemicalChunkerParser.vbg_return vbg70 = null;

        ChemicalChunkerParser.vbd_return vbd71 = null;

        ChemicalChunkerParser.vbz_return vbz72 = null;

        ChemicalChunkerParser.vbn_return vbn73 = null;

        ChemicalChunkerParser.vbuse_return vbuse74 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge75 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject76 = null;

        ChemicalChunkerParser.vbadd_return vbadd77 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge78 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain79 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop80 = null;

        ChemicalChunkerParser.vbfill_return vbfill81 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend82 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat83 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus84 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate85 = null;

        ChemicalChunkerParser.vbcool_return vbcool86 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass87 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve88 = null;

        ChemicalChunkerParser.vbdry_return vbdry89 = null;

        ChemicalChunkerParser.vbextract_return vbextract90 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter91 = null;

        ChemicalChunkerParser.vbheat_return vbheat92 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease93 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition94 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate95 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify96 = null;

        ChemicalChunkerParser.vbquench_return vbquench97 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover98 = null;

        ChemicalChunkerParser.vbremove_return vbremove99 = null;

        ChemicalChunkerParser.vbstir_return vbstir100 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize101 = null;

        ChemicalChunkerParser.vbwait_return vbwait102 = null;

        ChemicalChunkerParser.vbwash_return vbwash103 = null;

        ChemicalChunkerParser.vbyield_return vbyield104 = null;

        ChemicalChunkerParser.vbchange_return vbchange105 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt34=38;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt34=1;
                }
                break;
            case 180:
                {
                alt34=2;
                }
                break;
            case 182:
                {
                alt34=3;
                }
                break;
            case 181:
                {
                alt34=4;
                }
                break;
            case 184:
                {
                alt34=5;
                }
                break;
            case 183:
                {
                alt34=6;
                }
                break;
            case 55:
                {
                alt34=7;
                }
                break;
            case 57:
                {
                alt34=8;
                }
                break;
            case 58:
                {
                alt34=9;
                }
                break;
            case 61:
                {
                alt34=10;
                }
                break;
            case 62:
                {
                alt34=11;
                }
                break;
            case 63:
                {
                alt34=12;
                }
                break;
            case 64:
                {
                alt34=13;
                }
                break;
            case 65:
                {
                alt34=14;
                }
                break;
            case 66:
                {
                alt34=15;
                }
                break;
            case 67:
                {
                alt34=16;
                }
                break;
            case 68:
                {
                alt34=17;
                }
                break;
            case 70:
                {
                alt34=18;
                }
                break;
            case 72:
                {
                alt34=19;
                }
                break;
            case 73:
                {
                alt34=20;
                }
                break;
            case 74:
                {
                alt34=21;
                }
                break;
            case 75:
                {
                alt34=22;
                }
                break;
            case 77:
                {
                alt34=23;
                }
                break;
            case 79:
                {
                alt34=24;
                }
                break;
            case 81:
                {
                alt34=25;
                }
                break;
            case 82:
                {
                alt34=26;
                }
                break;
            case 83:
                {
                alt34=27;
                }
                break;
            case 84:
                {
                alt34=28;
                }
                break;
            case 86:
                {
                alt34=29;
                }
                break;
            case 88:
                {
                alt34=30;
                }
                break;
            case 89:
                {
                alt34=31;
                }
                break;
            case 90:
                {
                alt34=32;
                }
                break;
            case 92:
                {
                alt34=33;
                }
                break;
            case 93:
                {
                alt34=34;
                }
                break;
            case 95:
                {
                alt34=35;
                }
                break;
            case 96:
                {
                alt34=36;
                }
                break;
            case 97:
                {
                alt34=37;
                }
                break;
            case 56:
                {
                alt34=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }

            switch (alt34) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb552);
                    vb68=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb68.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb554);
                    vbp69=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp69.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb556);
                    vbg70=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg70.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb558);
                    vbd71=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd71.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb560);
                    vbz72=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz72.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb562);
                    vbn73=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn73.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb564);
                    vbuse74=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse74.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb566);
                    vbsubmerge75=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge75.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:48: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb568);
                    vbsubject76=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject76.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:58: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb570);
                    vbadd77=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd77.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:64: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb572);
                    vbcharge78=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge78.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:73: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb574);
                    vbcontain79=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain79.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:83: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb576);
                    vbdrop80=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop80.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:90: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb578);
                    vbfill81=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill81.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:97: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb580);
                    vbsuspend82=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend82.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:107: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb582);
                    vbtreat83=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat83.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:115: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb584);
                    vbapparatus84=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus84.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:127: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb586);
                    vbconcentrate85=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate85.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:141: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb588);
                    vbcool86=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool86.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:148: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb590);
                    vbdegass87=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass87.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:157: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb592);
                    vbdissolve88=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve88.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:168: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb594);
                    vbdry89=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry89.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:174: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb596);
                    vbextract90=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract90.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:184: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb598);
                    vbfilter91=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter91.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:194: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb601);
                    vbheat92=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat92.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:201: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb603);
                    vbincrease93=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease93.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:212: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb605);
                    vbpartition94=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition94.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:224: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb607);
                    vbprecipitate95=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate95.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:238: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb609);
                    vbpurify96=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify96.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:247: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb611);
                    vbquench97=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench97.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:256: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb613);
                    vbrecover98=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover98.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:266: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb615);
                    vbremove99=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove99.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:275: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb617);
                    vbstir100=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir100.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:282: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb619);
                    vbsynthesize101=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize101.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:295: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb621);
                    vbwait102=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait102.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:302: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb623);
                    vbwash103=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash103.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:309: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb625);
                    vbyield104=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield104.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:62:317: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb627);
                    vbchange105=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange105.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd106 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd107 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:8: ( cd | oscarcd )
            int alt35=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                alt35=1;
                }
                break;
            case 11:
                {
                alt35=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number635);
                    cd106=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd106.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number637);
                    oscarcd107=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd107.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt108 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss109 = null;

        ChemicalChunkerParser.wpo_return wpo110 = null;

        ChemicalChunkerParser.wpo_return wpo111 = null;

        ChemicalChunkerParser.wps_return wps112 = null;

        ChemicalChunkerParser.wql_return wql113 = null;

        ChemicalChunkerParser.wrb_return wrb114 = null;

        ChemicalChunkerParser.ex_return ex115 = null;

        ChemicalChunkerParser.pdt_return pdt116 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt36=9;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause645);
                    wdt108=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt108.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause647);
                    wp_poss109=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss109.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause649);
                    wpo110=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo110.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause651);
                    wpo111=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo111.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause653);
                    wps112=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps112.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause655);
                    wql113=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql113.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause657);
                    wrb114=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb114.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause659);
                    ex115=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex115.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause661);
                    pdt116=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt116.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: noun : ( prp | molecule | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp117 = null;

        ChemicalChunkerParser.molecule_return molecule118 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule119 = null;

        ChemicalChunkerParser.nnstate_return nnstate120 = null;

        ChemicalChunkerParser.nn_return nn121 = null;

        ChemicalChunkerParser.nns_return nns122 = null;

        ChemicalChunkerParser.nnp_return nnp123 = null;

        ChemicalChunkerParser.nnadd_return nnadd124 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase125 = null;

        ChemicalChunkerParser.nnexample_return nnexample126 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr127 = null;

        ChemicalChunkerParser.range_return range128 = null;

        ChemicalChunkerParser.amount_return amount129 = null;

        ChemicalChunkerParser.mixture_return mixture130 = null;

        ChemicalChunkerParser.nntime_return nntime131 = null;

        ChemicalChunkerParser.apparatus_return apparatus132 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere133 = null;

        ChemicalChunkerParser.nneq_return nneq134 = null;

        ChemicalChunkerParser.quantity_return quantity135 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity136 = null;

        ChemicalChunkerParser.measurements_return measurements137 = null;

        ChemicalChunkerParser.nntemp_return nntemp138 = null;

        ChemicalChunkerParser.nnflash_return nnflash139 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral140 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod141 = null;

        ChemicalChunkerParser.nnamount_return nnamount142 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure143 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn144 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography145 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum146 = null;

        ChemicalChunkerParser.nncycle_return nncycle147 = null;

        ChemicalChunkerParser.nntimes_return nntimes148 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate149 = null;

        ChemicalChunkerParser.nnvol_return nnvol150 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify151 = null;

        ChemicalChunkerParser.wdt_return wdt152 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss153 = null;

        ChemicalChunkerParser.wpo_return wpo154 = null;

        ChemicalChunkerParser.wps_return wps155 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize156 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture157 = null;

        ChemicalChunkerParser.oscaront_return oscaront158 = null;

        ChemicalChunkerParser.number_return number159 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound160 = null;

        ChemicalChunkerParser.nnextract_return nnextract161 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter162 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate163 = null;

        ChemicalChunkerParser.nnremove_return nnremove164 = null;

        ChemicalChunkerParser.fw_return fw165 = null;

        ChemicalChunkerParser.fwin_return fwin166 = null;

        ChemicalChunkerParser.sym_return sym167 = null;

        ChemicalChunkerParser.clause_return clause168 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:6: ( prp | molecule | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt37=52;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:9: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_noun669);
                    prp117=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp117.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:13: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_noun671);
                    molecule118=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule118.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:22: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_noun673);
                    unnamedmolecule119=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule119.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:38: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_noun675);
                    nnstate120=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate120.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:46: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_noun677);
                    nn121=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn121.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:49: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_noun679);
                    nns122=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns122.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:53: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_noun681);
                    nnp123=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp123.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:57: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_noun683);
                    nnadd124=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd124.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:63: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_noun685);
                    preparationphrase125=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase125.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:81: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_noun687);
                    nnexample126=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample126.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:91: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_noun689);
                    oscarcpr127=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr127.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:100: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_noun691);
                    range128=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range128.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:106: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_noun693);
                    amount129=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount129.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:113: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_noun695);
                    mixture130=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture130.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:121: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_noun697);
                    nntime131=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime131.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:128: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_noun699);
                    apparatus132=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus132.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:138: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_noun701);
                    nnatmosphere133=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere133.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:151: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_noun703);
                    nneq134=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq134.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:156: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_noun705);
                    quantity135=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity135.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:165: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_noun707);
                    nnchementity136=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity136.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:178: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_noun709);
                    measurements137=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements137.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:191: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_noun711);
                    nntemp138=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp138.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:198: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_noun713);
                    nnflash139=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash139.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:206: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_noun715);
                    nngeneral140=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral140.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:216: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_noun717);
                    nnmethod141=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod141.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:225: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_noun719);
                    nnamount142=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount142.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:234: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_noun721);
                    nnpressure143=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure143.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:245: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_noun723);
                    nncolumn144=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn144.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:254: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_noun725);
                    nnchromatography145=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography145.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:271: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_noun727);
                    nnvacuum146=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum146.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:280: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_noun729);
                    nncycle147=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle147.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:288: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_noun731);
                    nntimes148=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes148.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:296: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_noun733);
                    nnconcentrate149=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate149.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:310: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_noun735);
                    nnvol150=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol150.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:316: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_noun737);
                    nnpurify151=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify151.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:325: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_noun739);
                    wdt152=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt152.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:329: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_noun741);
                    wp_poss153=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss153.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:337: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_noun743);
                    wpo154=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo154.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:341: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_noun745);
                    wps155=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps155.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:345: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_noun747);
                    nnsynthesize156=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize156.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:358: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_noun749);
                    nnmixture157=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture157.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:368: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_noun751);
                    oscaront158=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront158.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:377: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_noun753);
                    number159=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number159.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:384: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_noun755);
                    oscarCompound160=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound160.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:398: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_noun757);
                    nnextract161=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract161.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:408: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_noun759);
                    nnfilter162=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter162.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:417: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_noun761);
                    nnprecipitate163=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate163.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:431: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_noun763);
                    nnremove164=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove164.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:440: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_noun765);
                    fw165=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw165.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:443: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_noun767);
                    fwin166=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin166.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:448: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_noun769);
                    sym167=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym167.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:452: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_noun771);
                    clause168=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:1: range : cd dash cd ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd169 = null;

        ChemicalChunkerParser.dash_return dash170 = null;

        ChemicalChunkerParser.cd_return cd171 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:6: ( cd dash cd )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: cd dash cd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_range777);
            cd169=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd169.getTree());
            pushFollow(FOLLOW_dash_in_range779);
            dash170=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash170.getTree());
            pushFollow(FOLLOW_cd_in_range781);
            cd171=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd171.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio172 = null;

        ChemicalChunkerParser.nounratio_return nounratio173 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:9: ( numberratio | nounratio )
            int alt38=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 102:
                    case 104:
                    case 146:
                        {
                        alt38=2;
                        }
                        break;
                    case 98:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 123:
                                {
                                switch ( input.LA(6) ) {
                                case TOKEN:
                                    {
                                    int LA38_7 = input.LA(7);

                                    if ( (synpred158_ChemicalChunker()) ) {
                                        alt38=1;
                                    }
                                    else if ( (true) ) {
                                        alt38=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 38, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 38, 6, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 34:
                            case 35:
                            case 36:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 59:
                            case 60:
                            case 69:
                            case 71:
                            case 78:
                            case 80:
                            case 85:
                            case 87:
                            case 91:
                            case 93:
                            case 94:
                            case 99:
                            case 107:
                            case 132:
                            case 133:
                            case 134:
                            case 140:
                            case 141:
                            case 142:
                            case 143:
                            case 146:
                            case 148:
                            case 151:
                            case 163:
                            case 176:
                            case 185:
                            case 186:
                            case 187:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                                {
                                alt38=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 38, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 38, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 38, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;
                }

                }
                break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 34:
            case 35:
            case 36:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 59:
            case 60:
            case 69:
            case 71:
            case 78:
            case 80:
            case 85:
            case 87:
            case 91:
            case 93:
            case 94:
            case 99:
            case 107:
            case 132:
            case 133:
            case 134:
            case 140:
            case 141:
            case 142:
            case 143:
            case 146:
            case 148:
            case 151:
            case 163:
            case 176:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
                {
                alt38=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }

            switch (alt38) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio789);
                    numberratio172=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio172.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio791);
                    nounratio173=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 68:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:1: numberratio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd174 = null;

        ChemicalChunkerParser.colon_return colon175 = null;

        ChemicalChunkerParser.cd_return cd176 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:13: ( cd ( colon cd )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:16: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio815);
            cd174=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd174.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:19: ( colon cd )+
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 123:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA39_5 = input.LA(5);

                                if ( (synpred159_ChemicalChunker()) ) {
                                    alt39=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt39) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:20: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio818);
            	    colon175=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon175.getTree());
            	    pushFollow(FOLLOW_cd_in_numberratio820);
            	    cd176=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd176.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun177 = null;

        ChemicalChunkerParser.colon_return colon178 = null;

        ChemicalChunkerParser.noun_return noun179 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio833);
            noun177=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun177.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:11: ( colon noun )+
            int cnt40=0;
            loop40:
            do {
                int alt40=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA40_2 = input.LA(2);

                    if ( (synpred160_ChemicalChunker()) ) {
                        alt40=1;
                    }


                    }
                    break;

                }

                switch (alt40) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio837);
            	    colon178=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon178.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio839);
            	    noun179=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun179.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2180 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1181 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt41=2;
            switch ( input.LA(1) ) {
            case 99:
                {
                alt41=1;
                }
                break;
            case 107:
                {
                alt41=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:11: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture852);
                    mixtureStructure2180=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2180.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:29: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture854);
                    mixtureStructure1181=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1181.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 73:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:73:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma182 = null;

        ChemicalChunkerParser.lrb_return lrb183 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent184 = null;

        ChemicalChunkerParser.rrb_return rrb185 = null;

        ChemicalChunkerParser.comma_return comma186 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure2875);
            comma182=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma182.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure2877);
            lrb183=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb183.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure2879);
            mixtureContent184=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent184.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure2881);
            rrb185=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb185.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure2883);
            comma186=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma186.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb187 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent188 = null;

        ChemicalChunkerParser.rrb_return rrb189 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure1890);
            lrb187=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb187.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure1892);
            mixtureContent188=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent188.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure1894);
            rrb189=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb189.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: mixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw190 = null;

        ChemicalChunkerParser.verb_return verb191 = null;

        ChemicalChunkerParser.measurements_return measurements192 = null;

        ChemicalChunkerParser.md_return md193 = null;

        ChemicalChunkerParser.stop_return stop194 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound195 = null;

        ChemicalChunkerParser.molecule_return molecule196 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule197 = null;

        ChemicalChunkerParser.dash_return dash198 = null;

        ChemicalChunkerParser.sym_return sym199 = null;

        ChemicalChunkerParser.cd_return cd200 = null;

        ChemicalChunkerParser.noun_return noun201 = null;

        ChemicalChunkerParser.inof_return inof202 = null;

        ChemicalChunkerParser.inAll_return inAll203 = null;

        ChemicalChunkerParser.cd_return cd204 = null;

        ChemicalChunkerParser.comma_return comma205 = null;

        ChemicalChunkerParser.adj_return adj206 = null;

        ChemicalChunkerParser.colon_return colon207 = null;

        ChemicalChunkerParser.stop_return stop208 = null;

        ChemicalChunkerParser.fw_return fw209 = null;

        ChemicalChunkerParser.verb_return verb210 = null;

        ChemicalChunkerParser.measurements_return measurements211 = null;

        ChemicalChunkerParser.md_return md212 = null;

        ChemicalChunkerParser.stop_return stop213 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound214 = null;

        ChemicalChunkerParser.molecule_return molecule215 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule216 = null;

        ChemicalChunkerParser.dash_return dash217 = null;

        ChemicalChunkerParser.sym_return sym218 = null;

        ChemicalChunkerParser.cd_return cd219 = null;

        ChemicalChunkerParser.noun_return noun220 = null;

        ChemicalChunkerParser.inof_return inof221 = null;

        ChemicalChunkerParser.inAll_return inAll222 = null;

        ChemicalChunkerParser.cd_return cd223 = null;

        ChemicalChunkerParser.comma_return comma224 = null;

        ChemicalChunkerParser.adj_return adj225 = null;

        ChemicalChunkerParser.colon_return colon226 = null;

        ChemicalChunkerParser.stop_return stop227 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:15: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt42=19;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent903);
                    fw190=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw190.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent905);
                    verb191=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb191.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:28: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent907);
                    measurements192=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements192.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:41: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent909);
                    md193=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md193.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:44: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent911);
                    stop194=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop194.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:49: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent913);
                    oscarCompound195=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound195.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:63: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent915);
                    molecule196=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule196.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:72: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent917);
                    unnamedmolecule197=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule197.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:88: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent919);
                    dash198=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash198.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:93: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent921);
                    sym199=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym199.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:97: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent923);
                    cd200=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd200.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:100: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent925);
                    noun201=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun201.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:105: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent927);
                    inof202=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof202.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:110: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent929);
                    inAll203=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll203.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:116: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent931);
                    cd204=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd204.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:119: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent933);
                    comma205=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma205.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:125: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent935);
                    adj206=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj206.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:129: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent937);
                    colon207=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon207.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:135: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent939);
                    stop208=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop208.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt43=0;
            loop43:
            do {
                int alt43=20;
                alt43 = dfa43.predict(input);
                switch (alt43) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:142: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent943);
            	    fw209=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw209.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:145: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent945);
            	    verb210=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb210.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:150: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent947);
            	    measurements211=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements211.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:163: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent949);
            	    md212=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md212.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:166: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent951);
            	    stop213=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop213.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:171: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent953);
            	    oscarCompound214=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound214.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:185: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent955);
            	    molecule215=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule215.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:194: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent957);
            	    unnamedmolecule216=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule216.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:210: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent959);
            	    dash217=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash217.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:215: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent961);
            	    sym218=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym218.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:219: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent963);
            	    cd219=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd219.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:222: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent965);
            	    noun220=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun220.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:227: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent967);
            	    inof221=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof221.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:232: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent969);
            	    inAll222=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll222.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:238: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent971);
            	    cd223=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd223.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:241: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent973);
            	    comma224=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma224.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:247: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent975);
            	    adj225=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj225.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:251: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent977);
            	    colon226=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon226.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:257: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent979);
            	    stop227=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop227.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt43 >= 1 ) break loop43;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(43, input);
                        throw eee;
                }
                cnt43++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj228 = null;

        ChemicalChunkerParser.jjr_return jjr229 = null;

        ChemicalChunkerParser.jjs_return jjs230 = null;

        ChemicalChunkerParser.jjt_return jjt231 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj232 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn233 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt44=6;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt44=1;
                }
                break;
            case 141:
                {
                alt44=2;
                }
                break;
            case 142:
                {
                alt44=3;
                }
                break;
            case 143:
                {
                alt44=4;
                }
                break;
            case 12:
                {
                alt44=5;
                }
                break;
            case 13:
                {
                alt44=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj989);
                    jj228=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj228.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj991);
                    jjr229=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr229.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj993);
                    jjs230=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs230.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj995);
                    jjt231=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt231.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj997);
                    oscarcj232=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj232.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj999);
                    oscarrn233=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn233.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:1: adv : ( rb | rbr | rbt | rp | rbs | rbconj );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb234 = null;

        ChemicalChunkerParser.rbr_return rbr235 = null;

        ChemicalChunkerParser.rbt_return rbt236 = null;

        ChemicalChunkerParser.rp_return rp237 = null;

        ChemicalChunkerParser.rbs_return rbs238 = null;

        ChemicalChunkerParser.rbconj_return rbconj239 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:5: ( rb | rbr | rbt | rp | rbs | rbconj )
            int alt45=6;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt45=1;
                }
                break;
            case 170:
                {
                alt45=2;
                }
                break;
            case 172:
                {
                alt45=3;
                }
                break;
            case 175:
                {
                alt45=4;
                }
                break;
            case 173:
                {
                alt45=5;
                }
                break;
            case 171:
                {
                alt45=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1006);
                    rb234=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb234.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1008);
                    rbr235=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr235.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1010);
                    rbt236=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt236.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1012);
                    rp237=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp237.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1014);
                    rbs238=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs238.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:78:25: rbconj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbconj_in_adv1016);
                    rbconj239=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj239.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg240 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere241 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime242 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp243 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN244 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther245 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:5: ( neg )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 101:
                    {
                    alt46=1;
                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1029);
                    neg240=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg240.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            int alt47=5;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1033);
                    prepphraseAtmosphere241=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere241.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1035);
                    prepphraseTime242=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime242.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1037);
                    prepphraseTemp243=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp243.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1039);
                    prepphraseIN244=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN244.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:75: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1041);
                    prepphraseOther245=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther245.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:85:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv246 = null;

        ChemicalChunkerParser.adj_return adj247 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:2: ( adv | adj )
            int alt48=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt48=1;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt48=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }

            switch (alt48) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1055);
                    adv246=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv246.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1057);
                    adj247=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj247.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:1: prepphraseOther : ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj248 = null;

        ChemicalChunkerParser.inAll_return inAll249 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase250 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:2: ( ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:4: ( advAdj )* ( inAll )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:4: ( advAdj )*
            loop49:
            do {
                int alt49=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt49=1;
                    }
                    break;

                }

                switch (alt49) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1066);
            	    advAdj248=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj248.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:12: ( inAll )+
            int cnt50=0;
            loop50:
            do {
                int alt50=2;
                switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt50=1;
                    }
                    break;

                }

                switch (alt50) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1069);
            	    inAll249=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll249.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        throw eee;
                }
                cnt50++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1073);
            nounphrase250=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase250.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 88:31: -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:35: ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:57: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof251 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase252 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1100);
            inof251=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof251.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1103);
            nounphrase252=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase252.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 90:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:90:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:1: prepphraseTime : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ -> ^( NODE[\"TimePhrase\"] ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj253 = null;

        ChemicalChunkerParser.inAll_return inAll254 = null;

        ChemicalChunkerParser.dt_return dt255 = null;

        ChemicalChunkerParser.advAdj_return advAdj256 = null;

        ChemicalChunkerParser.cd_return cd257 = null;

        ChemicalChunkerParser.nntime_return nntime258 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntime=new RewriteRuleSubtreeStream(adaptor,"rule nntime");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ -> ^( NODE[\"TimePhrase\"] ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:3: ( advAdj )*
            loop51:
            do {
                int alt51=2;
                alt51 = dfa51.predict(input);
                switch (alt51) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseTime1125);
            	    advAdj253=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj253.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:11: ( inAll )?
            int alt52=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt52=1;
                    }
                    break;
            }

            switch (alt52) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTime1128);
                    inAll254=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll254.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:19: ( dt )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTime1132);
                    dt255=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt255.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:23: ( advAdj )*
            loop54:
            do {
                int alt54=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt54=1;
                    }
                    break;

                }

                switch (alt54) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseTime1135);
            	    advAdj256=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj256.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:31: ( cd )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTime1138);
                    cd257=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd257.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:35: ( nntime )+
            int cnt56=0;
            loop56:
            do {
                int alt56=2;
                switch ( input.LA(1) ) {
                case 36:
                    {
                    int LA56_2 = input.LA(2);

                    if ( (synpred222_ChemicalChunker()) ) {
                        alt56=1;
                    }


                    }
                    break;

                }

                switch (alt56) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepphraseTime1141);
            	    nntime258=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nntime.add(nntime258.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt56 >= 1 ) break loop56;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(56, input);
                        throw eee;
                }
                cnt56++;
            } while (true);



            // AST REWRITE
            // elements: inAll, dt, advAdj, nntime, advAdj, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 93:43: -> ^( NODE[\"TimePhrase\"] ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:47: ^( NODE[\"TimePhrase\"] ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:69: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:77: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:84: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:88: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:96: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                if ( !(stream_nntime.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nntime.hasNext() ) {
                    adaptor.addChild(root_1, stream_nntime.nextTree());

                }
                stream_nntime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:95:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin259 = null;

        ChemicalChunkerParser.molecule_return molecule260 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1178);
            inin259=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin259.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1180);
            molecule260=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule260.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 96:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:98:1: prepphraseAtmosphere : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? -> ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder261 = null;

        ChemicalChunkerParser.dt_return dt262 = null;

        ChemicalChunkerParser.advAdj_return advAdj263 = null;

        ChemicalChunkerParser.molecule_return molecule264 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere265 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inunder=new RewriteRuleSubtreeStream(adaptor,"rule inunder");
        RewriteRuleSubtreeStream stream_nnatmosphere=new RewriteRuleSubtreeStream(adaptor,"rule nnatmosphere");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? -> ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:4: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphere1204);
            inunder261=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inunder.add(inunder261.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:13: ( dt )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt57=1;
                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphere1207);
                    dt262=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt262.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:17: ( advAdj )*
            loop58:
            do {
                int alt58=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt58=1;
                    }
                    break;

                }

                switch (alt58) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphere1210);
            	    advAdj263=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj263.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphere1213);
            molecule264=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule264.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:34: ( nnatmosphere )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 40:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA59_3 = input.LA(3);

                            if ( (synpred225_ChemicalChunker()) ) {
                                alt59=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphere1215);
                    nnatmosphere265=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnatmosphere.add(nnatmosphere265.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nnatmosphere, dt, molecule, advAdj, inunder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 99:48: -> ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:52: ^( NODE[\"AtmospherePhrase\"] inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_inunder.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:89: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:93: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_molecule.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:110: ( nnatmosphere )?
                if ( stream_nnatmosphere.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnatmosphere.nextTree());

                }
                stream_nnatmosphere.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in266 = null;

        ChemicalChunkerParser.inafter_return inafter267 = null;

        ChemicalChunkerParser.inas_return inas268 = null;

        ChemicalChunkerParser.inbefore_return inbefore269 = null;

        ChemicalChunkerParser.inby_return inby270 = null;

        ChemicalChunkerParser.infor_return infor271 = null;

        ChemicalChunkerParser.infrom_return infrom272 = null;

        ChemicalChunkerParser.inin_return inin273 = null;

        ChemicalChunkerParser.ininto_return ininto274 = null;

        ChemicalChunkerParser.inof_return inof275 = null;

        ChemicalChunkerParser.inoff_return inoff276 = null;

        ChemicalChunkerParser.inon_return inon277 = null;

        ChemicalChunkerParser.inover_return inover278 = null;

        ChemicalChunkerParser.inunder_return inunder279 = null;

        ChemicalChunkerParser.invia_return invia280 = null;

        ChemicalChunkerParser.inwith_return inwith281 = null;

        ChemicalChunkerParser.inwithout_return inwithout282 = null;

        ChemicalChunkerParser.to_return to283 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt60=18;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt60=1;
                }
                break;
            case 20:
                {
                alt60=2;
                }
                break;
            case 18:
                {
                alt60=3;
                }
                break;
            case 19:
                {
                alt60=4;
                }
                break;
            case 25:
                {
                alt60=5;
                }
                break;
            case 29:
                {
                alt60=6;
                }
                break;
            case 30:
                {
                alt60=7;
                }
                break;
            case 21:
                {
                alt60=8;
                }
                break;
            case 22:
                {
                alt60=9;
                }
                break;
            case 27:
                {
                alt60=10;
                }
                break;
            case 33:
                {
                alt60=11;
                }
                break;
            case 28:
                {
                alt60=12;
                }
                break;
            case 32:
                {
                alt60=13;
                }
                break;
            case 31:
                {
                alt60=14;
                }
                break;
            case 26:
                {
                alt60=15;
                }
                break;
            case 23:
                {
                alt60=16;
                }
                break;
            case 24:
                {
                alt60=17;
                }
                break;
            case 177:
                {
                alt60=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }

            switch (alt60) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1251);
                    in266=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in266.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1253);
                    inafter267=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter267.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1255);
                    inas268=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas268.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1257);
                    inbefore269=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore269.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1259);
                    inby270=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby270.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1261);
                    infor271=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor271.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1263);
                    infrom272=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom272.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1265);
                    inin273=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin273.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1267);
                    ininto274=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto274.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1269);
                    inof275=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof275.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1271);
                    inoff276=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff276.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1273);
                    inon277=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon277.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1275);
                    inover278=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover278.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1277);
                    inunder279=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder279.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1279);
                    invia280=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia280.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1281);
                    inwith281=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith281.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1283);
                    inwithout282=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout282.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1285);
                    to283=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to283.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: prepphraseTemp : ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntemp )+ -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv284 = null;

        ChemicalChunkerParser.adj_return adj285 = null;

        ChemicalChunkerParser.inAll_return inAll286 = null;

        ChemicalChunkerParser.dt_return dt287 = null;

        ChemicalChunkerParser.adv_return adv288 = null;

        ChemicalChunkerParser.adj_return adj289 = null;

        ChemicalChunkerParser.cd_return cd290 = null;

        ChemicalChunkerParser.nntemp_return nntemp291 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_nntemp=new RewriteRuleSubtreeStream(adaptor,"rule nntemp");
        RewriteRuleSubtreeStream stream_adj=new RewriteRuleSubtreeStream(adaptor,"rule adj");
        RewriteRuleSubtreeStream stream_adv=new RewriteRuleSubtreeStream(adaptor,"rule adv");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:15: ( ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntemp )+ -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:18: ( adv | adj )? ( inAll )? ( dt )? ( adv | adj )? ( cd )? ( nntemp )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:18: ( adv | adj )?
            int alt61=3;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:19: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseTemp1293);
                    adv284=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv284.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:23: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseTemp1295);
                    adj285=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj285.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:29: ( inAll )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTemp1299);
                    inAll286=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inAll.add(inAll286.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:36: ( dt )?
            int alt63=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt63=1;
                    }
                    break;
            }

            switch (alt63) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTemp1302);
                    dt287=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt287.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:40: ( adv | adj )?
            int alt64=3;
            switch ( input.LA(1) ) {
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt64=1;
                    }
                    break;
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                    {
                    alt64=2;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:41: adv
                    {
                    pushFollow(FOLLOW_adv_in_prepphraseTemp1306);
                    adv288=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adv.add(adv288.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:45: adj
                    {
                    pushFollow(FOLLOW_adj_in_prepphraseTemp1308);
                    adj289=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adj.add(adj289.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:51: ( cd )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTemp1312);
                    cd290=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd290.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:55: ( nntemp )+
            int cnt66=0;
            loop66:
            do {
                int alt66=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA66_2 = input.LA(2);

                    if ( (synpred250_ChemicalChunker()) ) {
                        alt66=1;
                    }


                    }
                    break;

                }

                switch (alt66) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTemp1315);
            	    nntemp291=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nntemp.add(nntemp291.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt66 >= 1 ) break loop66;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(66, input);
                        throw eee;
                }
                cnt66++;
            } while (true);



            // AST REWRITE
            // elements: nntemp, adv, cd, inAll, adj, adv, adj, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 103:63: -> ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:67: ^( NODE[\"TempPhrase\"] ( adv )? ( adj )? ( inAll )? ( dt )? ( adv )? ( adj )? ( cd )? ( nntemp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:89: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:94: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:100: ( inAll )?
                if ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:108: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:112: ( adv )?
                if ( stream_adv.hasNext() ) {
                    adaptor.addChild(root_1, stream_adv.nextTree());

                }
                stream_adv.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:117: ( adj )?
                if ( stream_adj.hasNext() ) {
                    adaptor.addChild(root_1, stream_adj.nextTree());

                }
                stream_adj.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:122: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                if ( !(stream_nntemp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nntemp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nntemp.nextTree());

                }
                stream_nntemp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:1: amount : cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd292 = null;

        ChemicalChunkerParser.nnamount_return nnamount293 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:8: ( cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount1363);
            cd292=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd292.getTree());
            pushFollow(FOLLOW_nnamount_in_amount1365);
            nnamount293=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount293.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 106:22: -> ^( NODE[\"AMOUNT\"] cd nnamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:25: ^( NODE[\"AMOUNT\"] cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:1: mass : cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd294 = null;

        ChemicalChunkerParser.nnmass_return nnmass295 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:6: ( cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass1386);
            cd294=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd294.getTree());
            pushFollow(FOLLOW_nnmass_in_mass1388);
            nnmass295=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass295.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:17: -> ^( NODE[\"MASS\"] cd nnmass )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:20: ^( NODE[\"MASS\"] cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:1: percent : cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd296 = null;

        ChemicalChunkerParser.nn_return nn297 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent298 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:9: ( cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:11: cd ( nn )? nnpercent
            {
            pushFollow(FOLLOW_cd_in_percent1409);
            cd296=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd296.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:14: ( nn )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent1411);
                    nn297=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn297.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent1414);
            nnpercent298=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent298.getTree());


            // AST REWRITE
            // elements: nn, nnpercent, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:28: -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:31: ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd299 = null;

        ChemicalChunkerParser.nnvol_return nnvol300 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume1438);
            cd299=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd299.getTree());
            pushFollow(FOLLOW_nnvol_in_volume1440);
            nnvol300=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol300.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 109:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:1: molar : ( cd )? nnmolar -> ^( NODE[\"MOLAR\"] ( cd )? nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd301 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar302 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:7: ( ( cd )? nnmolar -> ^( NODE[\"MOLAR\"] ( cd )? nnmolar ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:9: ( cd )? nnmolar
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:9: ( cd )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_molar1461);
                    cd301=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd301.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmolar_in_molar1464);
            nnmolar302=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar302.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 110:21: -> ^( NODE[\"MOLAR\"] ( cd )? nnmolar )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:24: ^( NODE[\"MOLAR\"] ( cd )? nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:110:42: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize303 = null;

        ChemicalChunkerParser.inas_return inas304 = null;

        ChemicalChunkerParser.nnexample_return nnexample305 = null;

        ChemicalChunkerParser.cd_return cd306 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase307 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1487);
            vbsynthesize303=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize303.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1489);
            inas304=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas304.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:22: ( nnexample cd | prepphrase )
            int alt69=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt69=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 36:
            case 44:
            case 101:
            case 123:
            case 128:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
            case 177:
                {
                alt69=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1492);
                    nnexample305=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample305.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1494);
                    cd306=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd306.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1497);
                    prepphrase307=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase307.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:113:1: apparatus : ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus308 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus309 = null;


        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:2: ( ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:4: ( preapparatus )* ( nnapparatus )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:4: ( preapparatus )*
            loop70:
            do {
                int alt70=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 35:
                case 38:
                case 43:
                case 48:
                case 59:
                case 107:
                case 123:
                case 140:
                case 141:
                case 142:
                case 143:
                case 146:
                    {
                    alt70=1;
                    }
                    break;

                }

                switch (alt70) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1507);
            	    preapparatus308=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus308.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:18: ( nnapparatus )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA71_2 = input.LA(2);

                    if ( (synpred255_ChemicalChunker()) ) {
                        alt71=1;
                    }


                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1510);
            	    nnapparatus309=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus309.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, nnapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 114:30: -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:33: ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:55: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:1: preapparatus : ( quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate );
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity310 = null;

        ChemicalChunkerParser.nn_return nn311 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure312 = null;

        ChemicalChunkerParser.adj_return adj313 = null;

        ChemicalChunkerParser.nnadd_return nnadd314 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity315 = null;

        ChemicalChunkerParser.nnstate_return nnstate316 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:2: ( quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate )
            int alt72=7;
            switch ( input.LA(1) ) {
            case 38:
            case 107:
            case 123:
                {
                alt72=1;
                }
                break;
            case 146:
                {
                alt72=2;
                }
                break;
            case 48:
                {
                alt72=3;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt72=4;
                }
                break;
            case 59:
                {
                alt72=5;
                }
                break;
            case 43:
                {
                alt72=6;
                }
                break;
            case 35:
                {
                alt72=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:6: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_preapparatus1537);
                    quantity310=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity310.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:15: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_preapparatus1539);
                    nn311=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn311.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:18: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_preapparatus1541);
                    nnpressure312=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure312.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:29: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_preapparatus1543);
                    adj313=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj313.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_preapparatus1545);
                    nnadd314=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd314.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:39: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_preapparatus1547);
                    nnchementity315=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity315.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:52: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_preapparatus1549);
                    nnstate316=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate316.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:118:1: measurements : ( cd nn )? measurementtypes ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd317 = null;

        ChemicalChunkerParser.nn_return nn318 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes319 = null;

        ChemicalChunkerParser.dt_return dt320 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:2: ( ( cd nn )? measurementtypes ( dt )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:3: ( cd nn )? measurementtypes ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:3: ( cd nn )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 146:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 123:
                                                    {
                                                    alt73=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements1558);
                    cd317=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd317.getTree());
                    pushFollow(FOLLOW_nn_in_measurements1560);
                    nn318=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn318.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_measurementtypes_in_measurements1564);
            measurementtypes319=measurementtypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes319.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:32: ( dt )?
            int alt74=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA74_3 = input.LA(3);

                            if ( (synpred263_ChemicalChunker()) ) {
                                alt74=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt74) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements1569);
                    dt320=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt320.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar321 = null;

        ChemicalChunkerParser.amount_return amount322 = null;

        ChemicalChunkerParser.mass_return mass323 = null;

        ChemicalChunkerParser.percent_return percent324 = null;

        ChemicalChunkerParser.volume_return volume325 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:2: ( molar | amount | mass | percent | volume )
            int alt75=5;
            switch ( input.LA(1) ) {
            case 123:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 39:
                        {
                        alt75=2;
                        }
                        break;
                    case 38:
                        {
                        alt75=1;
                        }
                        break;
                    case 104:
                    case 146:
                        {
                        alt75=4;
                        }
                        break;
                    case 37:
                        {
                        alt75=3;
                        }
                        break;
                    case 42:
                        {
                        alt75=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt75=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes1579);
                    molar321=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar321.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes1581);
                    amount322=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount322.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes1583);
                    mass323=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass323.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes1585);
                    percent324=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent324.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes1587);
                    volume325=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume325.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1326 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2327 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3328 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4329 = null;

        ChemicalChunkerParser.oscarCompound5_return oscarCompound5330 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm331 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            int alt76=6;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:19: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1600);
                    oscarCompound1326=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1326.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:34: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1602);
                    oscarCompound2327=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2327.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:49: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1604);
                    oscarCompound3328=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3328.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:64: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound1606);
                    oscarCompound4329=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4329.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:79: oscarCompound5
                    {
                    pushFollow(FOLLOW_oscarCompound5_in_oscarCompound1608);
                    oscarCompound5330=oscarCompound5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound5330.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:94: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1610);
                    oscarcm331=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm331.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound5"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:1: oscarCompound5 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound5_return oscarCompound5() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound5_return retval = new ChemicalChunkerParser.oscarCompound5_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb332 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm333 = null;

        ChemicalChunkerParser.rrb_return rrb334 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound51620);
            lrb332=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb332.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound51622);
            oscarcm333=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm333.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound51624);
            rrb334=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb334.getTree());


            // AST REWRITE
            // elements: lrb, rrb, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 126:34: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:126:37: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound5"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:1: oscarCompound4 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm335 = null;

        ChemicalChunkerParser.dash_return dash336 = null;

        ChemicalChunkerParser.apost_return apost337 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:18: oscarcm ( dash | apost )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound41647);
            oscarcm335=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm335.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:26: ( dash | apost )+
            int cnt77=0;
            loop77:
            do {
                int alt77=3;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA77_4 = input.LA(3);

                        if ( (synpred273_ChemicalChunker()) ) {
                            alt77=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 100:
                    {
                    alt77=2;
                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:27: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound41650);
            	    dash336=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash336.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:32: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound41652);
            	    apost337=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost337.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, apost, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:71: ( dash )*
                while ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:77: ( apost )*
                while ( stream_apost.hasNext() ) {
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:1: oscarCompound3 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm338 = null;

        ChemicalChunkerParser.dash_return dash339 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm340 = null;

        ChemicalChunkerParser.dash_return dash341 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31679);
            oscarcm338=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm338.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:26: ( dash oscarcm )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 54:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA78_5 = input.LA(5);

                                if ( (synpred275_ChemicalChunker()) ) {
                                    alt78=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:27: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound31682);
            	    dash339=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash339.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound31684);
            	    oscarcm340=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm340.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:42: ( dash )?
            int alt79=2;
            switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA79_3 = input.LA(3);

                            if ( (synpred276_ChemicalChunker()) ) {
                                alt79=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt79) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound31688);
                    dash341=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash341.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, oscarcm, dash, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 128:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()||stream_dash.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext()||stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:93: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm342 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm343 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21716);
            oscarcm342=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm342.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:26: ( oscarcm )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 54:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA80_3 = input.LA(3);

                        if ( (synpred277_ChemicalChunker()) ) {
                            alt80=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21718);
            	    oscarcm343=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm343.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 129:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm344 = null;

        ChemicalChunkerParser.jj_return jj345 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm346 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:18: oscarcm jj oscarcm
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11739);
            oscarcm344=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm344.getTree());
            pushFollow(FOLLOW_jj_in_oscarCompound11741);
            jj345=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj345.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11743);
            oscarcm346=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm346.getTree());


            // AST REWRITE
            // elements: oscarcm, jj, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_jj.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity347 = null;

        ChemicalChunkerParser.mixture_return mixture348 = null;

        ChemicalChunkerParser.inof_return inof349 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound350 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:2: ( ( quantity | mixture )+ inof oscarCompound )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:3: ( quantity | mixture )+
            int cnt81=0;
            loop81:
            do {
                int alt81=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA81_2 = input.LA(2);

                    if ( (synpred278_ChemicalChunker()) ) {
                        alt81=1;
                    }
                    else if ( (synpred279_ChemicalChunker()) ) {
                        alt81=2;
                    }


                    }
                    break;
                case 38:
                case 123:
                    {
                    alt81=1;
                    }
                    break;
                case 99:
                    {
                    alt81=2;
                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11767);
            	    quantity347=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity347.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11769);
            	    mixture348=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture348.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11773);
            inof349=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof349.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11775);
            oscarCompound350=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity351 = null;

        ChemicalChunkerParser.mixture_return mixture352 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound353 = null;

        ChemicalChunkerParser.quantity_return quantity354 = null;

        ChemicalChunkerParser.mixture_return mixture355 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:2: ( ( quantity | mixture )* ( oscarCompound )+ ( quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:3: ( quantity | mixture )* ( oscarCompound )+ ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:3: ( quantity | mixture )*
            loop82:
            do {
                int alt82=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA82_2 = input.LA(2);

                    if ( (synpred280_ChemicalChunker()) ) {
                        alt82=1;
                    }
                    else if ( (synpred281_ChemicalChunker()) ) {
                        alt82=2;
                    }


                    }
                    break;
                case 38:
                case 123:
                    {
                    alt82=1;
                    }
                    break;
                case 99:
                    {
                    alt82=2;
                    }
                    break;

                }

                switch (alt82) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21785);
            	    quantity351=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity351.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21787);
            	    mixture352=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture352.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:23: ( oscarCompound )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA83_1 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt83=1;
                    }


                    }
                    break;
                case 54:
                    {
                    int LA83_3 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt83=1;
                    }


                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21791);
            	    oscarCompound353=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound353.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:39: ( quantity | mixture )*
            loop84:
            do {
                int alt84=3;
                alt84 = dfa84.predict(input);
                switch (alt84) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:40: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21796);
            	    quantity354=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity354.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:49: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21798);
            	    mixture355=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture355.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1356 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2357 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:16: ( moleculeamount1 | moleculeamount2 )
            int alt85=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA85_1 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA85_2 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA85_3 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 3, input);

                    throw nvae;
                }
                }
                break;
            case 99:
                {
                int LA85_4 = input.LA(2);

                if ( (synpred285_ChemicalChunker()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 4, input);

                    throw nvae;
                }
                }
                break;
            case 54:
                {
                alt85=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1809);
                    moleculeamount1356=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1356.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1813);
                    moleculeamount2357=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2357.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount358 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1834);
            moleculeamount358=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount358.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity359 = null;

        ChemicalChunkerParser.inof_return inof360 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd361 = null;

        ChemicalChunkerParser.cd_return cd362 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11856);
            quantity359=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity359.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11858);
            inof360=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof360.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:18: ( oscarcd | cd )
            int alt86=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt86=1;
                }
                break;
            case 123:
                {
                alt86=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11861);
                    oscarcd361=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd361.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11863);
                    cd362=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd362.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:146:1: unnamedmoleculeamount2 : oscarcd ( quantity )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd363 = null;

        ChemicalChunkerParser.quantity_return quantity364 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:2: ( oscarcd ( quantity )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:3: oscarcd ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21871);
            oscarcd363=oscarcd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd363.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:11: ( quantity )*
            loop87:
            do {
                int alt87=2;
                alt87 = dfa87.predict(input);
                switch (alt87) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount21873);
            	    quantity364=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity364.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity365 = null;

        ChemicalChunkerParser.inof_return inof366 = null;

        ChemicalChunkerParser.jj_return jj367 = null;

        ChemicalChunkerParser.noun_return noun368 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount31886);
            quantity365=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity365.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31888);
            inof366=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof366.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:17: ( ( jj )? noun )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                alt89 = dfa89.predict(input);
                switch (alt89) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: ( jj )?
            	    int alt88=2;
            	    switch ( input.LA(1) ) {
            	        case 140:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA88_3 = input.LA(3);

            	                    if ( (synpred288_ChemicalChunker()) ) {
            	                        alt88=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt88) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31891);
            	            jj367=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj367.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31894);
            	    noun368=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun368.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1369 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2370 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3371 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt90=3;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA90_1 = input.LA(2);

                if ( (synpred290_ChemicalChunker()) ) {
                    alt90=1;
                }
                else if ( (true) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA90_2 = input.LA(2);

                if ( (synpred290_ChemicalChunker()) ) {
                    alt90=1;
                }
                else if ( (true) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA90_3 = input.LA(2);

                if ( (synpred290_ChemicalChunker()) ) {
                    alt90=1;
                }
                else if ( (true) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 3, input);

                    throw nvae;
                }
                }
                break;
            case 11:
                {
                alt90=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1905);
                    unnamedmoleculeamount1369=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1369.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1909);
                    unnamedmoleculeamount2370=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2370.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1913);
                    unnamedmoleculeamount3371=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3371.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount372 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1926);
            unnamedmoleculeamount372=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount372.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 159:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1373 = null;

        ChemicalChunkerParser.quantity2_return quantity2374 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:14: ( quantity1 | quantity2 )
            int alt91=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt91=1;
                }
                break;
            case 38:
            case 123:
                {
                alt91=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity1949);
                    quantity1373=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1373.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity1951);
                    quantity2374=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2374.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity2, quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb375 = null;

        ChemicalChunkerParser.measurements_return measurements376 = null;

        ChemicalChunkerParser.comma_return comma377 = null;

        ChemicalChunkerParser.measurements_return measurements378 = null;

        ChemicalChunkerParser.comma_return comma379 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase380 = null;

        ChemicalChunkerParser.stop_return stop381 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase382 = null;

        ChemicalChunkerParser.rrb_return rrb383 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity11976);
            lrb375=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb375.getTree());
            pushFollow(FOLLOW_measurements_in_quantity11978);
            measurements376=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements376.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:21: ( comma measurements )*
            loop92:
            do {
                int alt92=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 123:
                            {
                            alt92=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt92) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11981);
            	    comma377=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma377.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity11984);
            	    measurements378=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements378.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:44: ( comma preparationphrase )*
            loop93:
            do {
                int alt93=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    alt93=1;
                    }
                    break;

                }

                switch (alt93) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11989);
            	    comma379=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma379.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11991);
            	    preparationphrase380=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase380.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:71: ( stop preparationphrase )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity11996);
            	    stop381=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop381.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11998);
            	    preparationphrase382=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase382.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12003);
            rrb383=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:164:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements384 = null;

        ChemicalChunkerParser.comma_return comma385 = null;

        ChemicalChunkerParser.measurements_return measurements386 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22014);
            measurements384=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements384.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:18: ( comma measurements )*
            loop95:
            do {
                int alt95=2;
                alt95 = dfa95.predict(input);
                switch (alt95) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22017);
            	    comma385=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma385.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22020);
            	    measurements386=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements386.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral387 = null;

        ChemicalChunkerParser.nn_return nn388 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod389 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd390 = null;

        ChemicalChunkerParser.cd_return cd391 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:5: ( nngeneral | nn )?
            int alt96=3;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt96=1;
                    }
                    break;
                case 146:
                    {
                    alt96=2;
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2036);
                    nngeneral387=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral387.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2038);
                    nn388=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn388.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2042);
            nnmethod389=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod389.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:30: ( oscarcd | cd )?
            int alt97=3;
            switch ( input.LA(1) ) {
                case 11:
                    {
                    alt97=1;
                    }
                    break;
                case 123:
                    {
                    alt97=2;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2045);
                    oscarcd390=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd390.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2047);
                    cd391=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd391.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb392 = null;

        ChemicalChunkerParser.rrb_return rrb393 = null;

        ChemicalChunkerParser.lsqb_return lsqb394 = null;

        ChemicalChunkerParser.rsqb_return rsqb395 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt98=0;
            loop98:
            do {
                int alt98=5;
                alt98 = dfa98.predict(input);
                switch (alt98) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2069);
            	    lrb392=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb392.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2071);
            	    rrb393=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb393.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2073);
            	    lsqb394=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb394.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2075);
            	    rsqb395=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb395.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt98 >= 1 ) break loop98;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(98, input);
                        throw eee;
                }
                cnt98++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal396=null;
        Token TOKEN397=null;

        Object string_literal396_tree=null;
        Object TOKEN397_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:8: ( 'OSCAR-CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal396=(Token)match(input,11,FOLLOW_11_in_oscarcd2083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal396_tree = (Object)adaptor.create(string_literal396);
            adaptor.addChild(root_0, string_literal396_tree);
            }
            TOKEN397=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN397_tree = (Object)adaptor.create(TOKEN397);
            adaptor.addChild(root_0, TOKEN397_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal398=null;
        Token TOKEN399=null;

        Object string_literal398_tree=null;
        Object TOKEN399_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:8: ( 'OSCAR-CJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:173:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal398=(Token)match(input,12,FOLLOW_12_in_oscarcj2090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal398_tree = (Object)adaptor.create(string_literal398);
            adaptor.addChild(root_0, string_literal398_tree);
            }
            TOKEN399=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN399_tree = (Object)adaptor.create(TOKEN399);
            adaptor.addChild(root_0, TOKEN399_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal400=null;
        Token TOKEN401=null;

        Object string_literal400_tree=null;
        Object TOKEN401_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:8: ( 'OSCAR-RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:174:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal400=(Token)match(input,13,FOLLOW_13_in_oscarrn2097); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal400_tree = (Object)adaptor.create(string_literal400);
            adaptor.addChild(root_0, string_literal400_tree);
            }
            TOKEN401=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN401_tree = (Object)adaptor.create(TOKEN401);
            adaptor.addChild(root_0, TOKEN401_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal402=null;
        Token TOKEN403=null;

        Object string_literal402_tree=null;
        Object TOKEN403_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:9: ( 'OSCAR-CPR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal402=(Token)match(input,14,FOLLOW_14_in_oscarcpr2104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal402_tree = (Object)adaptor.create(string_literal402);
            adaptor.addChild(root_0, string_literal402_tree);
            }
            TOKEN403=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN403_tree = (Object)adaptor.create(TOKEN403);
            adaptor.addChild(root_0, TOKEN403_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal404=null;
        Token TOKEN405=null;

        Object string_literal404_tree=null;
        Object TOKEN405_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:9: ( 'OSCAR-ONT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal404=(Token)match(input,15,FOLLOW_15_in_oscaront2112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal404_tree = (Object)adaptor.create(string_literal404);
            adaptor.addChild(root_0, string_literal404_tree);
            }
            TOKEN405=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN405_tree = (Object)adaptor.create(TOKEN405);
            adaptor.addChild(root_0, TOKEN405_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal406=null;
        Token TOKEN407=null;

        Object string_literal406_tree=null;
        Object TOKEN407_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:10: ( 'TM-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal406=(Token)match(input,16,FOLLOW_16_in_tmunicode2119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal406_tree = (Object)adaptor.create(string_literal406);
            adaptor.addChild(root_0, string_literal406_tree);
            }
            TOKEN407=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN407_tree = (Object)adaptor.create(TOKEN407);
            adaptor.addChild(root_0, TOKEN407_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal408=null;
        Token TOKEN409=null;

        Object string_literal408_tree=null;
        Object TOKEN409_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:10: ( 'CD-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal408=(Token)match(input,17,FOLLOW_17_in_cdunicode2126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal408_tree = (Object)adaptor.create(string_literal408);
            adaptor.addChild(root_0, string_literal408_tree);
            }
            TOKEN409=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN409_tree = (Object)adaptor.create(TOKEN409);
            adaptor.addChild(root_0, TOKEN409_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal410=null;
        Token TOKEN411=null;

        Object string_literal410_tree=null;
        Object TOKEN411_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:5: ( 'IN-AS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal410=(Token)match(input,18,FOLLOW_18_in_inas2135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal410_tree = (Object)adaptor.create(string_literal410);
            adaptor.addChild(root_0, string_literal410_tree);
            }
            TOKEN411=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN411_tree = (Object)adaptor.create(TOKEN411);
            adaptor.addChild(root_0, TOKEN411_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal412=null;
        Token TOKEN413=null;

        Object string_literal412_tree=null;
        Object TOKEN413_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:9: ( 'IN-BEFORE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal412=(Token)match(input,19,FOLLOW_19_in_inbefore2142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal412_tree = (Object)adaptor.create(string_literal412);
            adaptor.addChild(root_0, string_literal412_tree);
            }
            TOKEN413=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN413_tree = (Object)adaptor.create(TOKEN413);
            adaptor.addChild(root_0, TOKEN413_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal414=null;
        Token TOKEN415=null;

        Object string_literal414_tree=null;
        Object TOKEN415_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:8: ( 'IN-AFTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal414=(Token)match(input,20,FOLLOW_20_in_inafter2149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal414_tree = (Object)adaptor.create(string_literal414);
            adaptor.addChild(root_0, string_literal414_tree);
            }
            TOKEN415=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN415_tree = (Object)adaptor.create(TOKEN415);
            adaptor.addChild(root_0, TOKEN415_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal416=null;
        Token TOKEN417=null;

        Object string_literal416_tree=null;
        Object TOKEN417_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:5: ( 'IN-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal416=(Token)match(input,21,FOLLOW_21_in_inin2156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal416_tree = (Object)adaptor.create(string_literal416);
            adaptor.addChild(root_0, string_literal416_tree);
            }
            TOKEN417=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN417_tree = (Object)adaptor.create(TOKEN417);
            adaptor.addChild(root_0, TOKEN417_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal418=null;
        Token TOKEN419=null;

        Object string_literal418_tree=null;
        Object TOKEN419_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:7: ( 'IN-INTO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal418=(Token)match(input,22,FOLLOW_22_in_ininto2163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal418_tree = (Object)adaptor.create(string_literal418);
            adaptor.addChild(root_0, string_literal418_tree);
            }
            TOKEN419=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN419_tree = (Object)adaptor.create(TOKEN419);
            adaptor.addChild(root_0, TOKEN419_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal420=null;
        Token TOKEN421=null;

        Object string_literal420_tree=null;
        Object TOKEN421_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:7: ( 'IN-WITH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal420=(Token)match(input,23,FOLLOW_23_in_inwith2170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal420_tree = (Object)adaptor.create(string_literal420);
            adaptor.addChild(root_0, string_literal420_tree);
            }
            TOKEN421=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN421_tree = (Object)adaptor.create(TOKEN421);
            adaptor.addChild(root_0, TOKEN421_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal422=null;
        Token TOKEN423=null;

        Object string_literal422_tree=null;
        Object TOKEN423_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:10: ( 'IN-WITHOUT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal422=(Token)match(input,24,FOLLOW_24_in_inwithout2177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal422_tree = (Object)adaptor.create(string_literal422);
            adaptor.addChild(root_0, string_literal422_tree);
            }
            TOKEN423=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN423_tree = (Object)adaptor.create(TOKEN423);
            adaptor.addChild(root_0, TOKEN423_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal424=null;
        Token TOKEN425=null;

        Object string_literal424_tree=null;
        Object TOKEN425_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:5: ( 'IN-BY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal424=(Token)match(input,25,FOLLOW_25_in_inby2184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal424_tree = (Object)adaptor.create(string_literal424);
            adaptor.addChild(root_0, string_literal424_tree);
            }
            TOKEN425=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN425_tree = (Object)adaptor.create(TOKEN425);
            adaptor.addChild(root_0, TOKEN425_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal426=null;
        Token TOKEN427=null;

        Object string_literal426_tree=null;
        Object TOKEN427_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:6: ( 'IN-VIA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal426=(Token)match(input,26,FOLLOW_26_in_invia2191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal426_tree = (Object)adaptor.create(string_literal426);
            adaptor.addChild(root_0, string_literal426_tree);
            }
            TOKEN427=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN427_tree = (Object)adaptor.create(TOKEN427);
            adaptor.addChild(root_0, TOKEN427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal428=null;
        Token TOKEN429=null;

        Object string_literal428_tree=null;
        Object TOKEN429_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:5: ( 'IN-OF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal428=(Token)match(input,27,FOLLOW_27_in_inof2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal428_tree = (Object)adaptor.create(string_literal428);
            adaptor.addChild(root_0, string_literal428_tree);
            }
            TOKEN429=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN429_tree = (Object)adaptor.create(TOKEN429);
            adaptor.addChild(root_0, TOKEN429_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal430=null;
        Token TOKEN431=null;

        Object string_literal430_tree=null;
        Object TOKEN431_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:5: ( 'IN-ON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal430=(Token)match(input,28,FOLLOW_28_in_inon2205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal430_tree = (Object)adaptor.create(string_literal430);
            adaptor.addChild(root_0, string_literal430_tree);
            }
            TOKEN431=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN431_tree = (Object)adaptor.create(TOKEN431);
            adaptor.addChild(root_0, TOKEN431_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal432=null;
        Token TOKEN433=null;

        Object string_literal432_tree=null;
        Object TOKEN433_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:6: ( 'IN-FOR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal432=(Token)match(input,29,FOLLOW_29_in_infor2212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal432_tree = (Object)adaptor.create(string_literal432);
            adaptor.addChild(root_0, string_literal432_tree);
            }
            TOKEN433=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor2214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN433_tree = (Object)adaptor.create(TOKEN433);
            adaptor.addChild(root_0, TOKEN433_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal434=null;
        Token TOKEN435=null;

        Object string_literal434_tree=null;
        Object TOKEN435_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:7: ( 'IN-FROM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal434=(Token)match(input,30,FOLLOW_30_in_infrom2219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal434_tree = (Object)adaptor.create(string_literal434);
            adaptor.addChild(root_0, string_literal434_tree);
            }
            TOKEN435=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom2221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN435_tree = (Object)adaptor.create(TOKEN435);
            adaptor.addChild(root_0, TOKEN435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal436=null;
        Token TOKEN437=null;

        Object string_literal436_tree=null;
        Object TOKEN437_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:8: ( 'IN-UNDER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal436=(Token)match(input,31,FOLLOW_31_in_inunder2226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal436_tree = (Object)adaptor.create(string_literal436);
            adaptor.addChild(root_0, string_literal436_tree);
            }
            TOKEN437=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder2228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN437_tree = (Object)adaptor.create(TOKEN437);
            adaptor.addChild(root_0, TOKEN437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal438=null;
        Token TOKEN439=null;

        Object string_literal438_tree=null;
        Object TOKEN439_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:7: ( 'IN-OVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal438=(Token)match(input,32,FOLLOW_32_in_inover2233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = (Object)adaptor.create(string_literal438);
            adaptor.addChild(root_0, string_literal438_tree);
            }
            TOKEN439=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN439_tree = (Object)adaptor.create(TOKEN439);
            adaptor.addChild(root_0, TOKEN439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal440=null;
        Token TOKEN441=null;

        Object string_literal440_tree=null;
        Object TOKEN441_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:6: ( 'IN-OFF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal440=(Token)match(input,33,FOLLOW_33_in_inoff2240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal440_tree = (Object)adaptor.create(string_literal440);
            adaptor.addChild(root_0, string_literal440_tree);
            }
            TOKEN441=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff2242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN441_tree = (Object)adaptor.create(TOKEN441);
            adaptor.addChild(root_0, TOKEN441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal442=null;
        Token TOKEN443=null;

        Object string_literal442_tree=null;
        Object TOKEN443_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:10: ( 'NN-EXAMPLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal442=(Token)match(input,34,FOLLOW_34_in_nnexample2249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal442_tree = (Object)adaptor.create(string_literal442);
            adaptor.addChild(root_0, string_literal442_tree);
            }
            TOKEN443=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample2251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN443_tree = (Object)adaptor.create(TOKEN443);
            adaptor.addChild(root_0, TOKEN443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal444=null;
        Token TOKEN445=null;

        Object string_literal444_tree=null;
        Object TOKEN445_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:8: ( 'NN-STATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal444=(Token)match(input,35,FOLLOW_35_in_nnstate2256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = (Object)adaptor.create(string_literal444);
            adaptor.addChild(root_0, string_literal444_tree);
            }
            TOKEN445=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate2258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN445_tree = (Object)adaptor.create(TOKEN445);
            adaptor.addChild(root_0, TOKEN445_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal446=null;
        Token TOKEN447=null;

        Object string_literal446_tree=null;
        Object TOKEN447_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:7: ( 'NN-TIME' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal446=(Token)match(input,36,FOLLOW_36_in_nntime2263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal446_tree = (Object)adaptor.create(string_literal446);
            adaptor.addChild(root_0, string_literal446_tree);
            }
            TOKEN447=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime2265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN447_tree = (Object)adaptor.create(TOKEN447);
            adaptor.addChild(root_0, TOKEN447_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal448=null;
        Token TOKEN449=null;

        Object string_literal448_tree=null;
        Object TOKEN449_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:7: ( 'NN-MASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal448=(Token)match(input,37,FOLLOW_37_in_nnmass2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = (Object)adaptor.create(string_literal448);
            adaptor.addChild(root_0, string_literal448_tree);
            }
            TOKEN449=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass2272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN449_tree = (Object)adaptor.create(TOKEN449);
            adaptor.addChild(root_0, TOKEN449_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal450=null;
        Token TOKEN451=null;

        Object string_literal450_tree=null;
        Object TOKEN451_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:8: ( 'NN-MOLAR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal450=(Token)match(input,38,FOLLOW_38_in_nnmolar2278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal450_tree = (Object)adaptor.create(string_literal450);
            adaptor.addChild(root_0, string_literal450_tree);
            }
            TOKEN451=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar2281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN451_tree = (Object)adaptor.create(TOKEN451);
            adaptor.addChild(root_0, TOKEN451_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal452=null;
        Token TOKEN453=null;

        Object string_literal452_tree=null;
        Object TOKEN453_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:9: ( 'NN-AMOUNT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal452=(Token)match(input,39,FOLLOW_39_in_nnamount2286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal452_tree = (Object)adaptor.create(string_literal452);
            adaptor.addChild(root_0, string_literal452_tree);
            }
            TOKEN453=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount2288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN453_tree = (Object)adaptor.create(TOKEN453);
            adaptor.addChild(root_0, TOKEN453_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal454=null;
        Token TOKEN455=null;

        Object string_literal454_tree=null;
        Object TOKEN455_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:13: ( 'NN-ATMOSPHERE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal454=(Token)match(input,40,FOLLOW_40_in_nnatmosphere2293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal454_tree = (Object)adaptor.create(string_literal454);
            adaptor.addChild(root_0, string_literal454_tree);
            }
            TOKEN455=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere2295); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN455_tree = (Object)adaptor.create(TOKEN455);
            adaptor.addChild(root_0, TOKEN455_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal456=null;
        Token TOKEN457=null;

        Object string_literal456_tree=null;
        Object TOKEN457_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:5: ( 'NN-EQ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal456=(Token)match(input,41,FOLLOW_41_in_nneq2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = (Object)adaptor.create(string_literal456);
            adaptor.addChild(root_0, string_literal456_tree);
            }
            TOKEN457=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq2302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN457_tree = (Object)adaptor.create(TOKEN457);
            adaptor.addChild(root_0, TOKEN457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal458=null;
        Token TOKEN459=null;

        Object string_literal458_tree=null;
        Object TOKEN459_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:6: ( 'NN-VOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal458=(Token)match(input,42,FOLLOW_42_in_nnvol2307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal458_tree = (Object)adaptor.create(string_literal458);
            adaptor.addChild(root_0, string_literal458_tree);
            }
            TOKEN459=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol2309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN459_tree = (Object)adaptor.create(TOKEN459);
            adaptor.addChild(root_0, TOKEN459_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal460=null;
        Token TOKEN461=null;

        Object string_literal460_tree=null;
        Object TOKEN461_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:13: ( 'NN-CHEMENTITY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal460=(Token)match(input,43,FOLLOW_43_in_nnchementity2314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = (Object)adaptor.create(string_literal460);
            adaptor.addChild(root_0, string_literal460_tree);
            }
            TOKEN461=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity2316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN461_tree = (Object)adaptor.create(TOKEN461);
            adaptor.addChild(root_0, TOKEN461_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal462=null;
        Token TOKEN463=null;

        Object string_literal462_tree=null;
        Object TOKEN463_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:7: ( 'NN-TEMP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal462=(Token)match(input,44,FOLLOW_44_in_nntemp2321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = (Object)adaptor.create(string_literal462);
            adaptor.addChild(root_0, string_literal462_tree);
            }
            TOKEN463=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp2323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN463_tree = (Object)adaptor.create(TOKEN463);
            adaptor.addChild(root_0, TOKEN463_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal464=null;
        Token TOKEN465=null;

        Object string_literal464_tree=null;
        Object TOKEN465_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:8: ( 'NN-FLASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal464=(Token)match(input,45,FOLLOW_45_in_nnflash2328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal464_tree = (Object)adaptor.create(string_literal464);
            adaptor.addChild(root_0, string_literal464_tree);
            }
            TOKEN465=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash2330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN465_tree = (Object)adaptor.create(TOKEN465);
            adaptor.addChild(root_0, TOKEN465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal466=null;
        Token TOKEN467=null;

        Object string_literal466_tree=null;
        Object TOKEN467_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:10: ( 'NN-GENERAL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal466=(Token)match(input,46,FOLLOW_46_in_nngeneral2335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = (Object)adaptor.create(string_literal466);
            adaptor.addChild(root_0, string_literal466_tree);
            }
            TOKEN467=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral2337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN467_tree = (Object)adaptor.create(TOKEN467);
            adaptor.addChild(root_0, TOKEN467_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal468=null;
        Token TOKEN469=null;

        Object string_literal468_tree=null;
        Object TOKEN469_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:9: ( 'NN-METHOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal468=(Token)match(input,47,FOLLOW_47_in_nnmethod2342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal468_tree = (Object)adaptor.create(string_literal468);
            adaptor.addChild(root_0, string_literal468_tree);
            }
            TOKEN469=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod2344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN469_tree = (Object)adaptor.create(TOKEN469);
            adaptor.addChild(root_0, TOKEN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal470=null;
        Token TOKEN471=null;

        Object string_literal470_tree=null;
        Object TOKEN471_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:11: ( 'NN-PRESSURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal470=(Token)match(input,48,FOLLOW_48_in_nnpressure2350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal470_tree = (Object)adaptor.create(string_literal470);
            adaptor.addChild(root_0, string_literal470_tree);
            }
            TOKEN471=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure2352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN471_tree = (Object)adaptor.create(TOKEN471);
            adaptor.addChild(root_0, TOKEN471_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal472=null;
        Token TOKEN473=null;

        Object string_literal472_tree=null;
        Object TOKEN473_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:9: ( 'NN-COLUMN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal472=(Token)match(input,49,FOLLOW_49_in_nncolumn2357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = (Object)adaptor.create(string_literal472);
            adaptor.addChild(root_0, string_literal472_tree);
            }
            TOKEN473=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn2359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN473_tree = (Object)adaptor.create(TOKEN473);
            adaptor.addChild(root_0, TOKEN473_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal474=null;
        Token TOKEN475=null;

        Object string_literal474_tree=null;
        Object TOKEN475_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal474=(Token)match(input,50,FOLLOW_50_in_nnchromatography2364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = (Object)adaptor.create(string_literal474);
            adaptor.addChild(root_0, string_literal474_tree);
            }
            TOKEN475=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography2366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN475_tree = (Object)adaptor.create(TOKEN475);
            adaptor.addChild(root_0, TOKEN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal476=null;
        Token TOKEN477=null;

        Object string_literal476_tree=null;
        Object TOKEN477_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:9: ( 'NN-VACUUM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal476=(Token)match(input,51,FOLLOW_51_in_nnvacuum2371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal476_tree = (Object)adaptor.create(string_literal476);
            adaptor.addChild(root_0, string_literal476_tree);
            }
            TOKEN477=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum2373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN477_tree = (Object)adaptor.create(TOKEN477);
            adaptor.addChild(root_0, TOKEN477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal478=null;
        Token TOKEN479=null;

        Object string_literal478_tree=null;
        Object TOKEN479_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:8: ( 'NN-CYCLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal478=(Token)match(input,52,FOLLOW_52_in_nncycle2378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = (Object)adaptor.create(string_literal478);
            adaptor.addChild(root_0, string_literal478_tree);
            }
            TOKEN479=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle2380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN479_tree = (Object)adaptor.create(TOKEN479);
            adaptor.addChild(root_0, TOKEN479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal480=null;
        Token TOKEN481=null;

        Object string_literal480_tree=null;
        Object TOKEN481_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:8: ( 'NN-TIMES' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal480=(Token)match(input,53,FOLLOW_53_in_nntimes2385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (Object)adaptor.create(string_literal480);
            adaptor.addChild(root_0, string_literal480_tree);
            }
            TOKEN481=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes2387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN481_tree = (Object)adaptor.create(TOKEN481);
            adaptor.addChild(root_0, TOKEN481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal482=null;
        Token TOKEN483=null;

        Object string_literal482_tree=null;
        Object TOKEN483_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:8: ( 'OSCAR-CM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal482=(Token)match(input,54,FOLLOW_54_in_oscarcm2394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = (Object)adaptor.create(string_literal482);
            adaptor.addChild(root_0, string_literal482_tree);
            }
            TOKEN483=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm2396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN483_tree = (Object)adaptor.create(TOKEN483);
            adaptor.addChild(root_0, TOKEN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal484=null;
        Token TOKEN485=null;

        Object string_literal484_tree=null;
        Object TOKEN485_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:6: ( 'VB-USE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal484=(Token)match(input,55,FOLLOW_55_in_vbuse2403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = (Object)adaptor.create(string_literal484);
            adaptor.addChild(root_0, string_literal484_tree);
            }
            TOKEN485=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse2405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN485_tree = (Object)adaptor.create(TOKEN485);
            adaptor.addChild(root_0, TOKEN485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal486=null;
        Token TOKEN487=null;

        Object string_literal486_tree=null;
        Object TOKEN487_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:9: ( 'VB-CHANGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal486=(Token)match(input,56,FOLLOW_56_in_vbchange2410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal486_tree = (Object)adaptor.create(string_literal486);
            adaptor.addChild(root_0, string_literal486_tree);
            }
            TOKEN487=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange2412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN487_tree = (Object)adaptor.create(TOKEN487);
            adaptor.addChild(root_0, TOKEN487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal488=null;
        Token TOKEN489=null;

        Object string_literal488_tree=null;
        Object TOKEN489_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:11: ( 'VB-SUBMERGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal488=(Token)match(input,57,FOLLOW_57_in_vbsubmerge2417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal488_tree = (Object)adaptor.create(string_literal488);
            adaptor.addChild(root_0, string_literal488_tree);
            }
            TOKEN489=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge2419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN489_tree = (Object)adaptor.create(TOKEN489);
            adaptor.addChild(root_0, TOKEN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal490=null;
        Token TOKEN491=null;

        Object string_literal490_tree=null;
        Object TOKEN491_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:10: ( 'VB-SUBJECT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal490=(Token)match(input,58,FOLLOW_58_in_vbsubject2424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = (Object)adaptor.create(string_literal490);
            adaptor.addChild(root_0, string_literal490_tree);
            }
            TOKEN491=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject2426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN491_tree = (Object)adaptor.create(TOKEN491);
            adaptor.addChild(root_0, TOKEN491_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal492=null;
        Token TOKEN493=null;

        Object string_literal492_tree=null;
        Object TOKEN493_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:6: ( 'NN-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal492=(Token)match(input,59,FOLLOW_59_in_nnadd2433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal492_tree = (Object)adaptor.create(string_literal492);
            adaptor.addChild(root_0, string_literal492_tree);
            }
            TOKEN493=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd2435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN493_tree = (Object)adaptor.create(TOKEN493);
            adaptor.addChild(root_0, TOKEN493_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal494=null;
        Token TOKEN495=null;

        Object string_literal494_tree=null;
        Object TOKEN495_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:10: ( 'NN-MIXTURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal494=(Token)match(input,60,FOLLOW_60_in_nnmixture2440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal494_tree = (Object)adaptor.create(string_literal494);
            adaptor.addChild(root_0, string_literal494_tree);
            }
            TOKEN495=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture2442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN495_tree = (Object)adaptor.create(TOKEN495);
            adaptor.addChild(root_0, TOKEN495_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal496=null;
        Token TOKEN497=null;

        Object string_literal496_tree=null;
        Object TOKEN497_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:6: ( 'VB-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal496=(Token)match(input,61,FOLLOW_61_in_vbadd2447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal496_tree = (Object)adaptor.create(string_literal496);
            adaptor.addChild(root_0, string_literal496_tree);
            }
            TOKEN497=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd2449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN497_tree = (Object)adaptor.create(TOKEN497);
            adaptor.addChild(root_0, TOKEN497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal498=null;
        Token TOKEN499=null;

        Object string_literal498_tree=null;
        Object TOKEN499_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:9: ( 'VB-CHARGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal498=(Token)match(input,62,FOLLOW_62_in_vbcharge2454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal498_tree = (Object)adaptor.create(string_literal498);
            adaptor.addChild(root_0, string_literal498_tree);
            }
            TOKEN499=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge2456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN499_tree = (Object)adaptor.create(TOKEN499);
            adaptor.addChild(root_0, TOKEN499_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal500=null;
        Token TOKEN501=null;

        Object string_literal500_tree=null;
        Object TOKEN501_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:10: ( 'VB-CONTAIN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal500=(Token)match(input,63,FOLLOW_63_in_vbcontain2461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal500_tree = (Object)adaptor.create(string_literal500);
            adaptor.addChild(root_0, string_literal500_tree);
            }
            TOKEN501=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain2463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN501_tree = (Object)adaptor.create(TOKEN501);
            adaptor.addChild(root_0, TOKEN501_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal502=null;
        Token TOKEN503=null;

        Object string_literal502_tree=null;
        Object TOKEN503_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:7: ( 'VB-DROP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal502=(Token)match(input,64,FOLLOW_64_in_vbdrop2468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal502_tree = (Object)adaptor.create(string_literal502);
            adaptor.addChild(root_0, string_literal502_tree);
            }
            TOKEN503=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop2470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN503_tree = (Object)adaptor.create(TOKEN503);
            adaptor.addChild(root_0, TOKEN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal504=null;
        Token TOKEN505=null;

        Object string_literal504_tree=null;
        Object TOKEN505_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:7: ( 'VB-FILL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal504=(Token)match(input,65,FOLLOW_65_in_vbfill2475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal504_tree = (Object)adaptor.create(string_literal504);
            adaptor.addChild(root_0, string_literal504_tree);
            }
            TOKEN505=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill2477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN505_tree = (Object)adaptor.create(TOKEN505);
            adaptor.addChild(root_0, TOKEN505_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal506=null;
        Token TOKEN507=null;

        Object string_literal506_tree=null;
        Object TOKEN507_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:10: ( 'VB-SUSPEND' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal506=(Token)match(input,66,FOLLOW_66_in_vbsuspend2482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal506_tree = (Object)adaptor.create(string_literal506);
            adaptor.addChild(root_0, string_literal506_tree);
            }
            TOKEN507=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend2484); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN507_tree = (Object)adaptor.create(TOKEN507);
            adaptor.addChild(root_0, TOKEN507_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal508=null;
        Token TOKEN509=null;

        Object string_literal508_tree=null;
        Object TOKEN509_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:8: ( 'VB-TREAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal508=(Token)match(input,67,FOLLOW_67_in_vbtreat2489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal508_tree = (Object)adaptor.create(string_literal508);
            adaptor.addChild(root_0, string_literal508_tree);
            }
            TOKEN509=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat2491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN509_tree = (Object)adaptor.create(TOKEN509);
            adaptor.addChild(root_0, TOKEN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal510=null;
        Token TOKEN511=null;

        Object string_literal510_tree=null;
        Object TOKEN511_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:12: ( 'VB-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal510=(Token)match(input,68,FOLLOW_68_in_vbapparatus2498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal510_tree = (Object)adaptor.create(string_literal510);
            adaptor.addChild(root_0, string_literal510_tree);
            }
            TOKEN511=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus2500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN511_tree = (Object)adaptor.create(TOKEN511);
            adaptor.addChild(root_0, TOKEN511_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal512=null;
        Token TOKEN513=null;

        Object string_literal512_tree=null;
        Object TOKEN513_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:12: ( 'NN-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal512=(Token)match(input,69,FOLLOW_69_in_nnapparatus2505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal512_tree = (Object)adaptor.create(string_literal512);
            adaptor.addChild(root_0, string_literal512_tree);
            }
            TOKEN513=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus2507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN513_tree = (Object)adaptor.create(TOKEN513);
            adaptor.addChild(root_0, TOKEN513_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal514=null;
        Token TOKEN515=null;

        Object string_literal514_tree=null;
        Object TOKEN515_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:14: ( 'VB-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal514=(Token)match(input,70,FOLLOW_70_in_vbconcentrate2514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal514_tree = (Object)adaptor.create(string_literal514);
            adaptor.addChild(root_0, string_literal514_tree);
            }
            TOKEN515=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate2516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN515_tree = (Object)adaptor.create(TOKEN515);
            adaptor.addChild(root_0, TOKEN515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal516=null;
        Token TOKEN517=null;

        Object string_literal516_tree=null;
        Object TOKEN517_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:14: ( 'NN-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:247:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal516=(Token)match(input,71,FOLLOW_71_in_nnconcentrate2521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal516_tree = (Object)adaptor.create(string_literal516);
            adaptor.addChild(root_0, string_literal516_tree);
            }
            TOKEN517=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate2523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN517_tree = (Object)adaptor.create(TOKEN517);
            adaptor.addChild(root_0, TOKEN517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal518=null;
        Token TOKEN519=null;

        Object string_literal518_tree=null;
        Object TOKEN519_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:7: ( 'VB-COOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal518=(Token)match(input,72,FOLLOW_72_in_vbcool2530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal518_tree = (Object)adaptor.create(string_literal518);
            adaptor.addChild(root_0, string_literal518_tree);
            }
            TOKEN519=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool2532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN519_tree = (Object)adaptor.create(TOKEN519);
            adaptor.addChild(root_0, TOKEN519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal520=null;
        Token TOKEN521=null;

        Object string_literal520_tree=null;
        Object TOKEN521_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:9: ( 'VB-DEGASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal520=(Token)match(input,73,FOLLOW_73_in_vbdegass2539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal520_tree = (Object)adaptor.create(string_literal520);
            adaptor.addChild(root_0, string_literal520_tree);
            }
            TOKEN521=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass2541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN521_tree = (Object)adaptor.create(TOKEN521);
            adaptor.addChild(root_0, TOKEN521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal522=null;
        Token TOKEN523=null;

        Object string_literal522_tree=null;
        Object TOKEN523_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:11: ( 'VB-DISSOLVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal522=(Token)match(input,74,FOLLOW_74_in_vbdissolve2548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = (Object)adaptor.create(string_literal522);
            adaptor.addChild(root_0, string_literal522_tree);
            }
            TOKEN523=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve2550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN523_tree = (Object)adaptor.create(TOKEN523);
            adaptor.addChild(root_0, TOKEN523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal524=null;
        Token TOKEN525=null;

        Object string_literal524_tree=null;
        Object TOKEN525_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:6: ( 'VB-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal524=(Token)match(input,75,FOLLOW_75_in_vbdry2557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal524_tree = (Object)adaptor.create(string_literal524);
            adaptor.addChild(root_0, string_literal524_tree);
            }
            TOKEN525=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry2559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN525_tree = (Object)adaptor.create(TOKEN525);
            adaptor.addChild(root_0, TOKEN525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal526=null;
        Token TOKEN527=null;

        Object string_literal526_tree=null;
        Object TOKEN527_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:6: ( 'NN-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal526=(Token)match(input,76,FOLLOW_76_in_nndry2564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal526_tree = (Object)adaptor.create(string_literal526);
            adaptor.addChild(root_0, string_literal526_tree);
            }
            TOKEN527=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry2566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN527_tree = (Object)adaptor.create(TOKEN527);
            adaptor.addChild(root_0, TOKEN527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal528=null;
        Token TOKEN529=null;

        Object string_literal528_tree=null;
        Object TOKEN529_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:10: ( 'VB-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal528=(Token)match(input,77,FOLLOW_77_in_vbextract2573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal528_tree = (Object)adaptor.create(string_literal528);
            adaptor.addChild(root_0, string_literal528_tree);
            }
            TOKEN529=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract2575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN529_tree = (Object)adaptor.create(TOKEN529);
            adaptor.addChild(root_0, TOKEN529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal530=null;
        Token TOKEN531=null;

        Object string_literal530_tree=null;
        Object TOKEN531_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:10: ( 'NN-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal530=(Token)match(input,78,FOLLOW_78_in_nnextract2580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal530_tree = (Object)adaptor.create(string_literal530);
            adaptor.addChild(root_0, string_literal530_tree);
            }
            TOKEN531=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract2582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN531_tree = (Object)adaptor.create(TOKEN531);
            adaptor.addChild(root_0, TOKEN531_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal532=null;
        Token TOKEN533=null;

        Object string_literal532_tree=null;
        Object TOKEN533_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:9: ( 'VB-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal532=(Token)match(input,79,FOLLOW_79_in_vbfilter2589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal532_tree = (Object)adaptor.create(string_literal532);
            adaptor.addChild(root_0, string_literal532_tree);
            }
            TOKEN533=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter2591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN533_tree = (Object)adaptor.create(TOKEN533);
            adaptor.addChild(root_0, TOKEN533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal534=null;
        Token TOKEN535=null;

        Object string_literal534_tree=null;
        Object TOKEN535_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:9: ( 'NN-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal534=(Token)match(input,80,FOLLOW_80_in_nnfilter2596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = (Object)adaptor.create(string_literal534);
            adaptor.addChild(root_0, string_literal534_tree);
            }
            TOKEN535=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter2598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN535_tree = (Object)adaptor.create(TOKEN535);
            adaptor.addChild(root_0, TOKEN535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal536=null;
        Token TOKEN537=null;

        Object string_literal536_tree=null;
        Object TOKEN537_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:7: ( 'VB-HEAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal536=(Token)match(input,81,FOLLOW_81_in_vbheat2605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = (Object)adaptor.create(string_literal536);
            adaptor.addChild(root_0, string_literal536_tree);
            }
            TOKEN537=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat2607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN537_tree = (Object)adaptor.create(TOKEN537);
            adaptor.addChild(root_0, TOKEN537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal538=null;
        Token TOKEN539=null;

        Object string_literal538_tree=null;
        Object TOKEN539_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:11: ( 'VB-INCREASE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal538=(Token)match(input,82,FOLLOW_82_in_vbincrease2612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = (Object)adaptor.create(string_literal538);
            adaptor.addChild(root_0, string_literal538_tree);
            }
            TOKEN539=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease2614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN539_tree = (Object)adaptor.create(TOKEN539);
            adaptor.addChild(root_0, TOKEN539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal540=null;
        Token TOKEN541=null;

        Object string_literal540_tree=null;
        Object TOKEN541_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:12: ( 'VB-PARTITION' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:275:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal540=(Token)match(input,83,FOLLOW_83_in_vbpartition2621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = (Object)adaptor.create(string_literal540);
            adaptor.addChild(root_0, string_literal540_tree);
            }
            TOKEN541=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition2623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN541_tree = (Object)adaptor.create(TOKEN541);
            adaptor.addChild(root_0, TOKEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal542=null;
        Token TOKEN543=null;

        Object string_literal542_tree=null;
        Object TOKEN543_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:14: ( 'VB-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:278:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal542=(Token)match(input,84,FOLLOW_84_in_vbprecipitate2630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal542_tree = (Object)adaptor.create(string_literal542);
            adaptor.addChild(root_0, string_literal542_tree);
            }
            TOKEN543=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate2632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN543_tree = (Object)adaptor.create(TOKEN543);
            adaptor.addChild(root_0, TOKEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal544=null;
        Token TOKEN545=null;

        Object string_literal544_tree=null;
        Object TOKEN545_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:14: ( 'NN-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal544=(Token)match(input,85,FOLLOW_85_in_nnprecipitate2637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (Object)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            TOKEN545=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate2639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN545_tree = (Object)adaptor.create(TOKEN545);
            adaptor.addChild(root_0, TOKEN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal546=null;
        Token TOKEN547=null;

        Object string_literal546_tree=null;
        Object TOKEN547_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:9: ( 'VB-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal546=(Token)match(input,86,FOLLOW_86_in_vbpurify2646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = (Object)adaptor.create(string_literal546);
            adaptor.addChild(root_0, string_literal546_tree);
            }
            TOKEN547=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify2648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN547_tree = (Object)adaptor.create(TOKEN547);
            adaptor.addChild(root_0, TOKEN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal548=null;
        Token TOKEN549=null;

        Object string_literal548_tree=null;
        Object TOKEN549_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:9: ( 'NN-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal548=(Token)match(input,87,FOLLOW_87_in_nnpurify2653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal548_tree = (Object)adaptor.create(string_literal548);
            adaptor.addChild(root_0, string_literal548_tree);
            }
            TOKEN549=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN549_tree = (Object)adaptor.create(TOKEN549);
            adaptor.addChild(root_0, TOKEN549_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal550=null;
        Token TOKEN551=null;

        Object string_literal550_tree=null;
        Object TOKEN551_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:9: ( 'VB-QUENCH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal550=(Token)match(input,88,FOLLOW_88_in_vbquench2662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal550_tree = (Object)adaptor.create(string_literal550);
            adaptor.addChild(root_0, string_literal550_tree);
            }
            TOKEN551=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN551_tree = (Object)adaptor.create(TOKEN551);
            adaptor.addChild(root_0, TOKEN551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal552=null;
        Token TOKEN553=null;

        Object string_literal552_tree=null;
        Object TOKEN553_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:10: ( 'VB-RECOVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal552=(Token)match(input,89,FOLLOW_89_in_vbrecover2671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal552_tree = (Object)adaptor.create(string_literal552);
            adaptor.addChild(root_0, string_literal552_tree);
            }
            TOKEN553=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN553_tree = (Object)adaptor.create(TOKEN553);
            adaptor.addChild(root_0, TOKEN553_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal554=null;
        Token TOKEN555=null;

        Object string_literal554_tree=null;
        Object TOKEN555_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:9: ( 'VB-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal554=(Token)match(input,90,FOLLOW_90_in_vbremove2680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal554_tree = (Object)adaptor.create(string_literal554);
            adaptor.addChild(root_0, string_literal554_tree);
            }
            TOKEN555=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN555_tree = (Object)adaptor.create(TOKEN555);
            adaptor.addChild(root_0, TOKEN555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:9: ( 'NN-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal556=(Token)match(input,91,FOLLOW_91_in_nnremove2687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:7: ( 'VB-STIR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal558=(Token)match(input,92,FOLLOW_92_in_vbstir2696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:13: ( 'VB-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal560=(Token)match(input,93,FOLLOW_93_in_vbsynthesize2705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:300:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:300:13: ( 'NN-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:300:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal562=(Token)match(input,94,FOLLOW_94_in_nnsynthesize2712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:7: ( 'VB-WAIT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal564=(Token)match(input,95,FOLLOW_95_in_vbwait2721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:306:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:306:7: ( 'VB-WASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:306:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal566=(Token)match(input,96,FOLLOW_96_in_vbwash2730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:8: ( 'VB-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal568=(Token)match(input,97,FOLLOW_97_in_vbyield2739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:6: ( 'COLON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal570=(Token)match(input,98,FOLLOW_98_in_colon2748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:6: ( 'COMMA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal572=(Token)match(input,99,FOLLOW_99_in_comma2755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:6: ( 'APOST' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:314:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal574=(Token)match(input,100,FOLLOW_100_in_apost2762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:4: ( 'NEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal576=(Token)match(input,101,FOLLOW_101_in_neg2769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:5: ( 'DASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal578=(Token)match(input,102,FOLLOW_102_in_dash2776); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:5: ( 'STOP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal580=(Token)match(input,103,FOLLOW_103_in_stop2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:10: ( 'NN-PERCENT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal582=(Token)match(input,104,FOLLOW_104_in_nnpercent2790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:5: ( 'LSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal584=(Token)match(input,105,FOLLOW_105_in_lsqb2797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:5: ( 'RSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal586=(Token)match(input,106,FOLLOW_106_in_rsqb2804); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:4: ( '-LRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal588=(Token)match(input,107,FOLLOW_107_in_lrb2812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:4: ( '-RRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal590=(Token)match(input,108,FOLLOW_108_in_rrb2819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:4: ( 'ABL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:328:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal592=(Token)match(input,109,FOLLOW_109_in_abl2830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:4: ( 'ABN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:331:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal594=(Token)match(input,110,FOLLOW_110_in_abn2839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal596=null;
        Token TOKEN597=null;

        Object string_literal596_tree=null;
        Object TOKEN597_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:4: ( 'ABX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:334:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal596=(Token)match(input,111,FOLLOW_111_in_abx2848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (Object)adaptor.create(string_literal596);
            adaptor.addChild(root_0, string_literal596_tree);
            }
            TOKEN597=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN597_tree = (Object)adaptor.create(TOKEN597);
            adaptor.addChild(root_0, TOKEN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:3: ( 'AP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal598=(Token)match(input,112,FOLLOW_112_in_ap2857); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:3: ( 'AT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal600=(Token)match(input,113,FOLLOW_113_in_at2866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:3: ( 'BE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal602=(Token)match(input,114,FOLLOW_114_in_be2875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:4: ( 'BED' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal604=(Token)match(input,115,FOLLOW_115_in_bed2884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed2886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:5: ( 'BEDZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal606=(Token)match(input,116,FOLLOW_116_in_bedz2893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz2895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:4: ( 'BEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal608=(Token)match(input,117,FOLLOW_117_in_beg2902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg2904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:4: ( 'BEM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal610=(Token)match(input,118,FOLLOW_118_in_bem2911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem2913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal612=null;
        Token TOKEN613=null;

        Object string_literal612_tree=null;
        Object TOKEN613_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:4: ( 'BEN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal612=(Token)match(input,119,FOLLOW_119_in_ben2920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            TOKEN613=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben2922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN613_tree = (Object)adaptor.create(TOKEN613);
            adaptor.addChild(root_0, TOKEN613_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal614=null;
        Token TOKEN615=null;

        Object string_literal614_tree=null;
        Object TOKEN615_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:4: ( 'BER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal614=(Token)match(input,120,FOLLOW_120_in_ber2929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal614_tree = (Object)adaptor.create(string_literal614);
            adaptor.addChild(root_0, string_literal614_tree);
            }
            TOKEN615=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber2931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN615_tree = (Object)adaptor.create(TOKEN615);
            adaptor.addChild(root_0, TOKEN615_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal616=null;
        Token TOKEN617=null;

        Object string_literal616_tree=null;
        Object TOKEN617_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:4: ( 'BEZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal616=(Token)match(input,121,FOLLOW_121_in_bez2938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = (Object)adaptor.create(string_literal616);
            adaptor.addChild(root_0, string_literal616_tree);
            }
            TOKEN617=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez2940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN617_tree = (Object)adaptor.create(TOKEN617);
            adaptor.addChild(root_0, TOKEN617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal618=null;
        Token TOKEN619=null;

        Object string_literal618_tree=null;
        Object TOKEN619_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:3: ( 'CC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal618=(Token)match(input,122,FOLLOW_122_in_cc2947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal618_tree = (Object)adaptor.create(string_literal618);
            adaptor.addChild(root_0, string_literal618_tree);
            }
            TOKEN619=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc2949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN619_tree = (Object)adaptor.create(TOKEN619);
            adaptor.addChild(root_0, TOKEN619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal620=null;
        Token TOKEN621=null;

        Object string_literal620_tree=null;
        Object TOKEN621_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:3: ( 'CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal620=(Token)match(input,123,FOLLOW_123_in_cd2956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal620_tree = (Object)adaptor.create(string_literal620);
            adaptor.addChild(root_0, string_literal620_tree);
            }
            TOKEN621=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd2958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN621_tree = (Object)adaptor.create(TOKEN621);
            adaptor.addChild(root_0, TOKEN621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:3: ( 'CS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal622=(Token)match(input,124,FOLLOW_124_in_cs2965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal622_tree = (Object)adaptor.create(string_literal622);
            adaptor.addChild(root_0, string_literal622_tree);
            }
            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs2967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN623_tree = (Object)adaptor.create(TOKEN623);
            adaptor.addChild(root_0, TOKEN623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:7: ( 'DO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal624=(Token)match(input,125,FOLLOW_125_in_dotok2975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = (Object)adaptor.create(string_literal624);
            adaptor.addChild(root_0, string_literal624_tree);
            }
            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok2977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN625_tree = (Object)adaptor.create(TOKEN625);
            adaptor.addChild(root_0, TOKEN625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:4: ( 'DOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal626=(Token)match(input,126,FOLLOW_126_in_dod2984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (Object)adaptor.create(string_literal626);
            adaptor.addChild(root_0, string_literal626_tree);
            }
            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod2986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN627_tree = (Object)adaptor.create(TOKEN627);
            adaptor.addChild(root_0, TOKEN627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:4: ( 'DOZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal628=(Token)match(input,127,FOLLOW_127_in_doz2993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal628_tree = (Object)adaptor.create(string_literal628);
            adaptor.addChild(root_0, string_literal628_tree);
            }
            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz2995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN629_tree = (Object)adaptor.create(TOKEN629);
            adaptor.addChild(root_0, TOKEN629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:3: ( 'DT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal630=(Token)match(input,128,FOLLOW_128_in_dt3002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (Object)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt3004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN631_tree = (Object)adaptor.create(TOKEN631);
            adaptor.addChild(root_0, TOKEN631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:4: ( 'DTI' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal632=(Token)match(input,129,FOLLOW_129_in_dti3011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal632_tree = (Object)adaptor.create(string_literal632);
            adaptor.addChild(root_0, string_literal632_tree);
            }
            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti3013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN633_tree = (Object)adaptor.create(TOKEN633);
            adaptor.addChild(root_0, TOKEN633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:4: ( 'DTS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal634=(Token)match(input,130,FOLLOW_130_in_dts3020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal634_tree = (Object)adaptor.create(string_literal634);
            adaptor.addChild(root_0, string_literal634_tree);
            }
            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts3022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN635_tree = (Object)adaptor.create(TOKEN635);
            adaptor.addChild(root_0, TOKEN635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:4: ( 'DTX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal636=(Token)match(input,131,FOLLOW_131_in_dtx3029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal636_tree = (Object)adaptor.create(string_literal636);
            adaptor.addChild(root_0, string_literal636_tree);
            }
            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN637_tree = (Object)adaptor.create(TOKEN637);
            adaptor.addChild(root_0, TOKEN637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:3: ( 'EX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal638=(Token)match(input,132,FOLLOW_132_in_ex3038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = (Object)adaptor.create(string_literal638);
            adaptor.addChild(root_0, string_literal638_tree);
            }
            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN639_tree = (Object)adaptor.create(TOKEN639);
            adaptor.addChild(root_0, TOKEN639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:3: ( 'FW' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal640=(Token)match(input,133,FOLLOW_133_in_fw3047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN641_tree = (Object)adaptor.create(TOKEN641);
            adaptor.addChild(root_0, TOKEN641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:5: ( 'FW-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal642=(Token)match(input,134,FOLLOW_134_in_fwin3056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal642_tree = (Object)adaptor.create(string_literal642);
            adaptor.addChild(root_0, string_literal642_tree);
            }
            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN643_tree = (Object)adaptor.create(TOKEN643);
            adaptor.addChild(root_0, TOKEN643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:3: ( 'HV' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal644=(Token)match(input,135,FOLLOW_135_in_hv3065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal644_tree = (Object)adaptor.create(string_literal644);
            adaptor.addChild(root_0, string_literal644_tree);
            }
            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN645_tree = (Object)adaptor.create(TOKEN645);
            adaptor.addChild(root_0, TOKEN645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:4: ( 'HVD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal646=(Token)match(input,136,FOLLOW_136_in_hvd3074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            adaptor.addChild(root_0, string_literal646_tree);
            }
            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN647_tree = (Object)adaptor.create(TOKEN647);
            adaptor.addChild(root_0, TOKEN647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:4: ( 'HVG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal648=(Token)match(input,137,FOLLOW_137_in_hvg3083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal648_tree = (Object)adaptor.create(string_literal648);
            adaptor.addChild(root_0, string_literal648_tree);
            }
            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN649_tree = (Object)adaptor.create(TOKEN649);
            adaptor.addChild(root_0, TOKEN649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:4: ( 'HVN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal650=(Token)match(input,138,FOLLOW_138_in_hvn3092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal650_tree = (Object)adaptor.create(string_literal650);
            adaptor.addChild(root_0, string_literal650_tree);
            }
            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN651_tree = (Object)adaptor.create(TOKEN651);
            adaptor.addChild(root_0, TOKEN651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:3: ( 'IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal652=(Token)match(input,139,FOLLOW_139_in_in3101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = (Object)adaptor.create(string_literal652);
            adaptor.addChild(root_0, string_literal652_tree);
            }
            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN653_tree = (Object)adaptor.create(TOKEN653);
            adaptor.addChild(root_0, TOKEN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:3: ( 'JJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal654=(Token)match(input,140,FOLLOW_140_in_jj3110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal654_tree = (Object)adaptor.create(string_literal654);
            adaptor.addChild(root_0, string_literal654_tree);
            }
            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN655_tree = (Object)adaptor.create(TOKEN655);
            adaptor.addChild(root_0, TOKEN655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:4: ( 'JJR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal656=(Token)match(input,141,FOLLOW_141_in_jjr3119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal656_tree = (Object)adaptor.create(string_literal656);
            adaptor.addChild(root_0, string_literal656_tree);
            }
            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN657_tree = (Object)adaptor.create(TOKEN657);
            adaptor.addChild(root_0, TOKEN657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:4: ( 'JJS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal658=(Token)match(input,142,FOLLOW_142_in_jjs3128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal658_tree = (Object)adaptor.create(string_literal658);
            adaptor.addChild(root_0, string_literal658_tree);
            }
            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN659_tree = (Object)adaptor.create(TOKEN659);
            adaptor.addChild(root_0, TOKEN659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:4: ( 'JJT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal660=(Token)match(input,143,FOLLOW_143_in_jjt3137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal660_tree = (Object)adaptor.create(string_literal660);
            adaptor.addChild(root_0, string_literal660_tree);
            }
            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN661_tree = (Object)adaptor.create(TOKEN661);
            adaptor.addChild(root_0, TOKEN661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:3: ( 'MD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal662=(Token)match(input,144,FOLLOW_144_in_md3146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN663_tree = (Object)adaptor.create(TOKEN663);
            adaptor.addChild(root_0, TOKEN663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:3: ( 'NC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal664=(Token)match(input,145,FOLLOW_145_in_nc3155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal664_tree = (Object)adaptor.create(string_literal664);
            adaptor.addChild(root_0, string_literal664_tree);
            }
            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN665_tree = (Object)adaptor.create(TOKEN665);
            adaptor.addChild(root_0, TOKEN665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:3: ( 'NN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal666=(Token)match(input,146,FOLLOW_146_in_nn3164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }
            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN667_tree = (Object)adaptor.create(TOKEN667);
            adaptor.addChild(root_0, TOKEN667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:8: ( 'NN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal668=(Token)match(input,147,FOLLOW_147_in_nn_poss3173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = (Object)adaptor.create(string_literal668);
            adaptor.addChild(root_0, string_literal668_tree);
            }
            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN669_tree = (Object)adaptor.create(TOKEN669);
            adaptor.addChild(root_0, TOKEN669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:4: ( 'NNS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal670=(Token)match(input,148,FOLLOW_148_in_nns3182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = (Object)adaptor.create(string_literal670);
            adaptor.addChild(root_0, string_literal670_tree);
            }
            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns3184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN671_tree = (Object)adaptor.create(TOKEN671);
            adaptor.addChild(root_0, TOKEN671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:9: ( 'NNS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal672=(Token)match(input,149,FOLLOW_149_in_nns_poss3191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = (Object)adaptor.create(string_literal672);
            adaptor.addChild(root_0, string_literal672_tree);
            }
            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss3193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN673_tree = (Object)adaptor.create(TOKEN673);
            adaptor.addChild(root_0, TOKEN673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:3: ( 'NP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal674=(Token)match(input,150,FOLLOW_150_in_np3200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal674_tree = (Object)adaptor.create(string_literal674);
            adaptor.addChild(root_0, string_literal674_tree);
            }
            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np3202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN675_tree = (Object)adaptor.create(TOKEN675);
            adaptor.addChild(root_0, TOKEN675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:455:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:455:4: ( 'NNP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:455:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal676=(Token)match(input,151,FOLLOW_151_in_nnp3210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal676_tree = (Object)adaptor.create(string_literal676);
            adaptor.addChild(root_0, string_literal676_tree);
            }
            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp3212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN677_tree = (Object)adaptor.create(TOKEN677);
            adaptor.addChild(root_0, TOKEN677_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:8: ( 'NP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal678=(Token)match(input,152,FOLLOW_152_in_np_poss3220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal678_tree = (Object)adaptor.create(string_literal678);
            adaptor.addChild(root_0, string_literal678_tree);
            }
            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss3222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN679_tree = (Object)adaptor.create(TOKEN679);
            adaptor.addChild(root_0, TOKEN679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:4: ( 'NPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal680=(Token)match(input,153,FOLLOW_153_in_nps3229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal680_tree = (Object)adaptor.create(string_literal680);
            adaptor.addChild(root_0, string_literal680_tree);
            }
            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps3231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN681_tree = (Object)adaptor.create(TOKEN681);
            adaptor.addChild(root_0, TOKEN681_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:9: ( 'NPS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal682=(Token)match(input,154,FOLLOW_154_in_nps_poss3238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal682_tree = (Object)adaptor.create(string_literal682);
            adaptor.addChild(root_0, string_literal682_tree);
            }
            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss3240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN683_tree = (Object)adaptor.create(TOKEN683);
            adaptor.addChild(root_0, TOKEN683_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:3: ( 'NR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal684=(Token)match(input,155,FOLLOW_155_in_nr3247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal684_tree = (Object)adaptor.create(string_literal684);
            adaptor.addChild(root_0, string_literal684_tree);
            }
            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr3249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN685_tree = (Object)adaptor.create(TOKEN685);
            adaptor.addChild(root_0, TOKEN685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:3: ( 'OD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal686=(Token)match(input,156,FOLLOW_156_in_od3256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal686_tree = (Object)adaptor.create(string_literal686);
            adaptor.addChild(root_0, string_literal686_tree);
            }
            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od3258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN687_tree = (Object)adaptor.create(TOKEN687);
            adaptor.addChild(root_0, TOKEN687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:3: ( 'PN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal688=(Token)match(input,157,FOLLOW_157_in_pn3265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (Object)adaptor.create(string_literal688);
            adaptor.addChild(root_0, string_literal688_tree);
            }
            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn3267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN689_tree = (Object)adaptor.create(TOKEN689);
            adaptor.addChild(root_0, TOKEN689_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:8: ( 'PN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal690=(Token)match(input,158,FOLLOW_158_in_pn_poss3274); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal690_tree = (Object)adaptor.create(string_literal690);
            adaptor.addChild(root_0, string_literal690_tree);
            }
            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss3276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN691_tree = (Object)adaptor.create(TOKEN691);
            adaptor.addChild(root_0, TOKEN691_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:8: ( 'PP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:480:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal692=(Token)match(input,159,FOLLOW_159_in_pp_poss3283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = (Object)adaptor.create(string_literal692);
            adaptor.addChild(root_0, string_literal692_tree);
            }
            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss3285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN693_tree = (Object)adaptor.create(TOKEN693);
            adaptor.addChild(root_0, TOKEN693_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:13: ( 'PP$$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal694=(Token)match(input,160,FOLLOW_160_in_pp_poss_poss3292); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal694_tree = (Object)adaptor.create(string_literal694);
            adaptor.addChild(root_0, string_literal694_tree);
            }
            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss3294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN695_tree = (Object)adaptor.create(TOKEN695);
            adaptor.addChild(root_0, TOKEN695_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:4: ( 'PPL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal696=(Token)match(input,161,FOLLOW_161_in_ppl3301); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal696_tree = (Object)adaptor.create(string_literal696);
            adaptor.addChild(root_0, string_literal696_tree);
            }
            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl3303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN697_tree = (Object)adaptor.create(TOKEN697);
            adaptor.addChild(root_0, TOKEN697_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:5: ( 'PPLS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal698=(Token)match(input,162,FOLLOW_162_in_ppls3310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal698_tree = (Object)adaptor.create(string_literal698);
            adaptor.addChild(root_0, string_literal698_tree);
            }
            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls3312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN699_tree = (Object)adaptor.create(TOKEN699);
            adaptor.addChild(root_0, TOKEN699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:5: ( 'PRP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal700=(Token)match(input,163,FOLLOW_163_in_prp3320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal700_tree = (Object)adaptor.create(string_literal700);
            adaptor.addChild(root_0, string_literal700_tree);
            }
            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp3323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN701_tree = (Object)adaptor.create(TOKEN701);
            adaptor.addChild(root_0, TOKEN701_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:4: ( 'PPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal702=(Token)match(input,164,FOLLOW_164_in_ppo3330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal702_tree = (Object)adaptor.create(string_literal702);
            adaptor.addChild(root_0, string_literal702_tree);
            }
            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo3332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN703_tree = (Object)adaptor.create(TOKEN703);
            adaptor.addChild(root_0, TOKEN703_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:497:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:497:4: ( 'PPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:497:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal704=(Token)match(input,165,FOLLOW_165_in_pps3339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal704_tree = (Object)adaptor.create(string_literal704);
            adaptor.addChild(root_0, string_literal704_tree);
            }
            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps3341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN705_tree = (Object)adaptor.create(TOKEN705);
            adaptor.addChild(root_0, TOKEN705_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:500:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:500:5: ( 'PPSS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:500:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal706=(Token)match(input,166,FOLLOW_166_in_ppss3348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal706_tree = (Object)adaptor.create(string_literal706);
            adaptor.addChild(root_0, string_literal706_tree);
            }
            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss3350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN707_tree = (Object)adaptor.create(TOKEN707);
            adaptor.addChild(root_0, TOKEN707_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:503:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:503:3: ( 'QL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:503:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal708=(Token)match(input,167,FOLLOW_167_in_ql3357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal708_tree = (Object)adaptor.create(string_literal708);
            adaptor.addChild(root_0, string_literal708_tree);
            }
            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql3359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN709_tree = (Object)adaptor.create(TOKEN709);
            adaptor.addChild(root_0, TOKEN709_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:4: ( 'QLP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal710=(Token)match(input,168,FOLLOW_168_in_qlp3366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal710_tree = (Object)adaptor.create(string_literal710);
            adaptor.addChild(root_0, string_literal710_tree);
            }
            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp3368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN711_tree = (Object)adaptor.create(TOKEN711);
            adaptor.addChild(root_0, TOKEN711_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:509:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:509:3: ( 'RB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:509:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal712=(Token)match(input,169,FOLLOW_169_in_rb3375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal712_tree = (Object)adaptor.create(string_literal712);
            adaptor.addChild(root_0, string_literal712_tree);
            }
            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb3377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN713_tree = (Object)adaptor.create(TOKEN713);
            adaptor.addChild(root_0, TOKEN713_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:4: ( 'RBR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal714=(Token)match(input,170,FOLLOW_170_in_rbr3384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal714_tree = (Object)adaptor.create(string_literal714);
            adaptor.addChild(root_0, string_literal714_tree);
            }
            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr3386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN715_tree = (Object)adaptor.create(TOKEN715);
            adaptor.addChild(root_0, TOKEN715_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:8: ( 'RB-CONJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal716=(Token)match(input,171,FOLLOW_171_in_rbconj3395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal716_tree = (Object)adaptor.create(string_literal716);
            adaptor.addChild(root_0, string_literal716_tree);
            }
            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj3398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN717_tree = (Object)adaptor.create(TOKEN717);
            adaptor.addChild(root_0, TOKEN717_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:518:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:518:4: ( 'RBT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:518:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal718=(Token)match(input,172,FOLLOW_172_in_rbt3406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal718_tree = (Object)adaptor.create(string_literal718);
            adaptor.addChild(root_0, string_literal718_tree);
            }
            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt3408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN719_tree = (Object)adaptor.create(TOKEN719);
            adaptor.addChild(root_0, TOKEN719_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:521:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:521:4: ( 'RBS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:521:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal720=(Token)match(input,173,FOLLOW_173_in_rbs3415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal720_tree = (Object)adaptor.create(string_literal720);
            adaptor.addChild(root_0, string_literal720_tree);
            }
            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs3417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN721_tree = (Object)adaptor.create(TOKEN721);
            adaptor.addChild(root_0, TOKEN721_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:525:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:525:3: ( 'RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:525:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal722=(Token)match(input,174,FOLLOW_174_in_rn3425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal722_tree = (Object)adaptor.create(string_literal722);
            adaptor.addChild(root_0, string_literal722_tree);
            }
            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn3427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN723_tree = (Object)adaptor.create(TOKEN723);
            adaptor.addChild(root_0, TOKEN723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:3: ( 'RP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:528:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal724=(Token)match(input,175,FOLLOW_175_in_rp3434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal724_tree = (Object)adaptor.create(string_literal724);
            adaptor.addChild(root_0, string_literal724_tree);
            }
            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp3436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN725_tree = (Object)adaptor.create(TOKEN725);
            adaptor.addChild(root_0, TOKEN725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:5: ( 'SYM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:531:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal726=(Token)match(input,176,FOLLOW_176_in_sym3445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal726_tree = (Object)adaptor.create(string_literal726);
            adaptor.addChild(root_0, string_literal726_tree);
            }
            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym3447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN727_tree = (Object)adaptor.create(TOKEN727);
            adaptor.addChild(root_0, TOKEN727_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:3: ( 'TO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:534:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal728=(Token)match(input,177,FOLLOW_177_in_to3454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal728_tree = (Object)adaptor.create(string_literal728);
            adaptor.addChild(root_0, string_literal728_tree);
            }
            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to3456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN729_tree = (Object)adaptor.create(TOKEN729);
            adaptor.addChild(root_0, TOKEN729_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:3: ( 'UH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:537:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal730=(Token)match(input,178,FOLLOW_178_in_uh3463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal730_tree = (Object)adaptor.create(string_literal730);
            adaptor.addChild(root_0, string_literal730_tree);
            }
            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh3465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN731_tree = (Object)adaptor.create(TOKEN731);
            adaptor.addChild(root_0, TOKEN731_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:3: ( 'VB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:540:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal732=(Token)match(input,179,FOLLOW_179_in_vb3472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal732_tree = (Object)adaptor.create(string_literal732);
            adaptor.addChild(root_0, string_literal732_tree);
            }
            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb3474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN733_tree = (Object)adaptor.create(TOKEN733);
            adaptor.addChild(root_0, TOKEN733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:5: ( 'VBP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal734=(Token)match(input,180,FOLLOW_180_in_vbp3482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = (Object)adaptor.create(string_literal734);
            adaptor.addChild(root_0, string_literal734_tree);
            }
            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp3484); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN735_tree = (Object)adaptor.create(TOKEN735);
            adaptor.addChild(root_0, TOKEN735_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:4: ( 'VBD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:546:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal736=(Token)match(input,181,FOLLOW_181_in_vbd3493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal736_tree = (Object)adaptor.create(string_literal736);
            adaptor.addChild(root_0, string_literal736_tree);
            }
            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd3495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN737_tree = (Object)adaptor.create(TOKEN737);
            adaptor.addChild(root_0, TOKEN737_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:4: ( 'VBG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal738=(Token)match(input,182,FOLLOW_182_in_vbg3502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal738_tree = (Object)adaptor.create(string_literal738);
            adaptor.addChild(root_0, string_literal738_tree);
            }
            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg3504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN739_tree = (Object)adaptor.create(TOKEN739);
            adaptor.addChild(root_0, TOKEN739_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:4: ( 'VBN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal740=(Token)match(input,183,FOLLOW_183_in_vbn3511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal740_tree = (Object)adaptor.create(string_literal740);
            adaptor.addChild(root_0, string_literal740_tree);
            }
            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn3513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN741_tree = (Object)adaptor.create(TOKEN741);
            adaptor.addChild(root_0, TOKEN741_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:4: ( 'VBZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal742=(Token)match(input,184,FOLLOW_184_in_vbz3520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal742_tree = (Object)adaptor.create(string_literal742);
            adaptor.addChild(root_0, string_literal742_tree);
            }
            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz3522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN743_tree = (Object)adaptor.create(TOKEN743);
            adaptor.addChild(root_0, TOKEN743_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:4: ( 'WDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal744=(Token)match(input,185,FOLLOW_185_in_wdt3529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal744_tree = (Object)adaptor.create(string_literal744);
            adaptor.addChild(root_0, string_literal744_tree);
            }
            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt3531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN745_tree = (Object)adaptor.create(TOKEN745);
            adaptor.addChild(root_0, TOKEN745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:561:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:561:8: ( 'WP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:561:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal746=(Token)match(input,186,FOLLOW_186_in_wp_poss3538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal746_tree = (Object)adaptor.create(string_literal746);
            adaptor.addChild(root_0, string_literal746_tree);
            }
            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss3540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN747_tree = (Object)adaptor.create(TOKEN747);
            adaptor.addChild(root_0, TOKEN747_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:565:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:565:4: ( 'WPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:565:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal748=(Token)match(input,187,FOLLOW_187_in_wpo3548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (Object)adaptor.create(string_literal748);
            adaptor.addChild(root_0, string_literal748_tree);
            }
            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo3550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN749_tree = (Object)adaptor.create(TOKEN749);
            adaptor.addChild(root_0, TOKEN749_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:568:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:568:4: ( 'WPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:568:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal750=(Token)match(input,188,FOLLOW_188_in_wps3557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal750_tree = (Object)adaptor.create(string_literal750);
            adaptor.addChild(root_0, string_literal750_tree);
            }
            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps3559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN751_tree = (Object)adaptor.create(TOKEN751);
            adaptor.addChild(root_0, TOKEN751_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:4: ( 'WQL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal752=(Token)match(input,189,FOLLOW_189_in_wql3567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal752_tree = (Object)adaptor.create(string_literal752);
            adaptor.addChild(root_0, string_literal752_tree);
            }
            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql3569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN753_tree = (Object)adaptor.create(TOKEN753);
            adaptor.addChild(root_0, TOKEN753_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:4: ( 'WRB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal754=(Token)match(input,190,FOLLOW_190_in_wrb3576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal754_tree = (Object)adaptor.create(string_literal754);
            adaptor.addChild(root_0, string_literal754_tree);
            }
            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb3578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN755_tree = (Object)adaptor.create(TOKEN755);
            adaptor.addChild(root_0, TOKEN755_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:577:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:577:6: ( 'PDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:577:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal756=(Token)match(input,191,FOLLOW_191_in_pdt3587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal756_tree = (Object)adaptor.create(string_literal756);
            adaptor.addChild(root_0, string_literal756_tree);
            }
            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt3589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN757_tree = (Object)adaptor.create(TOKEN757);
            adaptor.addChild(root_0, TOKEN757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: ( sentence )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker230);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker240);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: ( nounphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker253);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: ( verbphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker255);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: ( prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker257);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker262);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: ( colon )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker264);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker269);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred12_ChemicalChunker302);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred13_ChemicalChunker304);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
        {
        pushFollow(FOLLOW_verb_in_synpred14_ChemicalChunker306);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: ( oscarcd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred17_ChemicalChunker312);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred18_ChemicalChunker314);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: ( oscarrn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred19_ChemicalChunker316);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: ( oscaront )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred20_ChemicalChunker318);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: ( brackets )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred21_ChemicalChunker320);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: sym
        {
        pushFollow(FOLLOW_sym_in_synpred22_ChemicalChunker322);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: number
        {
        pushFollow(FOLLOW_number_in_synpred26_ChemicalChunker330);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred27_ChemicalChunker
    public final void synpred27_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: comma
        {
        pushFollow(FOLLOW_comma_in_synpred27_ChemicalChunker332);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:28: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:28: adj
        {
        pushFollow(FOLLOW_adj_in_synpred29_ChemicalChunker369);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:40: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:40: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred31_ChemicalChunker377);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:55: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:55: noun
        {
        pushFollow(FOLLOW_noun_in_synpred32_ChemicalChunker379);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:60: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:60: number
        {
        pushFollow(FOLLOW_number_in_synpred33_ChemicalChunker381);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:67: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:67: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred34_ChemicalChunker383);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred35_ChemicalChunker391);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:92: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:92: adj
        {
        pushFollow(FOLLOW_adj_in_synpred36_ChemicalChunker394);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: ( ( conjunction )* ( adj )* ( adv )* noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: ( conjunction )* ( adj )* ( adv )* noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:79: ( conjunction )*
        loop99:
        do {
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred38_ChemicalChunker391);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop99;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:92: ( adj )*
        loop100:
        do {
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
        	    {
        	    pushFollow(FOLLOW_adj_in_synpred38_ChemicalChunker394);
        	    adj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop100;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:97: ( adv )*
        loop101:
        do {
            int alt101=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt101=1;
                }
                break;

            }

            switch (alt101) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred38_ChemicalChunker397);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop101;
            }
        } while (true);

        pushFollow(FOLLOW_noun_in_synpred38_ChemicalChunker401);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:108: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:108: number
        {
        pushFollow(FOLLOW_number_in_synpred39_ChemicalChunker403);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:115: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:115: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred40_ChemicalChunker405);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:127: ( prepphraseOf )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:127: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred41_ChemicalChunker413);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:154: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:154: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred42_ChemicalChunker418);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:141: ( prepphraseIN ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:141: prepphraseIN ( dissolvePhrase )?
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred43_ChemicalChunker416);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:154: ( dissolvePhrase )?
        int alt102=2;
        switch ( input.LA(1) ) {
            case 38:
            case 54:
            case 99:
            case 107:
            case 123:
                {
                alt102=1;
                }
                break;
        }

        switch (alt102) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred43_ChemicalChunker418);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:24: ( to )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:24: to
        {
        pushFollow(FOLLOW_to_in_synpred45_ChemicalChunker494);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred46_ChemicalChunker
    public final void synpred46_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:28: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:28: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred46_ChemicalChunker497);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_ChemicalChunker

    // $ANTLR start synpred51_ChemicalChunker
    public final void synpred51_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:59: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:59: verb
        {
        pushFollow(FOLLOW_verb_in_synpred51_ChemicalChunker513);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_ChemicalChunker

    // $ANTLR start synpred52_ChemicalChunker
    public final void synpred52_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:65: ( md )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:65: md
        {
        pushFollow(FOLLOW_md_in_synpred52_ChemicalChunker516);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: ( adv )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: adv
        {
        pushFollow(FOLLOW_adv_in_synpred53_ChemicalChunker519);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred54_ChemicalChunker
    public final void synpred54_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:74: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:74: adj
        {
        pushFollow(FOLLOW_adj_in_synpred54_ChemicalChunker522);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_ChemicalChunker

    // $ANTLR start synpred55_ChemicalChunker
    public final void synpred55_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:79: ( neg )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:79: neg
        {
        pushFollow(FOLLOW_neg_in_synpred55_ChemicalChunker525);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_ChemicalChunker

    // $ANTLR start synpred56_ChemicalChunker
    public final void synpred56_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:45: ( md )*
        loop103:
        do {
            int alt103=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt103=1;
                }
                break;

            }

            switch (alt103) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred56_ChemicalChunker504);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop103;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:49: ( adv )*
        loop104:
        do {
            int alt104=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt104=1;
                }
                break;

            }

            switch (alt104) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred56_ChemicalChunker507);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop104;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:54: ( adj )?
        int alt105=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt105=1;
                }
                break;
        }

        switch (alt105) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred56_ChemicalChunker510);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:59: ( verb )+
        int cnt106=0;
        loop106:
        do {
            int alt106=2;
            switch ( input.LA(1) ) {
            case 55:
            case 56:
            case 57:
            case 58:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 72:
            case 73:
            case 74:
            case 75:
            case 77:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 86:
            case 88:
            case 89:
            case 90:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
                {
                alt106=1;
                }
                break;

            }

            switch (alt106) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred56_ChemicalChunker513);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt106 >= 1 ) break loop106;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(106, input);
                    throw eee;
            }
            cnt106++;
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:65: ( md )*
        loop107:
        do {
            int alt107=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt107=1;
                }
                break;

            }

            switch (alt107) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred56_ChemicalChunker516);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop107;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:69: ( adv )*
        loop108:
        do {
            int alt108=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt108=1;
                }
                break;

            }

            switch (alt108) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred56_ChemicalChunker519);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop108;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:74: ( adj )?
        int alt109=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt109=1;
                }
                break;
        }

        switch (alt109) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred56_ChemicalChunker522);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:79: ( neg )?
        int alt110=2;
        switch ( input.LA(1) ) {
            case 101:
                {
                alt110=1;
                }
                break;
        }

        switch (alt110) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred56_ChemicalChunker525);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred56_ChemicalChunker

    // $ANTLR start synpred57_ChemicalChunker
    public final void synpred57_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:87: ( inoff )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:87: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred57_ChemicalChunker531);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_ChemicalChunker

    // $ANTLR start synpred60_ChemicalChunker
    public final void synpred60_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:95: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:95: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:95: ( cc )?
        int alt111=2;
        switch ( input.LA(1) ) {
            case 122:
                {
                alt111=1;
                }
                break;
        }

        switch (alt111) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred60_ChemicalChunker535);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:99: ( comma )?
        int alt112=2;
        switch ( input.LA(1) ) {
            case 99:
                {
                alt112=1;
                }
                break;
        }

        switch (alt112) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred60_ChemicalChunker538);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred60_ChemicalChunker541);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:22: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred101_ChemicalChunker649);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:26: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred102_ChemicalChunker651);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:13: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:13: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker671);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:22: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:22: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred109_ChemicalChunker673);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:38: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:38: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred110_ChemicalChunker675);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:46: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:46: nn
        {
        pushFollow(FOLLOW_nn_in_synpred111_ChemicalChunker677);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:57: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:57: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred114_ChemicalChunker683);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred118_ChemicalChunker
    public final void synpred118_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:100: ( range )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:100: range
        {
        pushFollow(FOLLOW_range_in_synpred118_ChemicalChunker691);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:106: ( amount )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:106: amount
        {
        pushFollow(FOLLOW_amount_in_synpred119_ChemicalChunker693);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:113: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:113: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred120_ChemicalChunker695);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:128: ( apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:128: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred122_ChemicalChunker699);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:156: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:156: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred125_ChemicalChunker705);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:165: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:165: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred126_ChemicalChunker707);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:178: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:178: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred127_ChemicalChunker709);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:234: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:234: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred133_ChemicalChunker721);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:325: ( wdt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:325: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred142_ChemicalChunker739);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred143_ChemicalChunker
    public final void synpred143_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:329: ( wp_poss )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:329: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred143_ChemicalChunker741);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:337: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:337: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred144_ChemicalChunker743);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred145_ChemicalChunker
    public final void synpred145_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:341: ( wps )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:341: wps
        {
        pushFollow(FOLLOW_wps_in_synpred145_ChemicalChunker745);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_ChemicalChunker

    // $ANTLR start synpred149_ChemicalChunker
    public final void synpred149_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:377: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:377: number
        {
        pushFollow(FOLLOW_number_in_synpred149_ChemicalChunker753);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_ChemicalChunker

    // $ANTLR start synpred150_ChemicalChunker
    public final void synpred150_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:384: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:384: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred150_ChemicalChunker755);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_ChemicalChunker

    // $ANTLR start synpred158_ChemicalChunker
    public final void synpred158_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:68:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred158_ChemicalChunker789);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:20: ( colon cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:20: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred159_ChemicalChunker818);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred159_ChemicalChunker820);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred160_ChemicalChunker
    public final void synpred160_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred160_ChemicalChunker837);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred160_ChemicalChunker839);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:20: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred162_ChemicalChunker903);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred163_ChemicalChunker
    public final void synpred163_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:23: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred163_ChemicalChunker905);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:28: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:28: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred164_ChemicalChunker907);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:44: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:44: stop
        {
        pushFollow(FOLLOW_stop_in_synpred166_ChemicalChunker911);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:49: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:49: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred167_ChemicalChunker913);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:63: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:63: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred168_ChemicalChunker915);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:72: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:72: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred169_ChemicalChunker917);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred171_ChemicalChunker
    public final void synpred171_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:93: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:93: sym
        {
        pushFollow(FOLLOW_sym_in_synpred171_ChemicalChunker921);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:97: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:97: cd
        {
        pushFollow(FOLLOW_cd_in_synpred172_ChemicalChunker923);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:100: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:100: noun
        {
        pushFollow(FOLLOW_noun_in_synpred173_ChemicalChunker925);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:105: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:105: inof
        {
        pushFollow(FOLLOW_inof_in_synpred174_ChemicalChunker927);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:110: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:110: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred175_ChemicalChunker929);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:116: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:116: cd
        {
        pushFollow(FOLLOW_cd_in_synpred176_ChemicalChunker931);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:119: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:119: comma
        {
        pushFollow(FOLLOW_comma_in_synpred177_ChemicalChunker933);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:125: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:125: adj
        {
        pushFollow(FOLLOW_adj_in_synpred178_ChemicalChunker935);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:142: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:142: fw
        {
        pushFollow(FOLLOW_fw_in_synpred180_ChemicalChunker943);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:145: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:145: verb
        {
        pushFollow(FOLLOW_verb_in_synpred181_ChemicalChunker945);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:150: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:150: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred182_ChemicalChunker947);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:166: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:166: stop
        {
        pushFollow(FOLLOW_stop_in_synpred184_ChemicalChunker951);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:171: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:171: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred185_ChemicalChunker953);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:185: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:185: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred186_ChemicalChunker955);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:194: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:194: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred187_ChemicalChunker957);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:215: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:215: sym
        {
        pushFollow(FOLLOW_sym_in_synpred189_ChemicalChunker961);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:219: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:219: cd
        {
        pushFollow(FOLLOW_cd_in_synpred190_ChemicalChunker963);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:222: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:222: noun
        {
        pushFollow(FOLLOW_noun_in_synpred191_ChemicalChunker965);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:227: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:227: inof
        {
        pushFollow(FOLLOW_inof_in_synpred192_ChemicalChunker967);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:232: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:232: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred193_ChemicalChunker969);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:238: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:238: cd
        {
        pushFollow(FOLLOW_cd_in_synpred194_ChemicalChunker971);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:241: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:241: comma
        {
        pushFollow(FOLLOW_comma_in_synpred195_ChemicalChunker973);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:247: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:247: adj
        {
        pushFollow(FOLLOW_adj_in_synpred196_ChemicalChunker975);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:257: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:257: stop
        {
        pushFollow(FOLLOW_stop_in_synpred198_ChemicalChunker979);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred210_ChemicalChunker
    public final void synpred210_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred210_ChemicalChunker1033);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_ChemicalChunker

    // $ANTLR start synpred211_ChemicalChunker
    public final void synpred211_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred211_ChemicalChunker1035);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred212_ChemicalChunker1037);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred213_ChemicalChunker1039);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred217_ChemicalChunker
    public final void synpred217_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred217_ChemicalChunker1125);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:35: ( nntime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:93:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred222_ChemicalChunker1141);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred225_ChemicalChunker
    public final void synpred225_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:34: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:34: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred225_ChemicalChunker1215);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:19: ( adv )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:19: adv
        {
        pushFollow(FOLLOW_adv_in_synpred243_ChemicalChunker1293);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:23: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:23: adj
        {
        pushFollow(FOLLOW_adj_in_synpred244_ChemicalChunker1295);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:55: ( nntemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:55: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred250_ChemicalChunker1315);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:18: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:18: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1510);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:32: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:119:32: dt
        {
        pushFollow(FOLLOW_dt_in_synpred263_ChemicalChunker1569);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:19: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:19: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred268_ChemicalChunker1600);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:34: ( oscarCompound2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:34: oscarCompound2
        {
        pushFollow(FOLLOW_oscarCompound2_in_synpred269_ChemicalChunker1602);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:64: ( oscarCompound4 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:64: oscarCompound4
        {
        pushFollow(FOLLOW_oscarCompound4_in_synpred271_ChemicalChunker1606);
        oscarCompound4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:27: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:27: dash
        {
        pushFollow(FOLLOW_dash_in_synpred273_ChemicalChunker1650);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:27: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:27: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1682);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred275_ChemicalChunker1684);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:42: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:42: dash
        {
        pushFollow(FOLLOW_dash_in_synpred276_ChemicalChunker1688);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred277_ChemicalChunker1718);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred278_ChemicalChunker1767);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred279_ChemicalChunker1769);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred280_ChemicalChunker1785);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred281_ChemicalChunker1787);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred282_ChemicalChunker1791);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:40: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:40: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred283_ChemicalChunker1796);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:49: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:49: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred284_ChemicalChunker1798);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:18: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:18: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1809);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:11: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:11: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred287_ChemicalChunker1873);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: ( jj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred288_ChemicalChunker1891);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: ( jj )?
        int alt113=2;
        switch ( input.LA(1) ) {
            case 140:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA113_3 = input.LA(3);

                        if ( (synpred288_ChemicalChunker()) ) {
                            alt113=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt113) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred289_ChemicalChunker1891);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred289_ChemicalChunker1894);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:3: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:3: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred290_ChemicalChunker1905);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:165:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred296_ChemicalChunker2017);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred296_ChemicalChunker2020);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:9: ( lrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred301_ChemicalChunker2069);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:13: ( rrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred302_ChemicalChunker2071);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred303_ChemicalChunker2073);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred304_ChemicalChunker2075);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // Delegated rules

    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    static final String DFA2_eotS =
        "\u0082\uffff";
    static final String DFA2_eofS =
        "\1\2\u0081\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\175\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00bf\1\0\1\uffff\175\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\175\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\64\1\uffff\1\42\1\147\1\47\1\127\1\25\1\145\1\126\1\17"+
        "\1\70\1\1\1\3\1\66\1\150\1\30\1\32\1\37\1\43\1\124\1\146\1\33\1"+
        "\10\1\50\1\170\1\100\1\134\1\131\1\141\1\130\1\112\1\76\1\57\1\20"+
        "\1\4\1\13\1\102\1\164\1\151\1\152\1\16\1\5\1\55\1\41\1\105\1\157"+
        "\1\56\1\155\1\113\1\163\1\46\1\71\1\21\1\60\1\26\1\174\1\137\1\22"+
        "\1\40\1\107\1\106\1\120\1\162\1\140\1\44\1\115\1\114\1\31\1\111"+
        "\1\161\1\6\1\62\1\51\1\7\1\45\1\110\1\101\1\122\1\156\1\172\1\144"+
        "\1\125\1\153\1\15\1\63\1\14\1\24\1\36\1\27\1\72\1\61\1\160\1\11"+
        "\1\2\1\35\1\67\1\104\1\73\1\133\1\121\1\135\1\171\1\175\1\142\1"+
        "\132\1\123\1\75\1\54\1\34\1\12\1\0\1\165\1\143\1\116\1\103\1\53"+
        "\1\65\1\23\1\154\1\136\1\173\1\166\1\117\1\52\1\77\1\74\1\167\2"+
        "\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\25\1\10\1\11\1\35\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\34\1\26\1\36\1\uffff\1\22\1\50\1\42\1\43\1\57\1"+
            "\40\1\44\1\45\1\46\1\47\1\37\1\51\1\52\1\53\1\54\1\55\1\23\1"+
            "\134\1\172\1\135\1\136\1\32\1\66\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\41\1\147\1\56\1\150\1\151\1\152\1\153\1"+
            "\uffff\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1"+
            "\162\1\60\1\163\1\164\1\165\1\73\1\166\1\33\1\65\1\167\1\170"+
            "\1\171\1\177\1\1\1\uffff\1\173\1\uffff\1\2\1\uffff\1\175\1\176"+
            "\1\20\1\174\16\uffff\1\21\4\uffff\1\3\3\uffff\1\101\1\74\1\75"+
            "\4\uffff\1\104\1\4\1\5\1\6\1\7\1\125\1\uffff\1\27\1\uffff\1"+
            "\30\2\uffff\1\31\13\uffff\1\24\5\uffff\1\12\1\13\1\17\1\14\1"+
            "\16\1\uffff\1\15\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130"+
            "\1\133\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\177\uffff";
    static final String DFA4_eofS =
        "\1\15\176\uffff";
    static final String DFA4_minS =
        "\1\13\14\0\1\uffff\156\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00bf\14\0\1\uffff\156\0\3\uffff";
    static final String DFA4_acceptS =
        "\15\uffff\1\4\156\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\144\1\43\1\20\1\116\1\114\1\146\1\42\1\166\1\76\1\5\1"+
        "\126\1\151\1\uffff\1\157\1\72\1\44\1\24\1\161\1\55\1\127\1\136\1"+
        "\117\1\66\1\54\1\164\1\121\1\110\1\165\1\153\1\154\1\40\1\2\1\152"+
        "\1\10\1\162\1\163\1\21\1\65\1\106\1\25\1\142\1\3\1\17\1\50\1\60"+
        "\1\120\1\122\1\0\1\57\1\147\1\47\1\56\1\34\1\107\1\61\1\100\1\41"+
        "\1\135\1\132\1\141\1\62\1\115\1\105\1\137\1\130\1\31\1\167\1\143"+
        "\1\150\1\4\1\37\1\156\1\155\1\133\1\51\1\32\1\71\1\171\1\27\1\33"+
        "\1\73\1\140\1\64\1\125\1\12\1\7\1\67\1\124\1\35\1\77\1\103\1\53"+
        "\1\6\1\22\1\160\1\104\1\123\1\46\1\36\1\52\1\15\1\30\1\170\1\113"+
        "\1\75\1\101\1\63\1\16\1\13\1\145\1\131\1\111\1\74\1\45\1\26\1\1"+
        "\1\14\1\23\1\102\1\134\1\112\1\70\1\11\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\25\1\13\1\14\1\35\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\34\1\26\1\36\1\uffff\1\22\1\50\1\42\1\43\1\57\1"+
            "\40\1\44\1\45\1\46\1\47\1\37\1\51\1\52\1\53\1\54\1\55\1\23\1"+
            "\134\1\172\1\135\1\136\1\32\1\66\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\41\1\147\1\56\1\150\1\151\1\152\1\153\1"+
            "\uffff\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1"+
            "\162\1\60\1\163\1\164\1\165\1\73\1\166\1\33\1\65\1\167\1\170"+
            "\1\171\1\15\1\16\1\uffff\1\173\1\uffff\1\15\1\uffff\2\15\1\20"+
            "\1\15\15\uffff\1\15\1\21\4\uffff\1\17\3\uffff\1\101\1\74\1\75"+
            "\4\uffff\1\104\1\7\1\10\1\11\1\12\1\125\1\uffff\1\27\1\uffff"+
            "\1\30\2\uffff\1\31\13\uffff\1\24\5\uffff\1\1\1\2\1\6\1\3\1\5"+
            "\1\uffff\1\4\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130\1\133"+
            "\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\36\uffff";
    static final String DFA5_eofS =
        "\1\1\35\uffff";
    static final String DFA5_minS =
        "\1\13\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00bf\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\32\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\17\uffff\1\11\1\1\1\13\1\12\1\2\1\5\1\0\1\7\1\4\1\10\1\6\1\14\1"+
        "\3\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\7\2\1\2\uffff\23\1\1\uffff\46\1\1\uffff\25\1\1\16"+
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff"+
            "\1\1\3\uffff\3\1\4\uffff\1\1\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\1\10\1\11\1\15"+
            "\1\12\1\14\1\uffff\1\13\2\1\1\uffff\15\1",
            "",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 38:48: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u0087\uffff";
    static final String DFA7_eofS =
        "\u0087\uffff";
    static final String DFA7_minS =
        "\1\13\1\0\1\uffff\2\0\1\uffff\3\0\5\uffff\1\0\4\uffff\6\0\27\uffff"+
        "\1\0\5\uffff\1\0\120\uffff";
    static final String DFA7_maxS =
        "\1\u00bf\1\0\1\uffff\2\0\1\uffff\3\0\5\uffff\1\0\4\uffff\6\0\27"+
        "\uffff\1\0\5\uffff\1\0\120\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\70\uffff\1\3\44\uffff\1\4\21\uffff\1\5\1\12\2\uffff"+
        "\1\14\1\15\1\16\1\21\5\uffff\1\1\1\17\1\20\1\7\1\6\1\10\1\11\1\13";
    static final String DFA7_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\uffff\1\3\1\4\1\5\5\uffff\1\6\4\uffff"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\27\uffff\1\15\5\uffff\1\16\120\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\10\1\27\1\30\1\2\1\60\2\uffff\20\140\3\2\1\uffff\20\2\1\7"+
            "\4\73\2\2\10\73\1\2\1\73\1\2\4\73\1\uffff\1\73\1\2\1\73\1\2"+
            "\4\73\1\2\1\73\1\2\3\73\1\2\1\73\1\16\1\2\3\73\1\166\1\6\1\uffff"+
            "\1\170\3\uffff\2\163\1\3\1\163\16\uffff\1\4\4\uffff\1\162\3"+
            "\uffff\1\2\1\1\1\2\4\uffff\1\140\1\23\1\24\1\25\1\26\1\167\1"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\171"+
            "\1\uffff\1\171\1\66\1\140\1\uffff\6\73\7\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 115;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred27_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred18_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 59;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_19 = input.LA(1);

                         
                        int index7_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_20 = input.LA(1);

                         
                        int index7_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_22 = input.LA(1);

                         
                        int index7_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_22);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_23 = input.LA(1);

                         
                        int index7_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_24 = input.LA(1);

                         
                        int index7_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_48 = input.LA(1);

                         
                        int index7_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index7_48);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_54 = input.LA(1);

                         
                        int index7_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index7_54);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\20\uffff";
    static final String DFA9_eofS =
        "\20\uffff";
    static final String DFA9_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA9_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0\1\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\3\6\uffff\1\2\6\uffff\1\1";
    static final String DFA9_specialS =
        "\11\uffff\1\0\1\4\1\3\1\1\1\5\1\2\1\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff\1\10\1\1"+
            "\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:27: ( adj | adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\100\uffff";
    static final String DFA10_eofS =
        "\1\1\77\uffff";
    static final String DFA10_minS =
        "\1\13\1\uffff\72\0\4\uffff";
    static final String DFA10_maxS =
        "\1\u00bf\1\uffff\72\0\4\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\5\72\uffff\1\1\1\2\1\4\1\3";
    static final String DFA10_specialS =
        "\2\uffff\1\65\1\71\1\0\1\66\1\67\1\14\1\41\1\45\1\50\1\11\1\6\1"+
        "\22\1\10\1\34\1\37\1\42\1\43\1\26\1\60\1\57\1\20\1\13\1\24\1\53"+
        "\1\36\1\30\1\16\1\23\1\32\1\61\1\1\1\54\1\62\1\4\1\64\1\27\1\7\1"+
        "\55\1\40\1\31\1\21\1\17\1\5\1\56\1\52\1\47\1\51\1\33\1\3\1\12\1"+
        "\35\1\2\1\70\1\25\1\44\1\15\1\63\1\46\4\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\16\1\7\1\10\1\26\1\60\2\uffff\20\1\1\25\1\17\1\27\1\uffff"+
            "\1\14\1\41\1\33\1\34\1\50\1\31\1\35\1\36\1\37\1\40\1\30\1\42"+
            "\1\43\1\44\1\45\1\46\1\15\4\1\1\23\1\57\10\1\1\32\1\1\1\47\4"+
            "\1\1\uffff\1\1\1\61\1\1\1\62\4\1\1\63\1\1\1\51\3\1\1\64\1\1"+
            "\1\24\1\56\4\1\1\2\1\uffff\3\1\1\uffff\2\1\1\12\1\1\15\uffff"+
            "\1\1\1\13\4\uffff\1\1\3\uffff\1\72\1\65\1\66\4\uffff\1\1\1\3"+
            "\1\4\1\5\1\6\1\1\1\uffff\1\20\1\uffff\1\21\2\uffff\1\22\13\uffff"+
            "\1\11\5\uffff\5\1\1\uffff\1\1\1\67\1\1\1\uffff\6\1\1\52\1\53"+
            "\1\54\1\55\1\70\1\71\1\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()+ loopback of 50:39: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_4 = input.LA(1);

                         
                        int index10_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_32 = input.LA(1);

                         
                        int index10_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_32);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA10_53 = input.LA(1);

                         
                        int index10_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_53);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA10_50 = input.LA(1);

                         
                        int index10_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_50);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA10_35 = input.LA(1);

                         
                        int index10_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_35);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA10_44 = input.LA(1);

                         
                        int index10_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA10_12 = input.LA(1);

                         
                        int index10_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA10_38 = input.LA(1);

                         
                        int index10_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_38);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA10_14 = input.LA(1);

                         
                        int index10_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA10_11 = input.LA(1);

                         
                        int index10_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA10_51 = input.LA(1);

                         
                        int index10_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA10_23 = input.LA(1);

                         
                        int index10_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA10_7 = input.LA(1);

                         
                        int index10_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_7);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA10_57 = input.LA(1);

                         
                        int index10_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_57);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA10_28 = input.LA(1);

                         
                        int index10_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_28);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA10_43 = input.LA(1);

                         
                        int index10_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_43);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA10_22 = input.LA(1);

                         
                        int index10_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA10_42 = input.LA(1);

                         
                        int index10_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_42);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA10_13 = input.LA(1);

                         
                        int index10_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_13);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA10_29 = input.LA(1);

                         
                        int index10_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA10_24 = input.LA(1);

                         
                        int index10_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA10_55 = input.LA(1);

                         
                        int index10_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_55);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA10_19 = input.LA(1);

                         
                        int index10_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_19);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA10_37 = input.LA(1);

                         
                        int index10_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA10_27 = input.LA(1);

                         
                        int index10_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA10_41 = input.LA(1);

                         
                        int index10_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_41);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA10_30 = input.LA(1);

                         
                        int index10_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_30);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA10_49 = input.LA(1);

                         
                        int index10_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_49);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA10_15 = input.LA(1);

                         
                        int index10_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_15);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA10_52 = input.LA(1);

                         
                        int index10_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_52);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA10_26 = input.LA(1);

                         
                        int index10_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_26);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA10_16 = input.LA(1);

                         
                        int index10_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_16);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA10_40 = input.LA(1);

                         
                        int index10_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_40);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA10_8 = input.LA(1);

                         
                        int index10_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_8);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA10_17 = input.LA(1);

                         
                        int index10_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_17);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA10_18 = input.LA(1);

                         
                        int index10_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_18);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA10_56 = input.LA(1);

                         
                        int index10_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_56);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA10_9 = input.LA(1);

                         
                        int index10_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_9);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA10_59 = input.LA(1);

                         
                        int index10_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_59);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA10_47 = input.LA(1);

                         
                        int index10_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_47);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA10_10 = input.LA(1);

                         
                        int index10_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_10);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA10_48 = input.LA(1);

                         
                        int index10_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_48);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA10_46 = input.LA(1);

                         
                        int index10_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_46);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA10_25 = input.LA(1);

                         
                        int index10_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_25);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA10_33 = input.LA(1);

                         
                        int index10_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_33);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA10_39 = input.LA(1);

                         
                        int index10_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_39);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA10_45 = input.LA(1);

                         
                        int index10_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_45);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA10_21 = input.LA(1);

                         
                        int index10_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_21);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA10_20 = input.LA(1);

                         
                        int index10_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_20);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA10_31 = input.LA(1);

                         
                        int index10_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_31);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA10_34 = input.LA(1);

                         
                        int index10_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_34);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA10_58 = input.LA(1);

                         
                        int index10_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_58);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA10_36 = input.LA(1);

                         
                        int index10_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_36);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA10_2 = input.LA(1);

                         
                        int index10_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_2);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA10_5 = input.LA(1);

                         
                        int index10_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_5);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA10_6 = input.LA(1);

                         
                        int index10_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_6);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA10_54 = input.LA(1);

                         
                        int index10_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_54);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA10_3 = input.LA(1);

                         
                        int index10_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 62;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\106\uffff";
    static final String DFA14_eofS =
        "\1\1\105\uffff";
    static final String DFA14_minS =
        "\1\13\1\uffff\101\0\3\uffff";
    static final String DFA14_maxS =
        "\1\u00bf\1\uffff\101\0\3\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\4\101\uffff\1\1\1\3\1\2";
    static final String DFA14_specialS =
        "\2\uffff\1\15\1\10\1\13\1\70\1\2\1\1\1\30\1\16\1\43\1\61\1\46\1"+
        "\31\1\11\1\27\1\77\1\35\1\63\1\34\1\75\1\17\1\56\1\60\1\53\1\73"+
        "\1\41\1\36\1\74\1\23\1\21\1\5\1\3\1\24\1\14\1\64\1\51\1\37\1\76"+
        "\1\25\1\50\1\12\1\7\1\33\1\32\1\62\1\54\1\52\1\0\1\45\1\26\1\47"+
        "\1\42\1\66\1\40\1\44\1\20\1\6\1\71\1\67\1\72\1\65\1\55\1\22\1\4"+
        "\1\100\1\57\3\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\25\1\14\1\15\1\35\1\67\2\uffff\20\1\1\34\1\26\1\36\1\uffff"+
            "\1\22\1\50\1\42\1\43\1\57\1\40\1\44\1\45\1\46\1\47\1\37\1\51"+
            "\1\52\1\53\1\54\1\55\1\23\4\1\1\32\1\66\10\1\1\41\1\1\1\56\4"+
            "\1\1\uffff\1\1\1\70\1\1\1\71\4\1\1\72\1\1\1\60\3\1\1\73\1\1"+
            "\1\33\1\65\4\1\1\17\1\uffff\3\1\1\uffff\2\1\1\20\1\1\15\uffff"+
            "\1\16\1\21\4\uffff\1\1\3\uffff\1\101\1\74\1\75\4\uffff\1\1\1"+
            "\10\1\11\1\12\1\13\1\1\1\uffff\1\27\1\uffff\1\30\2\uffff\1\31"+
            "\13\uffff\1\24\5\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\76"+
            "\1\1\1\uffff\6\1\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:78: ( ( conjunction )* ( adj )* ( adv )* noun | number | ratio )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_48 = input.LA(1);

                         
                        int index14_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_48);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_32 = input.LA(1);

                         
                        int index14_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_32);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_64 = input.LA(1);

                         
                        int index14_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_64);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_31 = input.LA(1);

                         
                        int index14_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_31);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA14_57 = input.LA(1);

                         
                        int index14_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_57);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA14_42 = input.LA(1);

                         
                        int index14_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_42);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA14_41 = input.LA(1);

                         
                        int index14_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_41);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA14_34 = input.LA(1);

                         
                        int index14_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_34);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA14_21 = input.LA(1);

                         
                        int index14_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA14_56 = input.LA(1);

                         
                        int index14_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA14_30 = input.LA(1);

                         
                        int index14_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_30);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA14_63 = input.LA(1);

                         
                        int index14_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_63);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA14_29 = input.LA(1);

                         
                        int index14_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA14_33 = input.LA(1);

                         
                        int index14_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_33);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA14_39 = input.LA(1);

                         
                        int index14_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_39);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA14_50 = input.LA(1);

                         
                        int index14_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA14_44 = input.LA(1);

                         
                        int index14_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_44);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA14_43 = input.LA(1);

                         
                        int index14_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_43);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA14_27 = input.LA(1);

                         
                        int index14_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_27);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA14_37 = input.LA(1);

                         
                        int index14_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA14_54 = input.LA(1);

                         
                        int index14_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_54);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA14_26 = input.LA(1);

                         
                        int index14_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_26);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA14_52 = input.LA(1);

                         
                        int index14_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_52);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA14_55 = input.LA(1);

                         
                        int index14_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_55);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA14_49 = input.LA(1);

                         
                        int index14_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_49);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA14_51 = input.LA(1);

                         
                        int index14_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_51);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA14_40 = input.LA(1);

                         
                        int index14_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA14_36 = input.LA(1);

                         
                        int index14_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_36);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA14_47 = input.LA(1);

                         
                        int index14_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_47);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA14_24 = input.LA(1);

                         
                        int index14_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_24);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA14_46 = input.LA(1);

                         
                        int index14_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA14_62 = input.LA(1);

                         
                        int index14_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_62);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA14_22 = input.LA(1);

                         
                        int index14_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_22);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA14_66 = input.LA(1);

                         
                        int index14_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_66);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA14_23 = input.LA(1);

                         
                        int index14_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_23);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA14_45 = input.LA(1);

                         
                        int index14_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_45);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA14_35 = input.LA(1);

                         
                        int index14_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_35);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA14_61 = input.LA(1);

                         
                        int index14_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_61);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA14_53 = input.LA(1);

                         
                        int index14_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_53);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA14_59 = input.LA(1);

                         
                        int index14_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_59);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA14_58 = input.LA(1);

                         
                        int index14_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA14_60 = input.LA(1);

                         
                        int index14_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA14_25 = input.LA(1);

                         
                        int index14_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_25);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA14_28 = input.LA(1);

                         
                        int index14_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_28);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA14_38 = input.LA(1);

                         
                        int index14_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_38);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA14_65 = input.LA(1);

                         
                        int index14_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\102\uffff";
    static final String DFA11_eofS =
        "\102\uffff";
    static final String DFA11_minS =
        "\1\13\20\uffff\1\0\60\uffff";
    static final String DFA11_maxS =
        "\1\u00bf\20\uffff\1\0\60\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\77\uffff\1\1";
    static final String DFA11_specialS =
        "\21\uffff\1\0\60\uffff}>";
    static final String[] DFA11_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\21\7\uffff\1\1\16\uffff\1\101\1\1"+
            "\10\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:79: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_17 = input.LA(1);

                         
                        int index11_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\17\uffff";
    static final String DFA12_eofS =
        "\17\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA12_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA12_specialS =
        "\10\uffff\1\3\1\2\1\1\1\0\1\5\1\4\1\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff"+
            "\7\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:92: ( adj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\u0084\uffff";
    static final String DFA15_eofS =
        "\1\6\u0083\uffff";
    static final String DFA15_minS =
        "\1\13\5\0\176\uffff";
    static final String DFA15_maxS =
        "\1\u00bf\5\0\176\uffff";
    static final String DFA15_acceptS =
        "\6\uffff\1\2\174\uffff\1\1";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\176\uffff}>";
    static final String[] DFA15_transitionS = {
            "\5\6\2\uffff\23\6\1\uffff\1\3\17\6\1\5\25\6\1\uffff\26\6\1\4"+
            "\1\uffff\3\6\1\uffff\2\6\1\1\1\6\15\uffff\1\6\1\2\4\uffff\1"+
            "\6\3\uffff\3\6\4\uffff\6\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1"+
            "\6\13\uffff\1\6\5\uffff\5\6\1\uffff\3\6\1\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "50:154: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\66\uffff";
    static final String DFA29_eofS =
        "\1\1\65\uffff";
    static final String DFA29_minS =
        "\1\13\1\uffff\63\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u00bf\1\uffff\63\0\1\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\2\63\uffff\1\1";
    static final String DFA29_specialS =
        "\2\uffff\1\13\1\31\1\34\1\14\1\53\1\46\1\45\1\6\1\41\1\7\1\27\1"+
        "\61\1\44\1\40\1\12\1\26\1\52\1\35\1\30\1\15\1\37\1\5\1\17\1\11\1"+
        "\24\1\23\1\43\1\60\1\4\1\22\1\42\1\62\1\20\1\0\1\57\1\33\1\2\1\50"+
        "\1\16\1\3\1\47\1\32\1\1\1\54\1\10\1\21\1\55\1\25\1\36\1\51\1\56"+
        "\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\1\1\14\1\15\2\1\2\uffff\23\1\1\uffff\21\1\1\26\1\64\1\27"+
            "\1\30\2\1\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\1\1\41\1"+
            "\1\1\42\1\43\1\44\1\45\1\uffff\1\46\1\1\1\47\1\1\1\50\1\51\1"+
            "\52\1\53\1\1\1\54\1\1\1\55\1\56\1\57\1\1\1\60\1\16\1\1\1\61"+
            "\1\62\1\63\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\1\1\1\10\1\11\1\12\1\13"+
            "\1\17\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\20\1\21\1\23"+
            "\1\22\1\25\1\24\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()+ loopback of 61:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_35 = input.LA(1);

                         
                        int index29_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_35);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_44 = input.LA(1);

                         
                        int index29_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_44);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_38 = input.LA(1);

                         
                        int index29_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_38);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_41 = input.LA(1);

                         
                        int index29_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_30 = input.LA(1);

                         
                        int index29_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_23 = input.LA(1);

                         
                        int index29_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_23);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_46 = input.LA(1);

                         
                        int index29_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_25 = input.LA(1);

                         
                        int index29_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_16 = input.LA(1);

                         
                        int index29_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_5 = input.LA(1);

                         
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_21 = input.LA(1);

                         
                        int index29_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_21);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA29_40 = input.LA(1);

                         
                        int index29_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA29_24 = input.LA(1);

                         
                        int index29_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA29_34 = input.LA(1);

                         
                        int index29_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA29_47 = input.LA(1);

                         
                        int index29_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_47);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA29_31 = input.LA(1);

                         
                        int index29_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_31);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA29_27 = input.LA(1);

                         
                        int index29_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_27);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA29_26 = input.LA(1);

                         
                        int index29_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA29_49 = input.LA(1);

                         
                        int index29_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_49);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA29_17 = input.LA(1);

                         
                        int index29_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_17);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA29_20 = input.LA(1);

                         
                        int index29_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_20);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA29_43 = input.LA(1);

                         
                        int index29_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_43);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA29_37 = input.LA(1);

                         
                        int index29_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_37);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA29_19 = input.LA(1);

                         
                        int index29_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_19);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA29_50 = input.LA(1);

                         
                        int index29_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_50);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA29_22 = input.LA(1);

                         
                        int index29_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_22);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA29_15 = input.LA(1);

                         
                        int index29_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_15);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA29_32 = input.LA(1);

                         
                        int index29_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_32);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA29_28 = input.LA(1);

                         
                        int index29_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_28);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA29_14 = input.LA(1);

                         
                        int index29_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_14);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA29_42 = input.LA(1);

                         
                        int index29_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA29_39 = input.LA(1);

                         
                        int index29_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_39);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA29_51 = input.LA(1);

                         
                        int index29_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_51);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA29_18 = input.LA(1);

                         
                        int index29_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_18);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA29_45 = input.LA(1);

                         
                        int index29_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA29_48 = input.LA(1);

                         
                        int index29_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA29_52 = input.LA(1);

                         
                        int index29_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA29_36 = input.LA(1);

                         
                        int index29_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_36);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA29_29 = input.LA(1);

                         
                        int index29_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_29);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA29_33 = input.LA(1);

                         
                        int index29_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA24_eotS =
        "\51\uffff";
    static final String DFA24_eofS =
        "\1\1\50\uffff";
    static final String DFA24_minS =
        "\1\13\1\uffff\46\0\1\uffff";
    static final String DFA24_maxS =
        "\1\u00bf\1\uffff\46\0\1\uffff";
    static final String DFA24_acceptS =
        "\1\uffff\1\2\46\uffff\1\1";
    static final String DFA24_specialS =
        "\2\uffff\1\23\1\12\1\27\1\20\1\33\1\16\1\44\1\1\1\10\1\34\1\14\1"+
        "\35\1\4\1\13\1\40\1\17\1\36\1\21\1\41\1\45\1\22\1\3\1\30\1\42\1"+
        "\43\1\31\1\2\1\25\1\0\1\7\1\6\1\26\1\11\1\5\1\24\1\37\1\15\1\32"+
        "\1\uffff}>";
    static final String[] DFA24_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\21\1\1\11\1\47\1\12\1\13\2\1\1\14"+
            "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24\1\1\1\25\1\26\1"+
            "\27\1\30\1\uffff\1\31\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\1\1"+
            "\37\1\1\1\40\1\41\1\42\1\1\1\43\1\2\1\1\1\44\1\45\1\46\2\1\1"+
            "\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1"+
            "\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1\6\1"+
            "\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "()+ loopback of 61:59: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_30 = input.LA(1);

                         
                        int index24_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_9 = input.LA(1);

                         
                        int index24_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA24_28 = input.LA(1);

                         
                        int index24_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA24_23 = input.LA(1);

                         
                        int index24_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA24_14 = input.LA(1);

                         
                        int index24_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA24_35 = input.LA(1);

                         
                        int index24_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_35);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA24_32 = input.LA(1);

                         
                        int index24_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA24_31 = input.LA(1);

                         
                        int index24_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_31);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA24_10 = input.LA(1);

                         
                        int index24_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA24_34 = input.LA(1);

                         
                        int index24_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_34);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA24_3 = input.LA(1);

                         
                        int index24_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_3);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA24_15 = input.LA(1);

                         
                        int index24_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA24_12 = input.LA(1);

                         
                        int index24_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA24_38 = input.LA(1);

                         
                        int index24_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_38);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA24_7 = input.LA(1);

                         
                        int index24_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_7);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA24_17 = input.LA(1);

                         
                        int index24_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA24_5 = input.LA(1);

                         
                        int index24_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_5);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA24_19 = input.LA(1);

                         
                        int index24_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA24_22 = input.LA(1);

                         
                        int index24_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_22);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA24_2 = input.LA(1);

                         
                        int index24_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_2);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA24_36 = input.LA(1);

                         
                        int index24_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_36);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA24_29 = input.LA(1);

                         
                        int index24_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_29);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA24_33 = input.LA(1);

                         
                        int index24_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA24_4 = input.LA(1);

                         
                        int index24_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_4);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA24_24 = input.LA(1);

                         
                        int index24_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA24_27 = input.LA(1);

                         
                        int index24_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA24_39 = input.LA(1);

                         
                        int index24_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_39);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA24_6 = input.LA(1);

                         
                        int index24_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_6);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA24_11 = input.LA(1);

                         
                        int index24_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA24_13 = input.LA(1);

                         
                        int index24_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_13);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA24_18 = input.LA(1);

                         
                        int index24_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_18);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA24_37 = input.LA(1);

                         
                        int index24_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA24_16 = input.LA(1);

                         
                        int index24_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_16);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA24_20 = input.LA(1);

                         
                        int index24_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_20);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA24_25 = input.LA(1);

                         
                        int index24_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_25);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA24_26 = input.LA(1);

                         
                        int index24_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_26);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA24_8 = input.LA(1);

                         
                        int index24_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_8);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA24_21 = input.LA(1);

                         
                        int index24_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index24_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\17\uffff";
    static final String DFA26_eofS =
        "\1\1\16\uffff";
    static final String DFA26_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA26_specialS =
        "\10\uffff\1\4\1\0\1\3\1\1\1\5\1\2\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\46\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()* loopback of 61:69: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\17\uffff";
    static final String DFA27_eofS =
        "\1\7\16\uffff";
    static final String DFA27_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA27_maxS =
        "\1\u00bf\6\12\1\uffff\6\0\1\uffff";
    static final String DFA27_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA27_specialS =
        "\10\uffff\1\0\1\3\1\1\1\4\1\2\1\5\1\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\23\7\1\uffff\46\7\1\uffff\27\7\1\uffff"+
            "\1\7\1\uffff\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\1\7\3\uffff"+
            "\3\7\4\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7"+
            "\2\uffff\1\7\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "61:74: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_8 = input.LA(1);

                         
                        int index27_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index27_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_10 = input.LA(1);

                         
                        int index27_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index27_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_12 = input.LA(1);

                         
                        int index27_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index27_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_9 = input.LA(1);

                         
                        int index27_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index27_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA27_11 = input.LA(1);

                         
                        int index27_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index27_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA27_13 = input.LA(1);

                         
                        int index27_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index27_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\u0083\uffff";
    static final String DFA33_eofS =
        "\1\15\u0082\uffff";
    static final String DFA33_minS =
        "\1\13\14\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\14\uffff\1\0\5\uffff"+
        "\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA33_maxS =
        "\1\u00bf\14\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\14\uffff\1\0\5"+
        "\uffff\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA33_acceptS =
        "\15\uffff\1\2\164\uffff\1\1";
    static final String DFA33_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\14\1\15\2\uffff\1\16\1\uffff\1\17\14\uffff\1\20\5\uffff\1\21"+
        "\36\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\46\uffff\1\44\4\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\15\1\13\1\14\2\15\2\uffff\1\111\1\112\1\110\1\116\1\117\1"+
            "\126\1\127\1\113\1\125\1\120\1\122\1\114\1\115\1\124\1\123\1"+
            "\121\2\15\1\41\1\uffff\6\15\1\47\37\15\1\uffff\26\15\1\17\1"+
            "\uffff\1\176\1\uffff\1\15\1\uffff\4\15\15\uffff\1\16\1\24\4"+
            "\uffff\1\22\3\uffff\3\15\4\uffff\1\107\1\7\1\10\1\11\1\12\1"+
            "\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\13\uffff\1\15\5\uffff"+
            "\1\1\1\2\1\6\1\3\1\5\1\uffff\1\4\1\15\1\106\1\uffff\15\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "()* loopback of 61:94: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_1 = input.LA(1);

                         
                        int index33_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_3 = input.LA(1);

                         
                        int index33_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_4 = input.LA(1);

                         
                        int index33_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_5 = input.LA(1);

                         
                        int index33_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_6 = input.LA(1);

                         
                        int index33_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA33_7 = input.LA(1);

                         
                        int index33_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA33_10 = input.LA(1);

                         
                        int index33_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA33_11 = input.LA(1);

                         
                        int index33_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA33_12 = input.LA(1);

                         
                        int index33_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA33_14 = input.LA(1);

                         
                        int index33_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA33_15 = input.LA(1);

                         
                        int index33_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA33_18 = input.LA(1);

                         
                        int index33_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA33_20 = input.LA(1);

                         
                        int index33_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA33_33 = input.LA(1);

                         
                        int index33_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA33_39 = input.LA(1);

                         
                        int index33_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_39);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA33_70 = input.LA(1);

                         
                        int index33_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_70);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA33_71 = input.LA(1);

                         
                        int index33_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_71);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA33_72 = input.LA(1);

                         
                        int index33_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_72);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA33_73 = input.LA(1);

                         
                        int index33_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_73);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA33_74 = input.LA(1);

                         
                        int index33_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_74);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA33_75 = input.LA(1);

                         
                        int index33_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_75);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA33_76 = input.LA(1);

                         
                        int index33_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_76);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA33_77 = input.LA(1);

                         
                        int index33_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_77);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA33_78 = input.LA(1);

                         
                        int index33_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_78);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA33_79 = input.LA(1);

                         
                        int index33_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_79);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA33_80 = input.LA(1);

                         
                        int index33_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_80);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA33_81 = input.LA(1);

                         
                        int index33_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_81);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA33_82 = input.LA(1);

                         
                        int index33_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_82);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA33_83 = input.LA(1);

                         
                        int index33_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_83);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA33_84 = input.LA(1);

                         
                        int index33_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_84);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA33_85 = input.LA(1);

                         
                        int index33_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_85);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA33_86 = input.LA(1);

                         
                        int index33_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_86);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA33_87 = input.LA(1);

                         
                        int index33_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_87);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA33_126 = input.LA(1);

                         
                        int index33_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index33_126);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\14\uffff";
    static final String DFA36_eofS =
        "\14\uffff";
    static final String DFA36_minS =
        "\1\u0084\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA36_maxS =
        "\1\u00bf\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA36_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "65:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\115\uffff";
    static final String DFA37_eofS =
        "\115\uffff";
    static final String DFA37_minS =
        "\1\13\1\uffff\10\0\2\uffff\1\0\4\uffff\1\0\6\uffff\1\0\20\uffff"+
        "\4\0\40\uffff";
    static final String DFA37_maxS =
        "\1\u00bf\1\uffff\10\0\2\uffff\1\0\4\uffff\1\0\6\uffff\1\0\20\uffff"+
        "\4\0\40\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\1\10\uffff\1\6\1\7\1\uffff\1\11\1\12\1\13\1\17\1\uffff"+
        "\1\20\7\uffff\1\21\1\22\1\26\1\27\1\30\1\31\1\32\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\4\uffff\1\50\1\51\1\52\1\55\1\56\1\57"+
        "\1\60\1\61\1\62\1\63\1\64\3\uffff\1\2\1\3\1\16\1\23\1\54\1\14\1"+
        "\15\1\25\1\53\1\4\1\5\1\10\1\33\1\24\1\44\1\45\1\46\1\47";
    static final String DFA37_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\4\uffff\1"+
        "\11\6\uffff\1\12\20\uffff\1\13\1\14\1\15\1\16\40\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\7\2\22\1\17\1\57\22\uffff\1\16\1\10\1\20\1\uffff\1\4\1\40"+
            "\1\32\1\33\1\47\1\30\1\34\1\35\1\36\1\37\1\21\1\41\1\42\1\43"+
            "\1\44\1\45\1\6\4\uffff\1\14\1\56\10\uffff\1\22\1\uffff\1\46"+
            "\6\uffff\1\60\1\uffff\1\61\4\uffff\1\62\1\uffff\1\50\3\uffff"+
            "\1\63\1\uffff\1\15\1\55\4\uffff\1\5\7\uffff\1\2\17\uffff\1\3"+
            "\10\uffff\1\67\1\64\1\65\5\uffff\4\22\2\uffff\1\11\1\uffff\1"+
            "\12\2\uffff\1\13\13\uffff\1\1\14\uffff\1\66\10\uffff\1\51\1"+
            "\52\1\53\1\54\3\67",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "66:1: noun : ( prp | molecule | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | apparatus | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_2 = input.LA(1);

                         
                        int index37_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred109_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred120_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred125_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred150_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index37_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_3 = input.LA(1);

                         
                        int index37_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred109_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred118_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred119_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred125_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred149_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index37_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_4 = input.LA(1);

                         
                        int index37_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred109_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred125_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 66;}

                         
                        input.seek(index37_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_5 = input.LA(1);

                         
                        int index37_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred120_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index37_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 59;}

                        else if ( (synpred150_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred149_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA37_12 = input.LA(1);

                         
                        int index37_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index37_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA37_17 = input.LA(1);

                         
                        int index37_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred133_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index37_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA37_24 = input.LA(1);

                         
                        int index37_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred126_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index37_24);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA37_41 = input.LA(1);

                         
                        int index37_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 55;}

                         
                        input.seek(index37_41);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA37_42 = input.LA(1);

                         
                        int index37_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 55;}

                         
                        input.seek(index37_42);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA37_43 = input.LA(1);

                         
                        int index37_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 55;}

                         
                        input.seek(index37_43);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA37_44 = input.LA(1);

                         
                        int index37_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 76;}

                        else if ( (true) ) {s = 55;}

                         
                        input.seek(index37_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\u0083\uffff";
    static final String DFA42_eofS =
        "\u0083\uffff";
    static final String DFA42_minS =
        "\1\13\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1\0\12\uffff"+
        "\6\0\41\uffff\1\0\37\uffff";
    static final String DFA42_maxS =
        "\1\u00bf\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1\0\12"+
        "\uffff\6\0\41\uffff\1\0\37\uffff";
    static final String DFA42_acceptS =
        "\2\uffff\1\2\47\uffff\1\4\5\uffff\1\11\1\uffff\1\14\61\uffff\1\16"+
        "\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\20\1\12"+
        "\1\21\1\15";
    static final String DFA42_specialS =
        "\1\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\uffff\1\11\12\uffff\1\12\1\13\1\14\1\15\1\16\1\17\41\uffff"+
        "\1\20\37\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\57\1\100\1\101\2\62\2\uffff\11\144\1\143\6\144\3\62\1\uffff"+
            "\1\51\17\62\1\54\4\2\2\62\10\2\1\62\1\2\1\62\4\2\1\uffff\1\2"+
            "\1\62\1\2\1\62\4\2\1\62\1\2\1\62\3\2\1\62\1\2\1\43\1\62\3\2"+
            "\1\165\1\56\2\uffff\1\60\1\53\3\uffff\1\55\17\uffff\1\50\10"+
            "\uffff\1\62\1\1\1\62\4\uffff\1\144\1\74\1\75\1\76\1\77\1\52"+
            "\1\uffff\1\62\1\uffff\1\62\2\uffff\1\62\13\uffff\1\62\14\uffff"+
            "\1\61\1\144\1\uffff\6\2\7\62",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "76:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_1 = input.LA(1);

                         
                        int index42_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred162_ChemicalChunker()) ) {s = 118;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_35 = input.LA(1);

                         
                        int index42_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_40 = input.LA(1);

                         
                        int index42_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred168_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred169_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 123;}

                         
                        input.seek(index42_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_41 = input.LA(1);

                         
                        int index42_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred168_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred169_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_43 = input.LA(1);

                         
                        int index42_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 125;}

                         
                        input.seek(index42_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_44 = input.LA(1);

                         
                        int index42_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred168_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_45 = input.LA(1);

                         
                        int index42_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred168_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred169_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_46 = input.LA(1);

                         
                        int index42_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index42_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_47 = input.LA(1);

                         
                        int index42_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA42_49 = input.LA(1);

                         
                        int index42_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index42_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA42_60 = input.LA(1);

                         
                        int index42_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index42_60);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA42_61 = input.LA(1);

                         
                        int index42_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index42_61);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA42_62 = input.LA(1);

                         
                        int index42_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index42_62);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA42_63 = input.LA(1);

                         
                        int index42_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index42_63);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA42_64 = input.LA(1);

                         
                        int index42_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index42_64);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA42_65 = input.LA(1);

                         
                        int index42_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index42_65);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA42_99 = input.LA(1);

                         
                        int index42_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 100;}

                         
                        input.seek(index42_99);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\u0084\uffff";
    static final String DFA43_eofS =
        "\u0084\uffff";
    static final String DFA43_minS =
        "\1\13\1\uffff\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1"+
        "\0\12\uffff\6\0\41\uffff\1\0\37\uffff";
    static final String DFA43_maxS =
        "\1\u00bf\1\uffff\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff"+
        "\1\0\12\uffff\6\0\41\uffff\1\0\37\uffff";
    static final String DFA43_acceptS =
        "\1\uffff\1\24\1\uffff\1\2\47\uffff\1\4\5\uffff\1\11\1\uffff\1\14"+
        "\61\uffff\1\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23"+
        "\1\6\1\20\1\12\1\21\1\15";
    static final String DFA43_specialS =
        "\2\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\uffff\1\11\12\uffff\1\12\1\13\1\14\1\15\1\16\1\17\41\uffff"+
        "\1\20\37\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\60\1\101\1\102\2\63\2\uffff\11\145\1\144\6\145\3\63\1\uffff"+
            "\1\52\17\63\1\55\4\3\2\63\10\3\1\63\1\3\1\63\4\3\1\uffff\1\3"+
            "\1\63\1\3\1\63\4\3\1\63\1\3\1\63\3\3\1\63\1\3\1\44\1\63\3\3"+
            "\1\166\1\57\2\uffff\1\61\1\54\3\uffff\1\56\1\1\16\uffff\1\51"+
            "\10\uffff\1\63\1\2\1\63\4\uffff\1\145\1\75\1\76\1\77\1\100\1"+
            "\53\1\uffff\1\63\1\uffff\1\63\2\uffff\1\63\13\uffff\1\63\14"+
            "\uffff\1\62\1\145\1\uffff\6\3\7\63",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "()+ loopback of 76:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_2 = input.LA(1);

                         
                        int index43_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA43_36 = input.LA(1);

                         
                        int index43_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA43_41 = input.LA(1);

                         
                        int index43_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 124;}

                         
                        input.seek(index43_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA43_42 = input.LA(1);

                         
                        int index43_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA43_44 = input.LA(1);

                         
                        int index43_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 126;}

                         
                        input.seek(index43_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA43_45 = input.LA(1);

                         
                        int index43_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA43_46 = input.LA(1);

                         
                        int index43_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA43_47 = input.LA(1);

                         
                        int index43_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index43_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA43_48 = input.LA(1);

                         
                        int index43_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA43_50 = input.LA(1);

                         
                        int index43_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index43_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA43_61 = input.LA(1);

                         
                        int index43_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index43_61);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA43_62 = input.LA(1);

                         
                        int index43_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index43_62);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA43_63 = input.LA(1);

                         
                        int index43_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index43_63);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA43_64 = input.LA(1);

                         
                        int index43_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index43_64);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA43_65 = input.LA(1);

                         
                        int index43_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index43_65);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA43_66 = input.LA(1);

                         
                        int index43_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index43_66);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA43_100 = input.LA(1);

                         
                        int index43_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 101;}

                         
                        input.seek(index43_100);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\46\uffff";
    static final String DFA47_eofS =
        "\46\uffff";
    static final String DFA47_minS =
        "\1\14\40\0\5\uffff";
    static final String DFA47_maxS =
        "\1\u00b1\40\0\5\uffff";
    static final String DFA47_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\5\1\4";
    static final String DFA47_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\5\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\14\1\15\4\uffff\1\20\1\21\1\17\1\25\1\26\1\34\1\35\1\22\1"+
            "\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff\1\41\7\uffff\1"+
            "\42\116\uffff\1\40\4\uffff\1\37\12\uffff\1\16\1\10\1\11\1\12"+
            "\1\13\31\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "83:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_1 = input.LA(1);

                         
                        int index47_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_2 = input.LA(1);

                         
                        int index47_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_3 = input.LA(1);

                         
                        int index47_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_4 = input.LA(1);

                         
                        int index47_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_5 = input.LA(1);

                         
                        int index47_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_6 = input.LA(1);

                         
                        int index47_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_7 = input.LA(1);

                         
                        int index47_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_8 = input.LA(1);

                         
                        int index47_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_9 = input.LA(1);

                         
                        int index47_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_10 = input.LA(1);

                         
                        int index47_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_11 = input.LA(1);

                         
                        int index47_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_12 = input.LA(1);

                         
                        int index47_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA47_13 = input.LA(1);

                         
                        int index47_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA47_14 = input.LA(1);

                         
                        int index47_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA47_15 = input.LA(1);

                         
                        int index47_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA47_16 = input.LA(1);

                         
                        int index47_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA47_17 = input.LA(1);

                         
                        int index47_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA47_18 = input.LA(1);

                         
                        int index47_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA47_20 = input.LA(1);

                         
                        int index47_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA47_21 = input.LA(1);

                         
                        int index47_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA47_22 = input.LA(1);

                         
                        int index47_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA47_23 = input.LA(1);

                         
                        int index47_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA47_24 = input.LA(1);

                         
                        int index47_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA47_25 = input.LA(1);

                         
                        int index47_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA47_26 = input.LA(1);

                         
                        int index47_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA47_27 = input.LA(1);

                         
                        int index47_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA47_28 = input.LA(1);

                         
                        int index47_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA47_29 = input.LA(1);

                         
                        int index47_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA47_30 = input.LA(1);

                         
                        int index47_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index47_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA47_31 = input.LA(1);

                         
                        int index47_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index47_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA47_32 = input.LA(1);

                         
                        int index47_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index47_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA51_eotS =
        "\33\uffff";
    static final String DFA51_eofS =
        "\33\uffff";
    static final String DFA51_minS =
        "\1\14\1\uffff\14\12\14\0\1\uffff";
    static final String DFA51_maxS =
        "\1\u00b1\1\uffff\14\12\14\0\1\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\2\30\uffff\1\1";
    static final String DFA51_specialS =
        "\16\uffff\1\6\1\1\1\11\1\7\1\13\1\5\1\0\1\3\1\10\1\2\1\4\1\12\1"+
        "\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\14\1\15\4\uffff\20\1\2\uffff\1\1\126\uffff\1\1\4\uffff\1"+
            "\1\12\uffff\1\1\1\10\1\11\1\12\1\13\31\uffff\1\2\1\3\1\7\1\4"+
            "\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "()* loopback of 93:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_20 = input.LA(1);

                         
                        int index51_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_15 = input.LA(1);

                         
                        int index51_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_23 = input.LA(1);

                         
                        int index51_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_23);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_21 = input.LA(1);

                         
                        int index51_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_24 = input.LA(1);

                         
                        int index51_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA51_19 = input.LA(1);

                         
                        int index51_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA51_14 = input.LA(1);

                         
                        int index51_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA51_17 = input.LA(1);

                         
                        int index51_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA51_22 = input.LA(1);

                         
                        int index51_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA51_16 = input.LA(1);

                         
                        int index51_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA51_25 = input.LA(1);

                         
                        int index51_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_25);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA51_18 = input.LA(1);

                         
                        int index51_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\34\uffff";
    static final String DFA61_eofS =
        "\34\uffff";
    static final String DFA61_minS =
        "\1\14\14\12\1\uffff\14\0\2\uffff";
    static final String DFA61_maxS =
        "\1\u00b1\14\12\1\uffff\14\0\2\uffff";
    static final String DFA61_acceptS =
        "\15\uffff\1\3\14\uffff\1\1\1\2";
    static final String DFA61_specialS =
        "\16\uffff\1\10\1\7\1\0\1\5\1\6\1\11\1\4\1\13\1\2\1\3\1\12\1\1\2"+
        "\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\13\1\14\4\uffff\20\15\12\uffff\1\15\116\uffff\1\15\4\uffff"+
            "\1\15\12\uffff\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "103:18: ( adv | adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_16 = input.LA(1);

                         
                        int index61_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_25 = input.LA(1);

                         
                        int index61_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_25);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_22 = input.LA(1);

                         
                        int index61_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_23 = input.LA(1);

                         
                        int index61_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_20 = input.LA(1);

                         
                        int index61_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA61_17 = input.LA(1);

                         
                        int index61_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA61_18 = input.LA(1);

                         
                        int index61_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA61_15 = input.LA(1);

                         
                        int index61_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA61_14 = input.LA(1);

                         
                        int index61_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA61_19 = input.LA(1);

                         
                        int index61_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA61_24 = input.LA(1);

                         
                        int index61_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_24);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA61_21 = input.LA(1);

                         
                        int index61_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index61_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA76_eotS =
        "\21\uffff";
    static final String DFA76_eofS =
        "\3\uffff\1\10\7\uffff\1\10\5\uffff";
    static final String DFA76_minS =
        "\1\66\1\12\1\uffff\1\13\2\12\1\uffff\1\12\1\uffff\1\0\1\66\1\13"+
        "\2\uffff\1\12\1\0\1\uffff";
    static final String DFA76_maxS =
        "\1\153\1\12\1\uffff\1\u00bf\2\12\1\uffff\1\12\1\uffff\1\0\1\66\1"+
        "\u00bf\2\uffff\1\12\1\0\1\uffff";
    static final String DFA76_acceptS =
        "\2\uffff\1\5\3\uffff\1\4\1\uffff\1\6\3\uffff\1\2\1\3\2\uffff\1\1";
    static final String DFA76_specialS =
        "\11\uffff\1\1\1\0\4\uffff\1\2\1\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\64\uffff\1\2",
            "\1\3",
            "",
            "\5\10\2\uffff\23\10\1\uffff\20\10\1\4\25\10\1\uffff\27\10\1"+
            "\6\1\10\1\5\1\10\1\uffff\4\10\15\uffff\2\10\4\uffff\1\10\3\uffff"+
            "\3\10\4\uffff\1\10\1\7\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff"+
            "\1\10\13\uffff\1\10\5\uffff\5\10\1\uffff\3\10\1\uffff\15\10",
            "\1\11",
            "\1\12",
            "",
            "\1\13",
            "",
            "\1\uffff",
            "\1\15",
            "\5\10\2\uffff\23\10\1\uffff\20\10\1\16\25\10\1\uffff\27\10"+
            "\1\uffff\3\10\1\uffff\4\10\15\uffff\2\10\4\uffff\1\10\3\uffff"+
            "\3\10\4\uffff\6\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\13"+
            "\uffff\1\10\5\uffff\5\10\1\uffff\3\10\1\uffff\15\10",
            "",
            "",
            "\1\17",
            "\1\uffff",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "124:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA76_10==54) ) {s = 13;}

                        else if ( (synpred271_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA76_15 = input.LA(1);

                         
                        int index76_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index76_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\u0085\uffff";
    static final String DFA84_eofS =
        "\1\1\u0084\uffff";
    static final String DFA84_minS =
        "\1\13\2\uffff\1\0\15\uffff\3\0\161\uffff";
    static final String DFA84_maxS =
        "\1\u00bf\2\uffff\1\0\15\uffff\3\0\161\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\3\u0081\uffff\1\2\1\1";
    static final String DFA84_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\2\1\3\161\uffff}>";
    static final String[] DFA84_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\23\45\1\1\uffff\26\1\1\3\1\uffff"+
            "\3\1\1\uffff\2\1\1\21\1\1\15\uffff\1\1\1\22\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 137:39: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_3 = input.LA(1);

                         
                        int index84_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_17 = input.LA(1);

                         
                        int index84_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_18 = input.LA(1);

                         
                        int index84_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_19 = input.LA(1);

                         
                        int index84_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index84_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\u0084\uffff";
    static final String DFA87_eofS =
        "\1\1\u0083\uffff";
    static final String DFA87_minS =
        "\1\13\20\uffff\3\0\160\uffff";
    static final String DFA87_maxS =
        "\1\u00bf\20\uffff\3\0\160\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\2\u0081\uffff\1\1";
    static final String DFA87_specialS =
        "\21\uffff\1\0\1\1\1\2\160\uffff}>";
    static final String[] DFA87_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\23\45\1\1\uffff\27\1\1\uffff\3\1"+
            "\1\uffff\2\1\1\21\1\1\15\uffff\1\1\1\22\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 147:11: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_17 = input.LA(1);

                         
                        int index87_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_18 = input.LA(1);

                         
                        int index87_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA87_19 = input.LA(1);

                         
                        int index87_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA89_eotS =
        "\75\uffff";
    static final String DFA89_eofS =
        "\1\2\74\uffff";
    static final String DFA89_minS =
        "\1\13\1\0\1\uffff\71\0\1\uffff";
    static final String DFA89_maxS =
        "\1\u00bf\1\0\1\uffff\71\0\1\uffff";
    static final String DFA89_acceptS =
        "\2\uffff\1\2\71\uffff\1\1";
    static final String DFA89_specialS =
        "\1\uffff\1\10\1\uffff\1\52\1\23\1\35\1\45\1\62\1\46\1\64\1\15\1"+
        "\4\1\1\1\55\1\47\1\22\1\40\1\34\1\17\1\14\1\13\1\44\1\42\1\25\1"+
        "\24\1\71\1\36\1\56\1\21\1\2\1\63\1\3\1\31\1\6\1\37\1\0\1\32\1\27"+
        "\1\65\1\70\1\67\1\66\1\5\1\12\1\11\1\20\1\7\1\50\1\60\1\54\1\61"+
        "\1\43\1\57\1\33\1\53\1\30\1\26\1\51\1\41\1\16\1\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\16\1\7\1\10\1\26\1\60\2\uffff\20\2\1\25\1\17\1\27\1\uffff"+
            "\1\13\1\41\1\33\1\34\1\50\1\31\1\35\1\36\1\37\1\40\1\30\1\42"+
            "\1\43\1\44\1\45\1\46\1\14\4\2\1\23\1\57\10\2\1\32\1\2\1\47\4"+
            "\2\1\uffff\1\2\1\61\1\2\1\62\4\2\1\63\1\2\1\51\3\2\1\64\1\2"+
            "\1\24\1\56\4\2\1\1\1\uffff\3\2\1\uffff\2\2\1\11\1\2\15\uffff"+
            "\1\2\1\12\4\uffff\1\2\3\uffff\1\72\1\65\1\66\4\uffff\1\2\1\3"+
            "\1\4\1\5\1\6\1\2\1\uffff\1\20\1\uffff\1\21\2\uffff\1\22\13\uffff"+
            "\1\15\5\uffff\5\2\1\uffff\1\2\1\67\1\2\1\uffff\6\2\1\52\1\53"+
            "\1\54\1\55\1\70\1\71\1\73",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "()+ loopback of 152:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_35 = input.LA(1);

                         
                        int index89_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_35);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA89_12 = input.LA(1);

                         
                        int index89_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA89_29 = input.LA(1);

                         
                        int index89_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_29);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA89_31 = input.LA(1);

                         
                        int index89_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_31);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA89_11 = input.LA(1);

                         
                        int index89_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA89_42 = input.LA(1);

                         
                        int index89_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA89_33 = input.LA(1);

                         
                        int index89_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_33);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA89_46 = input.LA(1);

                         
                        int index89_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA89_44 = input.LA(1);

                         
                        int index89_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_44);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA89_43 = input.LA(1);

                         
                        int index89_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA89_20 = input.LA(1);

                         
                        int index89_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA89_19 = input.LA(1);

                         
                        int index89_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA89_10 = input.LA(1);

                         
                        int index89_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_10);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA89_59 = input.LA(1);

                         
                        int index89_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_59);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA89_18 = input.LA(1);

                         
                        int index89_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA89_45 = input.LA(1);

                         
                        int index89_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_45);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA89_28 = input.LA(1);

                         
                        int index89_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_28);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA89_15 = input.LA(1);

                         
                        int index89_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_15);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA89_4 = input.LA(1);

                         
                        int index89_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_4);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA89_24 = input.LA(1);

                         
                        int index89_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA89_23 = input.LA(1);

                         
                        int index89_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA89_56 = input.LA(1);

                         
                        int index89_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_56);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA89_37 = input.LA(1);

                         
                        int index89_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA89_55 = input.LA(1);

                         
                        int index89_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_55);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA89_32 = input.LA(1);

                         
                        int index89_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_32);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA89_36 = input.LA(1);

                         
                        int index89_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_36);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA89_53 = input.LA(1);

                         
                        int index89_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_53);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA89_17 = input.LA(1);

                         
                        int index89_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_17);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA89_5 = input.LA(1);

                         
                        int index89_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_5);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA89_26 = input.LA(1);

                         
                        int index89_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_26);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA89_34 = input.LA(1);

                         
                        int index89_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA89_16 = input.LA(1);

                         
                        int index89_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_16);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA89_58 = input.LA(1);

                         
                        int index89_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_58);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA89_22 = input.LA(1);

                         
                        int index89_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_22);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA89_51 = input.LA(1);

                         
                        int index89_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_51);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA89_21 = input.LA(1);

                         
                        int index89_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_21);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA89_6 = input.LA(1);

                         
                        int index89_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_6);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA89_8 = input.LA(1);

                         
                        int index89_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_8);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA89_14 = input.LA(1);

                         
                        int index89_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_14);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA89_47 = input.LA(1);

                         
                        int index89_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_47);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA89_57 = input.LA(1);

                         
                        int index89_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_57);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA89_3 = input.LA(1);

                         
                        int index89_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_3);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA89_54 = input.LA(1);

                         
                        int index89_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_54);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA89_49 = input.LA(1);

                         
                        int index89_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_49);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA89_13 = input.LA(1);

                         
                        int index89_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_13);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA89_27 = input.LA(1);

                         
                        int index89_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_27);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA89_52 = input.LA(1);

                         
                        int index89_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_52);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA89_48 = input.LA(1);

                         
                        int index89_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA89_50 = input.LA(1);

                         
                        int index89_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA89_7 = input.LA(1);

                         
                        int index89_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_7);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA89_30 = input.LA(1);

                         
                        int index89_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_30);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA89_9 = input.LA(1);

                         
                        int index89_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_9);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA89_38 = input.LA(1);

                         
                        int index89_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_38);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA89_41 = input.LA(1);

                         
                        int index89_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_41);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA89_40 = input.LA(1);

                         
                        int index89_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_40);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA89_39 = input.LA(1);

                         
                        int index89_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_39);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA89_25 = input.LA(1);

                         
                        int index89_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA95_eotS =
        "\43\uffff";
    static final String DFA95_eofS =
        "\1\2\2\uffff\1\2\2\uffff\1\2\11\uffff\1\2\6\uffff\1\2\6\uffff\1"+
        "\2\4\uffff";
    static final String DFA95_minS =
        "\1\13\1\12\1\uffff\1\13\2\12\1\13\1\0\6\12\1\uffff\1\0\1\13\4\0"+
        "\2\12\1\13\1\0\5\12\1\13\4\0";
    static final String DFA95_maxS =
        "\1\u00bf\1\12\1\uffff\1\u00bf\2\12\1\u00bf\1\0\6\12\1\uffff\1\0"+
        "\1\u00bf\4\0\2\12\1\u00bf\1\0\5\12\1\u00bf\4\0";
    static final String DFA95_acceptS =
        "\2\uffff\1\2\13\uffff\1\1\24\uffff";
    static final String DFA95_specialS =
        "\7\uffff\1\3\7\uffff\1\1\1\uffff\1\11\1\0\1\10\1\2\3\uffff\1\6\6"+
        "\uffff\1\7\1\12\1\4\1\5}>";
    static final String[] DFA95_transitionS = {
            "\5\2\2\uffff\23\2\1\uffff\46\2\1\uffff\26\2\1\1\1\uffff\3\2"+
            "\1\uffff\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4\uffff\6"+
            "\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\3",
            "",
            "\5\2\2\uffff\23\2\1\uffff\1\5\45\2\1\uffff\27\2\1\uffff\3\2"+
            "\1\uffff\4\2\15\uffff\1\2\1\4\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\6",
            "\1\7",
            "\5\2\2\uffff\23\2\1\12\1\14\1\13\2\2\1\10\41\2\1\uffff\27\2"+
            "\1\uffff\3\2\1\15\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4"+
            "\uffff\6\2\1\uffff\1\11\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2"+
            "\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "",
            "\1\uffff",
            "\5\2\2\uffff\23\2\1\uffff\1\26\45\2\1\uffff\27\2\1\uffff\3"+
            "\2\1\15\4\2\15\uffff\1\2\1\25\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\27",
            "\1\30",
            "\5\2\2\uffff\23\2\1\33\1\26\1\34\2\2\1\35\41\2\1\uffff\27\2"+
            "\1\uffff\3\2\1\32\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4"+
            "\uffff\6\2\1\uffff\1\31\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2"+
            "\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\5\2\2\uffff\23\2\1\uffff\46\2\1\uffff\27\2\1\uffff\3\2\1\32"+
            "\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4\uffff\6\2\1\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\2\1\uffff"+
            "\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "()* loopback of 165:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_18 = input.LA(1);

                         
                        int index95_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA95_15 = input.LA(1);

                         
                        int index95_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA95_20 = input.LA(1);

                         
                        int index95_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA95_7 = input.LA(1);

                         
                        int index95_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA95_33 = input.LA(1);

                         
                        int index95_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_33);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA95_34 = input.LA(1);

                         
                        int index95_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_34);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA95_24 = input.LA(1);

                         
                        int index95_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_24);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA95_31 = input.LA(1);

                         
                        int index95_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_31);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA95_19 = input.LA(1);

                         
                        int index95_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA95_17 = input.LA(1);

                         
                        int index95_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA95_32 = input.LA(1);

                         
                        int index95_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA98_eotS =
        "\12\uffff";
    static final String DFA98_eofS =
        "\1\1\11\uffff";
    static final String DFA98_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA98_maxS =
        "\1\u00bf\1\uffff\4\0\4\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA98_specialS =
        "\2\uffff\1\2\1\3\1\1\1\0\4\uffff}>";
    static final String[] DFA98_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\46\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\4\1\5\1\2\1\3\16\uffff\1\1\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()+ loopback of 170:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_5 = input.LA(1);

                         
                        int index98_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA98_4 = input.LA(1);

                         
                        int index98_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA98_2 = input.LA(1);

                         
                        int index98_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA98_3 = input.LA(1);

                         
                        int index98_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\102\uffff";
    static final String DFA99_eofS =
        "\102\uffff";
    static final String DFA99_minS =
        "\1\13\20\uffff\1\0\60\uffff";
    static final String DFA99_maxS =
        "\1\u00bf\20\uffff\1\0\60\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\2\77\uffff\1\1";
    static final String DFA99_specialS =
        "\21\uffff\1\0\60\uffff}>";
    static final String[] DFA99_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\21\7\uffff\1\1\16\uffff\1\101\1\1"+
            "\10\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1"+
            "\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:79: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_17 = input.LA(1);

                         
                        int index99_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA100_eotS =
        "\17\uffff";
    static final String DFA100_eofS =
        "\17\uffff";
    static final String DFA100_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA100_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA100_specialS =
        "\10\uffff\1\4\1\5\1\0\1\2\1\3\1\1\1\uffff}>";
    static final String[] DFA100_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\10\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff"+
            "\7\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:92: ( adj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_10 = input.LA(1);

                         
                        int index100_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA100_13 = input.LA(1);

                         
                        int index100_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA100_11 = input.LA(1);

                         
                        int index100_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA100_12 = input.LA(1);

                         
                        int index100_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA100_8 = input.LA(1);

                         
                        int index100_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA100_9 = input.LA(1);

                         
                        int index100_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document208 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001E2FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sentence_in_sentences230 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences232 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_sentences240 = new BitSet(new long[]{0x0000000000000002L,0x0000008800000000L});
    public static final BitSet FOLLOW_stop_in_sentences242 = new BitSet(new long[]{0x0000000000000002L,0x0000008800000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence253 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verbphrase_in_sentence255 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_sentence257 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_advAdj_in_sentence262 = new BitSet(new long[]{0x0000000000003002L,0x0400000C00000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_colon_in_sentence264 = new BitSet(new long[]{0x0000000000003002L,0x0400000C00000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_conjunction_in_sentence269 = new BitSet(new long[]{0x0000000000000002L,0x0400000800000000L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure365 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure369 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure371 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure377 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure379 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure381 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure383 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure391 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0C00080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adj_in_nounphraseStructure394 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adv_in_nounphraseStructure397 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure401 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure403 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure405 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure413 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure416 = new BitSet(new long[]{0x0040004008200002L,0x0800080800000000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure418 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_molecule_in_dissolvePhrase432 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolvePhrase434 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_dissolvePhrase436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_conjunction463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure494 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure497 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure500 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure504 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure507 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure510 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure513 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure516 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure519 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure522 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure525 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure531 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure535 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure538 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure541 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_vb_in_verb552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_in_noun669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_noun685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_noun687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_noun689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_noun691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_noun705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_noun735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_noun737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_noun753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_noun757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_noun759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_noun761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_noun763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_noun765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_noun767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_noun769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_noun771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_range777 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_range779 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_range781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_ratio789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio815 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_numberratio818 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio820 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_noun_in_nounratio833 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_nounratio837 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_nounratio839 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2875 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure2877 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure2879 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure2881 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure1890 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure1892 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure1894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent903 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_verb_in_mixtureContent905 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent907 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_md_in_mixtureContent909 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent911 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent913 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent915 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent917 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_dash_in_mixtureContent919 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_sym_in_mixtureContent921 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent923 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_noun_in_mixtureContent925 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inof_in_mixtureContent927 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent929 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent931 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_comma_in_mixtureContent933 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_adj_in_mixtureContent935 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_colon_in_mixtureContent937 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent939 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_fw_in_mixtureContent943 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_verb_in_mixtureContent945 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent947 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_md_in_mixtureContent949 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent951 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent953 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent955 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent957 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_dash_in_mixtureContent959 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_sym_in_mixtureContent961 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent963 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_noun_in_mixtureContent965 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inof_in_mixtureContent967 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent969 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_cd_in_mixtureContent971 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_comma_in_mixtureContent973 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_adj_in_mixtureContent975 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_colon_in_mixtureContent977 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_stop_in_mixtureContent979 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F870L});
    public static final BitSet FOLLOW_jj_in_adj989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_adv1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1029 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1066 = new BitSet(new long[]{0x00000003FFFC3000L,0x0000000000000000L,0x0002BE000000F800L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1069 = new BitSet(new long[]{0x187FFFDFFFFCF800L,0x0800080868A140A0L,0xFE03BE080094F871L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1100 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTime1125 = new BitSet(new long[]{0x00000013FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTime1128 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseTime1132 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTime1135 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTime1138 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nntime_in_prepphraseTime1141 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1178 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphere1204 = new BitSet(new long[]{0x0040004000003000L,0x0800080800000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphere1207 = new BitSet(new long[]{0x0040004000003000L,0x0800080800000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphere1210 = new BitSet(new long[]{0x0040004000003000L,0x0800080800000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphere1213 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphere1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp1293 = new BitSet(new long[]{0x00001003FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp1295 = new BitSet(new long[]{0x00001003FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTemp1299 = new BitSet(new long[]{0x0000100000003000L,0x0800000000000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseTemp1302 = new BitSet(new long[]{0x0000100000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adv_in_prepphraseTemp1306 = new BitSet(new long[]{0x0000100000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_adj_in_prepphraseTemp1308 = new BitSet(new long[]{0x0000100000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTemp1312 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTemp1315 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_cd_in_amount1363 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1386 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1409 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_percent1411 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1438 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar1461 = new BitSet(new long[]{0x0000004000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1487 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase1489 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1492 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus1507 = new BitSet(new long[]{0x0801084800003000L,0x0800080000000020L,0x000000000004F000L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1510 = new BitSet(new long[]{0x0801084800003002L,0x0800080000000020L,0x000000000004F000L});
    public static final BitSet FOLLOW_quantity_in_preapparatus1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_preapparatus1539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_preapparatus1543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus1549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_measurements1558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_measurements1560 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements1564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dt_in_measurements1569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound5_in_oscarCompound1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound51620 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound51622 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound51624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound41647 = new BitSet(new long[]{0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound41650 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound41652 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31679 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31682 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31684 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21716 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21718 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11741 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount11767 = new BitSet(new long[]{0x0000004008000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount11769 = new BitSet(new long[]{0x0000004008000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11773 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21785 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21787 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21791 = new BitSet(new long[]{0x0040004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21796 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21798 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11856 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11858 = new BitSet(new long[]{0x0000000000000800L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21871 = new BitSet(new long[]{0x0000004000000002L,0x0800080000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount21873 = new BitSet(new long[]{0x0000004000000002L,0x0800080000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount31886 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31888 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31891 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31894 = new BitSet(new long[]{0x187FFFDC0000F802L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity11976 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity11978 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity11981 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity11984 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity11989 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity11991 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_stop_in_quantity11996 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity11998 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_rrb_in_quantity12003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22014 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_quantity22017 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity22020 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2036 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nn_in_method2038 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2042 = new BitSet(new long[]{0x0000000000000802L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2069 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2071 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2073 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2075 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2083 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2090 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2097 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2104 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2112 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2119 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2126 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas2135 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore2142 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter2149 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin2156 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto2163 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith2170 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout2177 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby2184 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia2191 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof2198 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon2205 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor2212 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor2214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom2219 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom2221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder2226 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover2233 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff2240 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnexample2249 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnstate2256 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nntime2263 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime2265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmass2270 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmolar2278 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnamount2286 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnatmosphere2293 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere2295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nneq2300 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq2302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnvol2307 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnchementity2314 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nntemp2321 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp2323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnflash2328 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nngeneral2335 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral2337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnmethod2342 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod2344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnpressure2350 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncolumn2357 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnchromatography2364 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography2366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnvacuum2371 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nncycle2378 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle2380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nntimes2385 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes2387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_oscarcm2394 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbuse2403 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbchange2410 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubmerge2417 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubject2424 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnadd2433 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd2435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnmixture2440 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbadd2447 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcharge2454 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbcontain2461 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbdrop2468 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop2470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbfill2475 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbsuspend2482 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbtreat2489 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat2491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbapparatus2498 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnapparatus2505 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus2507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbconcentrate2514 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnconcentrate2521 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate2523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbcool2530 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool2532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdegass2539 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass2541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdissolve2548 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdry2557 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry2559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nndry2564 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbextract2573 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract2575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnextract2580 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract2582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbfilter2589 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnfilter2596 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbheat2605 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbincrease2612 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease2614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbpartition2621 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition2623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbprecipitate2630 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_nnprecipitate2637 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate2639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbpurify2646 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_nnpurify2653 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbquench2662 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbrecover2671 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbremove2680 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_nnremove2687 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbstir2696 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbsynthesize2705 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_nnsynthesize2712 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbwait2721 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbwash2730 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_vbyield2739 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_colon2748 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_comma2755 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_apost2762 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost2764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_neg2769 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg2771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_dash2776 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_stop2783 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop2785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_nnpercent2790 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_lsqb2797 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_rsqb2804 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_lrb2812 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_rrb2819 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abl2830 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl2832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_abn2839 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_abx2848 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_ap2857 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap2859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_at2866 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_be2875 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be2877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_bed2884 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_bedz2893 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_beg2902 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bem2911 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ben2920 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben2922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_ber2929 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_bez2938 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez2940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cc2947 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc2949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_cd2956 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cs2965 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_dotok2975 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok2977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dod2984 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_doz2993 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dt3002 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt3004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dti3011 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dts3020 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_dtx3029 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_ex3038 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_fw3047 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_fwin3056 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hv3065 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_hvd3074 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_hvg3083 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_hvn3092 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_in3101 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jj3110 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_jjr3119 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_jjs3128 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_jjt3137 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_md3146 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nc3155 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nn3164 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nn_poss3173 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nns3182 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns3184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nns_poss3191 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss3193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_np3200 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nnp3210 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp3212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_np_poss3220 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss3222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nps3229 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nps_poss3238 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_nr3247 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_od3256 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od3258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pn3265 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn3267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_pn_poss3274 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_pp_poss3283 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pp_poss_poss3292 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss3294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ppl3301 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl3303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppls3310 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls3312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_prp3320 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppo3330 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo3332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_pps3339 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ppss3348 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss3350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ql3357 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_qlp3366 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rb3375 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb3377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_rbr3384 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr3386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_rbconj3395 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rbt3406 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt3408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rbs3415 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs3417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_rn3425 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn3427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rp3434 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp3436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_sym3445 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym3447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_to3454 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_uh3463 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_vb3472 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb3474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_vbp3482 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_vbd3493 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd3495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vbg3502 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg3504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_vbn3511 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn3513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_vbz3520 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_wdt3529 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt3531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_wp_poss3538 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss3540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_wpo3548 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo3550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wps3557 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_wql3567 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_wrb3576 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb3578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_pdt3587 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt3589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred12_ChemicalChunker302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred13_ChemicalChunker304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred14_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred17_ChemicalChunker312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred18_ChemicalChunker314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred19_ChemicalChunker316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred20_ChemicalChunker318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred21_ChemicalChunker320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred22_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred26_ChemicalChunker330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred27_ChemicalChunker332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred29_ChemicalChunker369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred31_ChemicalChunker377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred32_ChemicalChunker379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred33_ChemicalChunker381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred34_ChemicalChunker383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred35_ChemicalChunker391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred36_ChemicalChunker394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred38_ChemicalChunker391 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0C00080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adj_in_synpred38_ChemicalChunker394 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_adv_in_synpred38_ChemicalChunker397 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F070L});
    public static final BitSet FOLLOW_noun_in_synpred38_ChemicalChunker401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred39_ChemicalChunker403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred40_ChemicalChunker405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred41_ChemicalChunker413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred42_ChemicalChunker418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred43_ChemicalChunker416 = new BitSet(new long[]{0x0040004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred43_ChemicalChunker418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred45_ChemicalChunker494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred46_ChemicalChunker497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred51_ChemicalChunker513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred52_ChemicalChunker516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred53_ChemicalChunker519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred54_ChemicalChunker522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred55_ChemicalChunker525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred56_ChemicalChunker504 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_synpred56_ChemicalChunker507 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_synpred56_ChemicalChunker510 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_synpred56_ChemicalChunker513 = new BitSet(new long[]{0xE7800003FFFC3002L,0x00000023B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_synpred56_ChemicalChunker516 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000001F000L});
    public static final BitSet FOLLOW_adv_in_synpred56_ChemicalChunker519 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adj_in_synpred56_ChemicalChunker522 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_neg_in_synpred56_ChemicalChunker525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred57_ChemicalChunker531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred60_ChemicalChunker535 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_synpred60_ChemicalChunker538 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_synpred60_ChemicalChunker541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred101_ChemicalChunker649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred102_ChemicalChunker651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred109_ChemicalChunker673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred110_ChemicalChunker675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred111_ChemicalChunker677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred114_ChemicalChunker683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred118_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred119_ChemicalChunker693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred120_ChemicalChunker695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred122_ChemicalChunker699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred125_ChemicalChunker705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred126_ChemicalChunker707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred127_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred133_ChemicalChunker721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred142_ChemicalChunker739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred143_ChemicalChunker741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred144_ChemicalChunker743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred145_ChemicalChunker745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred149_ChemicalChunker753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred150_ChemicalChunker755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred158_ChemicalChunker789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred159_ChemicalChunker818 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_synpred159_ChemicalChunker820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred160_ChemicalChunker837 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_synpred160_ChemicalChunker839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred162_ChemicalChunker903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred163_ChemicalChunker905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred164_ChemicalChunker907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred166_ChemicalChunker911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred167_ChemicalChunker913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred168_ChemicalChunker915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred169_ChemicalChunker917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred171_ChemicalChunker921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred172_ChemicalChunker923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred173_ChemicalChunker925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred174_ChemicalChunker927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred175_ChemicalChunker929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred176_ChemicalChunker931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred177_ChemicalChunker933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred178_ChemicalChunker935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred180_ChemicalChunker943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred181_ChemicalChunker945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred182_ChemicalChunker947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred184_ChemicalChunker951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred185_ChemicalChunker953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred186_ChemicalChunker955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred187_ChemicalChunker957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred189_ChemicalChunker961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred190_ChemicalChunker963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred191_ChemicalChunker965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred192_ChemicalChunker967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred193_ChemicalChunker969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred194_ChemicalChunker971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred195_ChemicalChunker973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred196_ChemicalChunker975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred198_ChemicalChunker979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred210_ChemicalChunker1033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred211_ChemicalChunker1035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred212_ChemicalChunker1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred213_ChemicalChunker1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred217_ChemicalChunker1125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred222_ChemicalChunker1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred225_ChemicalChunker1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred243_ChemicalChunker1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred244_ChemicalChunker1295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred250_ChemicalChunker1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred263_ChemicalChunker1569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred268_ChemicalChunker1600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred269_ChemicalChunker1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_synpred271_ChemicalChunker1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred273_ChemicalChunker1650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1682 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred275_ChemicalChunker1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred276_ChemicalChunker1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred277_ChemicalChunker1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred278_ChemicalChunker1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred279_ChemicalChunker1769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred280_ChemicalChunker1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred281_ChemicalChunker1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred282_ChemicalChunker1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred283_ChemicalChunker1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred284_ChemicalChunker1798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred287_ChemicalChunker1873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred288_ChemicalChunker1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred289_ChemicalChunker1891 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F070L});
    public static final BitSet FOLLOW_noun_in_synpred289_ChemicalChunker1894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred290_ChemicalChunker1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred296_ChemicalChunker2017 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_synpred296_ChemicalChunker2020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred301_ChemicalChunker2069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred302_ChemicalChunker2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred303_ChemicalChunker2073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred304_ChemicalChunker2075 = new BitSet(new long[]{0x0000000000000002L});

}