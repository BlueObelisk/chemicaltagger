// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-05-17 19:23:10

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=30;
    public static final int T__161=161;
    public static final int TOKEN=33;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=31;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=25;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=32;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=29;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=26;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=28;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=24;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=27;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[732+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document183_static.FOLLOW_sentences_in_document183);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 51:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences204_static.FOLLOW_sentenceStructure_in_sentences204);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences206_static.FOLLOW_unmatchedPhrase_in_sentences206);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences210_static.FOLLOW_stop_in_sentences210);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure220_static.FOLLOW_nounphrase_in_sentenceStructure220);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure222_static.FOLLOW_verbphrase_in_sentenceStructure222);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure224_static.FOLLOW_prepphrase_in_sentenceStructure224);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure226_static.FOLLOW_prepphraseAfter_in_sentenceStructure226);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure231_static.FOLLOW_advAdj_in_sentenceStructure231);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure233_static.FOLLOW_colon_in_sentenceStructure233);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure238_static.FOLLOW_conjunction_in_sentenceStructure238);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure240_static.FOLLOW_rbconj_in_sentenceStructure240);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure242_static.FOLLOW_comma_in_sentenceStructure242);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:58:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:58:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase254_static.FOLLOW_unmatchedToken_in_unmatchedPhrase254);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 58:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:58:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:1: unmatchedToken : ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode18 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp19 = null;

        ChemicalChunkerParser.inAll_return inAll20 = null;

        ChemicalChunkerParser.nnexample_return nnexample21 = null;

        ChemicalChunkerParser.nnstate_return nnstate22 = null;

        ChemicalChunkerParser.nntime_return nntime23 = null;

        ChemicalChunkerParser.nnmass_return nnmass24 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar25 = null;

        ChemicalChunkerParser.nnamount_return nnamount26 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere27 = null;

        ChemicalChunkerParser.nneq_return nneq28 = null;

        ChemicalChunkerParser.nnvol_return nnvol29 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity30 = null;

        ChemicalChunkerParser.nntemp_return nntemp31 = null;

        ChemicalChunkerParser.nnflash_return nnflash32 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral33 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod34 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure35 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn36 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography37 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum38 = null;

        ChemicalChunkerParser.nncycle_return nncycle39 = null;

        ChemicalChunkerParser.nntimes_return nntimes40 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm41 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts42 = null;

        ChemicalChunkerParser.oscarase_return oscarase43 = null;

        ChemicalChunkerParser.verb_return verb44 = null;

        ChemicalChunkerParser.nnadd_return nnadd45 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture46 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus47 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate48 = null;

        ChemicalChunkerParser.nndry_return nndry49 = null;

        ChemicalChunkerParser.nnextract_return nnextract50 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter51 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate52 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify53 = null;

        ChemicalChunkerParser.nnremove_return nnremove54 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize55 = null;

        ChemicalChunkerParser.nnyield_return nnyield56 = null;

        ChemicalChunkerParser.colon_return colon57 = null;

        ChemicalChunkerParser.apost_return apost58 = null;

        ChemicalChunkerParser.neg_return neg59 = null;

        ChemicalChunkerParser.dash_return dash60 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent61 = null;

        ChemicalChunkerParser.lsqb_return lsqb62 = null;

        ChemicalChunkerParser.rsqb_return rsqb63 = null;

        ChemicalChunkerParser.lrb_return lrb64 = null;

        ChemicalChunkerParser.rrb_return rrb65 = null;

        ChemicalChunkerParser.cc_return cc66 = null;

        ChemicalChunkerParser.dt_return dt67 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE68 = null;

        ChemicalChunkerParser.fw_return fw69 = null;

        ChemicalChunkerParser.md_return md70 = null;

        ChemicalChunkerParser.nn_return nn71 = null;

        ChemicalChunkerParser.nns_return nns72 = null;

        ChemicalChunkerParser.nnp_return nnp73 = null;

        ChemicalChunkerParser.prp_return prp74 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss75 = null;

        ChemicalChunkerParser.rbconj_return rbconj76 = null;

        ChemicalChunkerParser.sym_return sym77 = null;

        ChemicalChunkerParser.uh_return uh78 = null;

        ChemicalChunkerParser.clause_return clause79 = null;

        ChemicalChunkerParser.comma_return comma80 = null;

        ChemicalChunkerParser.ls_return ls81 = null;

        ChemicalChunkerParser.nnps_return nnps82 = null;

        ChemicalChunkerParser.pos_return pos83 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:2: ( ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:4: ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:4: ( number | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos )
            int alt7=69;
            switch ( input.LA(1) ) {
            case 34:
            case 140:
                {
                alt7=1;
                }
                break;
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt7=2;
                }
                break;
            case 39:
                {
                alt7=3;
                }
                break;
            case 40:
                {
                alt7=4;
                }
                break;
            case 42:
                {
                alt7=5;
                }
                break;
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 144:
            case 163:
                {
                alt7=6;
                }
                break;
            case 78:
                {
                alt7=7;
                }
                break;
            case 59:
                {
                alt7=8;
                }
                break;
            case 60:
                {
                alt7=9;
                }
                break;
            case 61:
                {
                alt7=10;
                }
                break;
            case 63:
                {
                alt7=11;
                }
                break;
            case 62:
                {
                alt7=12;
                }
                break;
            case 64:
                {
                alt7=13;
                }
                break;
            case 65:
                {
                alt7=14;
                }
                break;
            case 66:
                {
                alt7=15;
                }
                break;
            case 67:
                {
                alt7=16;
                }
                break;
            case 68:
                {
                alt7=17;
                }
                break;
            case 69:
                {
                alt7=18;
                }
                break;
            case 70:
                {
                alt7=19;
                }
                break;
            case 71:
                {
                alt7=20;
                }
                break;
            case 72:
                {
                alt7=21;
                }
                break;
            case 73:
                {
                alt7=22;
                }
                break;
            case 74:
                {
                alt7=23;
                }
                break;
            case 75:
                {
                alt7=24;
                }
                break;
            case 76:
                {
                alt7=25;
                }
                break;
            case 77:
                {
                alt7=26;
                }
                break;
            case 79:
                {
                alt7=27;
                }
                break;
            case 38:
                {
                alt7=28;
                }
                break;
            case 37:
                {
                alt7=29;
                }
                break;
            case 80:
            case 81:
            case 82:
            case 83:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
            case 98:
            case 99:
            case 100:
            case 101:
            case 103:
            case 105:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 113:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 122:
            case 123:
            case 124:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt7=30;
                }
                break;
            case 84:
                {
                alt7=31;
                }
                break;
            case 85:
                {
                alt7=32;
                }
                break;
            case 95:
                {
                alt7=33;
                }
                break;
            case 97:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 104:
                {
                alt7=36;
                }
                break;
            case 106:
                {
                alt7=37;
                }
                break;
            case 112:
                {
                alt7=38;
                }
                break;
            case 114:
                {
                alt7=39;
                }
                break;
            case 118:
                {
                alt7=40;
                }
                break;
            case 121:
                {
                alt7=41;
                }
                break;
            case 125:
                {
                alt7=42;
                }
                break;
            case 127:
                {
                alt7=43;
                }
                break;
            case 129:
                {
                alt7=44;
                }
                break;
            case 130:
                {
                alt7=45;
                }
                break;
            case 131:
                {
                alt7=46;
                }
                break;
            case 133:
                {
                alt7=47;
                }
                break;
            case 134:
                {
                alt7=48;
                }
                break;
            case 135:
                {
                alt7=49;
                }
                break;
            case 137:
                {
                alt7=50;
                }
                break;
            case 138:
                {
                alt7=51;
                }
                break;
            case 139:
                {
                alt7=52;
                }
                break;
            case 141:
                {
                alt7=53;
                }
                break;
            case 136:
                {
                alt7=54;
                }
                break;
            case 143:
                {
                alt7=55;
                }
                break;
            case 149:
                {
                alt7=56;
                }
                break;
            case 150:
                {
                alt7=57;
                }
                break;
            case 151:
                {
                alt7=58;
                }
                break;
            case 152:
                {
                alt7=59;
                }
                break;
            case 156:
                {
                alt7=60;
                }
                break;
            case 157:
                {
                alt7=61;
                }
                break;
            case 126:
                {
                alt7=62;
                }
                break;
            case 162:
                {
                alt7=63;
                }
                break;
            case 164:
                {
                alt7=64;
                }
                break;
            case 142:
            case 154:
            case 171:
            case 172:
            case 173:
            case 174:
                {
                alt7=65;
                }
                break;
            case 128:
                {
                alt7=66;
                }
                break;
            case 148:
                {
                alt7=67;
                }
                break;
            case 153:
                {
                alt7=68;
                }
                break;
            case 155:
                {
                alt7=69;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:5: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedToken273_static.FOLLOW_number_in_unmatchedToken273);
                    number15=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:12: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken275_static.FOLLOW_advAdj_in_unmatchedToken275);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:19: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken277_static.FOLLOW_tmunicode_in_unmatchedToken277);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:29: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken279_static.FOLLOW_cdunicode_in_unmatchedToken279);
                    cdunicode18=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:39: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken281_static.FOLLOW_jjcomp_in_unmatchedToken281);
                    jjcomp19=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:46: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken283_static.FOLLOW_inAll_in_unmatchedToken283);
                    inAll20=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken287_static.FOLLOW_nnexample_in_unmatchedToken287);
                    nnexample21=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken289_static.FOLLOW_nnstate_in_unmatchedToken289);
                    nnstate22=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken291_static.FOLLOW_nntime_in_unmatchedToken291);
                    nntime23=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken293_static.FOLLOW_nnmass_in_unmatchedToken293);
                    nnmass24=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken295_static.FOLLOW_nnmolar_in_unmatchedToken295);
                    nnmolar25=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken297_static.FOLLOW_nnamount_in_unmatchedToken297);
                    nnamount26=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken299_static.FOLLOW_nnatmosphere_in_unmatchedToken299);
                    nnatmosphere27=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken301_static.FOLLOW_nneq_in_unmatchedToken301);
                    nneq28=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken303_static.FOLLOW_nnvol_in_unmatchedToken303);
                    nnvol29=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken305_static.FOLLOW_nnchementity_in_unmatchedToken305);
                    nnchementity30=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken307_static.FOLLOW_nntemp_in_unmatchedToken307);
                    nntemp31=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:95: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken309_static.FOLLOW_nnflash_in_unmatchedToken309);
                    nnflash32=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:103: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken311_static.FOLLOW_nngeneral_in_unmatchedToken311);
                    nngeneral33=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:113: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken313_static.FOLLOW_nnmethod_in_unmatchedToken313);
                    nnmethod34=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:122: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken315_static.FOLLOW_nnpressure_in_unmatchedToken315);
                    nnpressure35=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:133: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken317_static.FOLLOW_nncolumn_in_unmatchedToken317);
                    nncolumn36=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:142: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken319_static.FOLLOW_nnchromatography_in_unmatchedToken319);
                    nnchromatography37=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:159: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken321_static.FOLLOW_nnvacuum_in_unmatchedToken321);
                    nnvacuum38=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:168: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken323_static.FOLLOW_nncycle_in_unmatchedToken323);
                    nncycle39=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:176: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken325_static.FOLLOW_nntimes_in_unmatchedToken325);
                    nntimes40=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken329_static.FOLLOW_oscarcm_in_unmatchedToken329);
                    oscarcm41=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken331_static.FOLLOW_oscaronts_in_unmatchedToken331);
                    oscaronts42=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken333_static.FOLLOW_oscarase_in_unmatchedToken333);
                    oscarase43=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken335_static.FOLLOW_verb_in_unmatchedToken335);
                    verb44=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken337_static.FOLLOW_nnadd_in_unmatchedToken337);
                    nnadd45=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken339_static.FOLLOW_nnmixture_in_unmatchedToken339);
                    nnmixture46=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken341_static.FOLLOW_nnapparatus_in_unmatchedToken341);
                    nnapparatus47=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken343_static.FOLLOW_nnconcentrate_in_unmatchedToken343);
                    nnconcentrate48=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken345_static.FOLLOW_nndry_in_unmatchedToken345);
                    nndry49=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken347_static.FOLLOW_nnextract_in_unmatchedToken347);
                    nnextract50=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken349_static.FOLLOW_nnfilter_in_unmatchedToken349);
                    nnfilter51=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken351_static.FOLLOW_nnprecipitate_in_unmatchedToken351);
                    nnprecipitate52=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken353_static.FOLLOW_nnpurify_in_unmatchedToken353);
                    nnpurify53=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken355_static.FOLLOW_nnremove_in_unmatchedToken355);
                    nnremove54=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken357_static.FOLLOW_nnsynthesize_in_unmatchedToken357);
                    nnsynthesize55=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken359_static.FOLLOW_nnyield_in_unmatchedToken359);
                    nnyield56=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken361_static.FOLLOW_colon_in_unmatchedToken361);
                    colon57=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken363_static.FOLLOW_apost_in_unmatchedToken363);
                    apost58=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken365_static.FOLLOW_neg_in_unmatchedToken365);
                    neg59=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken367_static.FOLLOW_dash_in_unmatchedToken367);
                    dash60=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken369_static.FOLLOW_nnpercent_in_unmatchedToken369);
                    nnpercent61=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken371_static.FOLLOW_lsqb_in_unmatchedToken371);
                    lsqb62=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken373_static.FOLLOW_rsqb_in_unmatchedToken373);
                    rsqb63=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken375_static.FOLLOW_lrb_in_unmatchedToken375);
                    lrb64=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken377_static.FOLLOW_rrb_in_unmatchedToken377);
                    rrb65=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken381_static.FOLLOW_cc_in_unmatchedToken381);
                    cc66=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken383_static.FOLLOW_dt_in_unmatchedToken383);
                    dt67=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken385_static.FOLLOW_dtTHE_in_unmatchedToken385);
                    dtTHE68=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken387_static.FOLLOW_fw_in_unmatchedToken387);
                    fw69=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken389_static.FOLLOW_md_in_unmatchedToken389);
                    md70=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken391_static.FOLLOW_nn_in_unmatchedToken391);
                    nn71=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken393_static.FOLLOW_nns_in_unmatchedToken393);
                    nns72=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken395_static.FOLLOW_nnp_in_unmatchedToken395);
                    nnp73=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken397_static.FOLLOW_prp_in_unmatchedToken397);
                    prp74=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken399_static.FOLLOW_prp_poss_in_unmatchedToken399);
                    prp_poss75=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken401_static.FOLLOW_rbconj_in_unmatchedToken401);
                    rbconj76=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken403_static.FOLLOW_sym_in_unmatchedToken403);
                    sym77=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken405_static.FOLLOW_uh_in_unmatchedToken405);
                    uh78=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken407_static.FOLLOW_clause_in_unmatchedToken407);
                    clause79=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken409_static.FOLLOW_comma_in_unmatchedToken409);
                    comma80=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken411_static.FOLLOW_ls_in_unmatchedToken411);
                    ls81=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken413_static.FOLLOW_nnps_in_unmatchedToken413);
                    nnps82=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken415_static.FOLLOW_pos_in_unmatchedToken415);
                    pos83=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure84 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase425_static.FOLLOW_nounphraseStructure_in_nounphrase425);
            nounphraseStructure84=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure84.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 67:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:69:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure185 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure286 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure444_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure444);
                    nounphraseStructure185=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure185.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure446_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure446);
                    nounphraseStructure286=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure286.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus87 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1455_static.FOLLOW_multiApparatus_in_nounphraseStructure1455);
            multiApparatus87=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus87.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 72:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:73:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | number )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE88 = null;

        ChemicalChunkerParser.dt_return dt89 = null;

        ChemicalChunkerParser.advAdj_return advAdj90 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase91 = null;

        ChemicalChunkerParser.ratio_return ratio92 = null;

        ChemicalChunkerParser.noun_return noun93 = null;

        ChemicalChunkerParser.number_return number94 = null;

        ChemicalChunkerParser.conjunction_return conjunction95 = null;

        ChemicalChunkerParser.advAdj_return advAdj96 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase97 = null;

        ChemicalChunkerParser.ratio_return ratio98 = null;

        ChemicalChunkerParser.noun_return noun99 = null;

        ChemicalChunkerParser.number_return number100 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf101 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN102 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase103 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | number )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | number )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 136:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2472_static.FOLLOW_dtTHE_in_nounphraseStructure2472);
                    dtTHE88=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE88.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred84_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2475_static.FOLLOW_dt_in_nounphraseStructure2475);
                    dt89=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt89.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2478_static.FOLLOW_advAdj_in_nounphraseStructure2478);
            	    advAdj90=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj90.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:24: ( dissolvePhrase | ratio | noun | number )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2483_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2483);
            	    dissolvePhrase91=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase91.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:40: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2485_static.FOLLOW_ratio_in_nounphraseStructure2485);
            	    ratio92=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio92.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:46: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2487_static.FOLLOW_noun_in_nounphraseStructure2487);
            	    noun93=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun93.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:51: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2489_static.FOLLOW_number_in_nounphraseStructure2489);
            	    number94=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number94.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number )
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2497_static.FOLLOW_conjunction_in_nounphraseStructure2497);
            	    	    conjunction95=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction95.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2500_static.FOLLOW_advAdj_in_nounphraseStructure2500);
            	    	    advAdj96=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj96.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:85: ( dissolvePhrase | ratio | noun | number )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2504_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2504);
            	            dissolvePhrase97=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase97.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:101: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2506_static.FOLLOW_ratio_in_nounphraseStructure2506);
            	            ratio98=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio98.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:107: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2508_static.FOLLOW_noun_in_nounphraseStructure2508);
            	            noun99=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun99.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:112: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2510_static.FOLLOW_number_in_nounphraseStructure2510);
            	            number100=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number100.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 46:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 52:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 52:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 46:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2520_static.FOLLOW_prepphraseOf_in_nounphraseStructure2520);
            	            prepphraseOf101=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf101.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2523_static.FOLLOW_prepphraseIN_in_nounphraseStructure2523);
            	            prepphraseIN102=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN102.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2526_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2526);
            	            dissolvePhrase103=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase103.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure104 = null;

        ChemicalChunkerParser.lrb_return lrb105 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure106 = null;

        ChemicalChunkerParser.rrb_return rrb107 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt20=2;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase540_static.FOLLOW_dissolveStructure_in_dissolvePhrase540);
                    dissolveStructure104=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure104.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase542_static.FOLLOW_lrb_in_dissolvePhrase542);
                    lrb105=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb105.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase544_static.FOLLOW_dissolveStructure_in_dissolvePhrase544);
                    dissolveStructure106=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure106.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase546_static.FOLLOW_rrb_in_dissolvePhrase546);
                    rrb107=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb107.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lrb, rrb, dissolveStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 76:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:1: dissolveStructure : ( adj )? ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj108 = null;

        ChemicalChunkerParser.nnp_return nnp109 = null;

        ChemicalChunkerParser.molecule_return molecule110 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule111 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity112 = null;

        ChemicalChunkerParser.molecule_return molecule113 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule114 = null;

        ChemicalChunkerParser.inin_return inin115 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE116 = null;

        ChemicalChunkerParser.adj_return adj117 = null;

        ChemicalChunkerParser.nnp_return nnp118 = null;

        ChemicalChunkerParser.molecule_return molecule119 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule120 = null;

        ChemicalChunkerParser.conjunction_return conjunction121 = null;

        ChemicalChunkerParser.molecule_return molecule122 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:2: ( ( adj )? ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:4: ( adj )? ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:4: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure571_static.FOLLOW_adj_in_dissolveStructure571);
                    adj108=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj108.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:9: ( nnp ( molecule | unnamedmolecule | nnchementity ) | ( molecule | unnamedmolecule ) )
            int alt24=2;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt24=1;
                }
                break;
            case 34:
            case 35:
            case 36:
            case 41:
            case 42:
            case 79:
            case 128:
            case 137:
            case 140:
            case 145:
            case 146:
            case 147:
                {
                alt24=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:10: nnp ( molecule | unnamedmolecule | nnchementity )
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure575_static.FOLLOW_nnp_in_dissolveStructure575);
                    nnp109=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp109.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:14: ( molecule | unnamedmolecule | nnchementity )
                    int alt22=3;
                    alt22 = dfa22.predict(input);
                    switch (alt22) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:15: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure578_static.FOLLOW_molecule_in_dissolveStructure578);
                            molecule110=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule110.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:24: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure580_static.FOLLOW_unnamedmolecule_in_dissolveStructure580);
                            unnamedmolecule111=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule111.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:40: nnchementity
                            {
                            pushFollow(FOLLOW_nnchementity_in_dissolveStructure582_static.FOLLOW_nnchementity_in_dissolveStructure582);
                            nnchementity112=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity112.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:56: ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:56: ( molecule | unnamedmolecule )
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:57: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure588_static.FOLLOW_molecule_in_dissolveStructure588);
                            molecule113=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule113.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:66: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure590_static.FOLLOW_unnamedmolecule_in_dissolveStructure590);
                            unnamedmolecule114=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule114.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:84: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt30=0;
            loop30:
            do {
                int alt30=2;
                switch ( input.LA(1) ) {
                case 46:
                    {
                    int LA30_2 = input.LA(2);

                    if ( (synpred110_ChemicalChunker()) ) {
                        alt30=1;
                    }


                    }
                    break;

                }

                switch (alt30) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:85: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure595_static.FOLLOW_inin_in_dissolveStructure595);
            	    inin115=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin115.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:90: ( dtTHE )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 136:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure597_static.FOLLOW_dtTHE_in_dissolveStructure597);
            	            dtTHE116=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE116.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:97: ( adj )?
            	    int alt26=2;
            	    alt26 = dfa26.predict(input);
            	    switch (alt26) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure600_static.FOLLOW_adj_in_dissolveStructure600);
            	            adj117=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj117.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:102: ( nnp )?
            	    int alt27=2;
            	    switch ( input.LA(1) ) {
            	        case 152:
            	            {
            	            alt27=1;
            	            }
            	            break;
            	    }

            	    switch (alt27) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure603_static.FOLLOW_nnp_in_dissolveStructure603);
            	            nnp118=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp118.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:107: ( molecule | unnamedmolecule )
            	    int alt28=2;
            	    alt28 = dfa28.predict(input);
            	    switch (alt28) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:108: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure607_static.FOLLOW_molecule_in_dissolveStructure607);
            	            molecule119=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule119.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:117: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure609_static.FOLLOW_unnamedmolecule_in_dissolveStructure609);
            	            unnamedmolecule120=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule120.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:134: ( conjunction molecule )*
            	    loop29:
            	    do {
            	        int alt29=2;
            	        switch ( input.LA(1) ) {
            	        case 139:
            	            {
            	            int LA29_1 = input.LA(2);

            	            if ( (synpred109_ChemicalChunker()) ) {
            	                alt29=1;
            	            }


            	            }
            	            break;
            	        case 128:
            	            {
            	            int LA29_2 = input.LA(2);

            	            if ( (synpred109_ChemicalChunker()) ) {
            	                alt29=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt29) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:135: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure613_static.FOLLOW_conjunction_in_dissolveStructure613);
            	    	    conjunction121=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction121.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure615_static.FOLLOW_molecule_in_dissolveStructure615);
            	    	    molecule122=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule122.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop29;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        throw eee;
                }
                cnt30++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure123 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase630_static.FOLLOW_verbphraseStructure_in_verbphrase630);
            verbphraseStructure123=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure123.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 83:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt124 = null;

        ChemicalChunkerParser.to_return to125 = null;

        ChemicalChunkerParser.inAll_return inAll126 = null;

        ChemicalChunkerParser.inafter_return inafter127 = null;

        ChemicalChunkerParser.md_return md128 = null;

        ChemicalChunkerParser.rbconj_return rbconj129 = null;

        ChemicalChunkerParser.adv_return adv130 = null;

        ChemicalChunkerParser.adj_return adj131 = null;

        ChemicalChunkerParser.verb_return verb132 = null;

        ChemicalChunkerParser.md_return md133 = null;

        ChemicalChunkerParser.adv_return adv134 = null;

        ChemicalChunkerParser.adj_return adj135 = null;

        ChemicalChunkerParser.neg_return neg136 = null;

        ChemicalChunkerParser.inoff_return inoff137 = null;

        ChemicalChunkerParser.cc_return cc138 = null;

        ChemicalChunkerParser.comma_return comma139 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase140 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:24: ( dt )?
            int alt31=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt31=1;
                    }
                    break;
            }

            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure648_static.FOLLOW_dt_in_verbphraseStructure648);
                    dt124=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt124.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:28: ( to )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 163:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA32_3 = input.LA(3);

                            if ( (synpred112_ChemicalChunker()) ) {
                                alt32=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure651_static.FOLLOW_to_in_verbphraseStructure651);
                    to125=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to125.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:32: ( inAll )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt33=1;
                    }
                    break;
                case 45:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_4 = input.LA(3);

                            if ( (synpred113_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure654_static.FOLLOW_inAll_in_verbphraseStructure654);
                    inAll126=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll126.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:39: ( inafter )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 45:
                    {
                    alt34=1;
                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure657_static.FOLLOW_inafter_in_verbphraseStructure657);
                    inafter127=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter127.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt44=0;
            loop44:
            do {
                int alt44=2;
                alt44 = dfa44.predict(input);
                switch (alt44) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:49: ( md )*
            	    loop35:
            	    do {
            	        int alt35=2;
            	        switch ( input.LA(1) ) {
            	        case 149:
            	            {
            	            alt35=1;
            	            }
            	            break;

            	        }

            	        switch (alt35) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure661_static.FOLLOW_md_in_verbphraseStructure661);
            	    	    md128=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md128.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop35;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:53: ( rbconj )?
            	    int alt36=2;
            	    switch ( input.LA(1) ) {
            	        case 126:
            	            {
            	            alt36=1;
            	            }
            	            break;
            	    }

            	    switch (alt36) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure664_static.FOLLOW_rbconj_in_verbphraseStructure664);
            	            rbconj129=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj129.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:61: ( adv )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        switch ( input.LA(1) ) {
            	        case 158:
            	        case 159:
            	        case 160:
            	        case 161:
            	            {
            	            alt37=1;
            	            }
            	            break;

            	        }

            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure667_static.FOLLOW_adv_in_verbphraseStructure667);
            	    	    adv130=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv130.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:66: ( adj )?
            	    int alt38=2;
            	    switch ( input.LA(1) ) {
            	        case 35:
            	        case 36:
            	        case 41:
            	        case 145:
            	        case 146:
            	        case 147:
            	            {
            	            alt38=1;
            	            }
            	            break;
            	    }

            	    switch (alt38) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure670_static.FOLLOW_adj_in_verbphraseStructure670);
            	            adj131=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj131.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:71: ( verb )+
            	    int cnt39=0;
            	    loop39:
            	    do {
            	        int alt39=2;
            	        alt39 = dfa39.predict(input);
            	        switch (alt39) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure673_static.FOLLOW_verb_in_verbphraseStructure673);
            	    	    verb132=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb132.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt39 >= 1 ) break loop39;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(39, input);
            	                throw eee;
            	        }
            	        cnt39++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:77: ( md )*
            	    loop40:
            	    do {
            	        int alt40=2;
            	        switch ( input.LA(1) ) {
            	        case 149:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA40_3 = input.LA(3);

            	                if ( (synpred120_ChemicalChunker()) ) {
            	                    alt40=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure676_static.FOLLOW_md_in_verbphraseStructure676);
            	    	    md133=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md133.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop40;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:81: ( adv )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        alt41 = dfa41.predict(input);
            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure679_static.FOLLOW_adv_in_verbphraseStructure679);
            	    	    adv134=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv134.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:86: ( adj )?
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure682_static.FOLLOW_adj_in_verbphraseStructure682);
            	            adj135=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj135.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:91: ( neg )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 130:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA43_3 = input.LA(3);

            	                    if ( (synpred123_ChemicalChunker()) ) {
            	                        alt43=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure685_static.FOLLOW_neg_in_verbphraseStructure685);
            	            neg136=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg136.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt44 >= 1 ) break loop44;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(44, input);
                        throw eee;
                }
                cnt44++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:99: ( inoff )?
            int alt45=2;
            switch ( input.LA(1) ) {
                case 58:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA45_3 = input.LA(3);

                            if ( (synpred125_ChemicalChunker()) ) {
                                alt45=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt45) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure691_static.FOLLOW_inoff_in_verbphraseStructure691);
                    inoff137=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff137.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:106: ( ( cc )? ( comma )? prepphrase )*
            loop48:
            do {
                int alt48=2;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:107: ( cc )?
            	    int alt46=2;
            	    switch ( input.LA(1) ) {
            	        case 139:
            	            {
            	            alt46=1;
            	            }
            	            break;
            	    }

            	    switch (alt46) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure695_static.FOLLOW_cc_in_verbphraseStructure695);
            	            cc138=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc138.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:111: ( comma )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 128:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure698_static.FOLLOW_comma_in_verbphraseStructure698);
            	            comma139=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma139.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure701_static.FOLLOW_prepphrase_in_verbphraseStructure701);
            	    prepphrase140=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase140.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb141 = null;

        ChemicalChunkerParser.vbp_return vbp142 = null;

        ChemicalChunkerParser.vbg_return vbg143 = null;

        ChemicalChunkerParser.vbd_return vbd144 = null;

        ChemicalChunkerParser.vbz_return vbz145 = null;

        ChemicalChunkerParser.vbn_return vbn146 = null;

        ChemicalChunkerParser.vbuse_return vbuse147 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge148 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse149 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb150 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject151 = null;

        ChemicalChunkerParser.vbadd_return vbadd152 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute153 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge154 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain155 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop156 = null;

        ChemicalChunkerParser.vbfill_return vbfill157 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend158 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat159 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus160 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate161 = null;

        ChemicalChunkerParser.vbcool_return vbcool162 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass163 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve164 = null;

        ChemicalChunkerParser.vbdry_return vbdry165 = null;

        ChemicalChunkerParser.vbextract_return vbextract166 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter167 = null;

        ChemicalChunkerParser.vbheat_return vbheat168 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease169 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition170 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate171 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify172 = null;

        ChemicalChunkerParser.vbquench_return vbquench173 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover174 = null;

        ChemicalChunkerParser.vbremove_return vbremove175 = null;

        ChemicalChunkerParser.vbstir_return vbstir176 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize177 = null;

        ChemicalChunkerParser.vbwait_return vbwait178 = null;

        ChemicalChunkerParser.vbwash_return vbwash179 = null;

        ChemicalChunkerParser.vbyield_return vbyield180 = null;

        ChemicalChunkerParser.vbchange_return vbchange181 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt49=41;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb713_static.FOLLOW_vb_in_verb713);
                    vb141=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb141.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb715_static.FOLLOW_vbp_in_verb715);
                    vbp142=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp142.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb717_static.FOLLOW_vbg_in_verb717);
                    vbg143=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg143.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb719_static.FOLLOW_vbd_in_verb719);
                    vbd144=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd144.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb721_static.FOLLOW_vbz_in_verb721);
                    vbz145=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz145.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb723_static.FOLLOW_vbn_in_verb723);
                    vbn146=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn146.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb725_static.FOLLOW_vbuse_in_verb725);
                    vbuse147=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse147.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb727_static.FOLLOW_vbsubmerge_in_verb727);
                    vbsubmerge148=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge148.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb729_static.FOLLOW_vbimmerse_in_verb729);
                    vbimmerse149=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse149.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb731_static.FOLLOW_degassMultiVerb_in_verb731);
                    degassMultiVerb150=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb150.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb733_static.FOLLOW_vbsubject_in_verb733);
                    vbsubject151=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject151.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb735_static.FOLLOW_vbadd_in_verb735);
                    vbadd152=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd152.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb737_static.FOLLOW_vbdilute_in_verb737);
                    vbdilute153=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute153.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb739_static.FOLLOW_vbcharge_in_verb739);
                    vbcharge154=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge154.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb741_static.FOLLOW_vbcontain_in_verb741);
                    vbcontain155=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain155.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb743_static.FOLLOW_vbdrop_in_verb743);
                    vbdrop156=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop156.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb745_static.FOLLOW_vbfill_in_verb745);
                    vbfill157=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill157.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb747_static.FOLLOW_vbsuspend_in_verb747);
                    vbsuspend158=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend158.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb749_static.FOLLOW_vbtreat_in_verb749);
                    vbtreat159=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat159.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb751_static.FOLLOW_vbapparatus_in_verb751);
                    vbapparatus160=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus160.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb753_static.FOLLOW_vbconcentrate_in_verb753);
                    vbconcentrate161=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate161.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb755_static.FOLLOW_vbcool_in_verb755);
                    vbcool162=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool162.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb757_static.FOLLOW_vbdegass_in_verb757);
                    vbdegass163=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass163.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb759_static.FOLLOW_vbdissolve_in_verb759);
                    vbdissolve164=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve164.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb761_static.FOLLOW_vbdry_in_verb761);
                    vbdry165=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry165.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb763_static.FOLLOW_vbextract_in_verb763);
                    vbextract166=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract166.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb765_static.FOLLOW_vbfilter_in_verb765);
                    vbfilter167=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter167.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb768_static.FOLLOW_vbheat_in_verb768);
                    vbheat168=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat168.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb770_static.FOLLOW_vbincrease_in_verb770);
                    vbincrease169=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease169.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb772_static.FOLLOW_vbpartition_in_verb772);
                    vbpartition170=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition170.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb774_static.FOLLOW_vbprecipitate_in_verb774);
                    vbprecipitate171=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate171.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb776_static.FOLLOW_vbpurify_in_verb776);
                    vbpurify172=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify172.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb778_static.FOLLOW_vbquench_in_verb778);
                    vbquench173=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench173.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb780_static.FOLLOW_vbrecover_in_verb780);
                    vbrecover174=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover174.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb782_static.FOLLOW_vbremove_in_verb782);
                    vbremove175=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove175.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb784_static.FOLLOW_vbstir_in_verb784);
                    vbstir176=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir176.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb786_static.FOLLOW_vbsynthesize_in_verb786);
                    vbsynthesize177=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize177.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb788_static.FOLLOW_vbwait_in_verb788);
                    vbwait178=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait178.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb790_static.FOLLOW_vbwash_in_verb790);
                    vbwash179=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash179.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb792_static.FOLLOW_vbyield_in_verb792);
                    vbyield180=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield180.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb794_static.FOLLOW_vbchange_in_verb794);
                    vbchange181=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange181.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass182 = null;

        ChemicalChunkerParser.cc_return cc183 = null;

        ChemicalChunkerParser.vbfill_return vbfill184 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb803_static.FOLLOW_vbdegass_in_degassMultiVerb803);
            vbdegass182=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass182.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb805_static.FOLLOW_cc_in_degassMultiVerb805);
            cc183=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc183.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb807_static.FOLLOW_vbfill_in_degassMultiVerb807);
            vbfill184=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure185 = null;

        ChemicalChunkerParser.dash_return dash186 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure187 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun816_static.FOLLOW_nounStructure_in_noun816);
            nounStructure185=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure185.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:23: ( dash nounStructure )*
            loop50:
            do {
                int alt50=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    int LA50_2 = input.LA(2);

                    if ( (synpred169_ChemicalChunker()) ) {
                        alt50=1;
                    }


                    }
                    break;

                }

                switch (alt50) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun819_static.FOLLOW_dash_in_noun819);
            	    dash186=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash186.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun821_static.FOLLOW_nounStructure_in_noun821);
            	    nounStructure187=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure187.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | reference | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp188 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss189 = null;

        ChemicalChunkerParser.citation_return citation190 = null;

        ChemicalChunkerParser.cycles_return cycles191 = null;

        ChemicalChunkerParser.molecule_return molecule192 = null;

        ChemicalChunkerParser.apparatus_return apparatus193 = null;

        ChemicalChunkerParser.mixture_return mixture194 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule195 = null;

        ChemicalChunkerParser.nnyield_return nnyield196 = null;

        ChemicalChunkerParser.nnstate_return nnstate197 = null;

        ChemicalChunkerParser.nn_return nn198 = null;

        ChemicalChunkerParser.nns_return nns199 = null;

        ChemicalChunkerParser.nnp_return nnp200 = null;

        ChemicalChunkerParser.nnadd_return nnadd201 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase202 = null;

        ChemicalChunkerParser.nnexample_return nnexample203 = null;

        ChemicalChunkerParser.range_return range204 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts205 = null;

        ChemicalChunkerParser.nntime_return nntime206 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere207 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode208 = null;

        ChemicalChunkerParser.nneq_return nneq209 = null;

        ChemicalChunkerParser.quantity_return quantity210 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity211 = null;

        ChemicalChunkerParser.nntemp_return nntemp212 = null;

        ChemicalChunkerParser.nnflash_return nnflash213 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral214 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod215 = null;

        ChemicalChunkerParser.nnamount_return nnamount216 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure217 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn218 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography219 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum220 = null;

        ChemicalChunkerParser.nncycle_return nncycle221 = null;

        ChemicalChunkerParser.nntimes_return nntimes222 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate223 = null;

        ChemicalChunkerParser.nnvol_return nnvol224 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify225 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize226 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture227 = null;

        ChemicalChunkerParser.reference_return reference228 = null;

        ChemicalChunkerParser.nndry_return nndry229 = null;

        ChemicalChunkerParser.number_return number230 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound231 = null;

        ChemicalChunkerParser.nnextract_return nnextract232 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter233 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate234 = null;

        ChemicalChunkerParser.nnremove_return nnremove235 = null;

        ChemicalChunkerParser.fw_return fw236 = null;

        ChemicalChunkerParser.sym_return sym237 = null;

        ChemicalChunkerParser.clause_return clause238 = null;

        ChemicalChunkerParser.ls_return ls239 = null;

        ChemicalChunkerParser.nnps_return nnps240 = null;

        ChemicalChunkerParser.pos_return pos241 = null;

        ChemicalChunkerParser.oscarase_return oscarase242 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | reference | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt51=55;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure832_static.FOLLOW_prp_in_nounStructure832);
                    prp188=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp188.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure834_static.FOLLOW_prp_poss_in_nounStructure834);
                    prp_poss189=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss189.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure836_static.FOLLOW_citation_in_nounStructure836);
                    citation190=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation190.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure838_static.FOLLOW_cycles_in_nounStructure838);
                    cycles191=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles191.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure840_static.FOLLOW_molecule_in_nounStructure840);
                    molecule192=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule192.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure842_static.FOLLOW_apparatus_in_nounStructure842);
                    apparatus193=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus193.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure844_static.FOLLOW_mixture_in_nounStructure844);
                    mixture194=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture194.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure846_static.FOLLOW_unnamedmolecule_in_nounStructure846);
                    unnamedmolecule195=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule195.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure848_static.FOLLOW_nnyield_in_nounStructure848);
                    nnyield196=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield196.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure850_static.FOLLOW_nnstate_in_nounStructure850);
                    nnstate197=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate197.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:106: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure852_static.FOLLOW_nn_in_nounStructure852);
                    nn198=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn198.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:109: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure854_static.FOLLOW_nns_in_nounStructure854);
                    nns199=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns199.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:113: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure856_static.FOLLOW_nnp_in_nounStructure856);
                    nnp200=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp200.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:117: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure858_static.FOLLOW_nnadd_in_nounStructure858);
                    nnadd201=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd201.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:123: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure860_static.FOLLOW_preparationphrase_in_nounStructure860);
                    preparationphrase202=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase202.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:141: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure862_static.FOLLOW_nnexample_in_nounStructure862);
                    nnexample203=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample203.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:151: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure864_static.FOLLOW_range_in_nounStructure864);
                    range204=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range204.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:157: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure866_static.FOLLOW_oscaronts_in_nounStructure866);
                    oscaronts205=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts205.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:167: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure868_static.FOLLOW_nntime_in_nounStructure868);
                    nntime206=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime206.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:174: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure870_static.FOLLOW_nnatmosphere_in_nounStructure870);
                    nnatmosphere207=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere207.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:187: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure872_static.FOLLOW_tmunicode_in_nounStructure872);
                    tmunicode208=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode208.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:197: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure874_static.FOLLOW_nneq_in_nounStructure874);
                    nneq209=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq209.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:202: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure876_static.FOLLOW_quantity_in_nounStructure876);
                    quantity210=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity210.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:211: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure878_static.FOLLOW_nnchementity_in_nounStructure878);
                    nnchementity211=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity211.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:224: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure880_static.FOLLOW_nntemp_in_nounStructure880);
                    nntemp212=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp212.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:231: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure882_static.FOLLOW_nnflash_in_nounStructure882);
                    nnflash213=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash213.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:239: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure884_static.FOLLOW_nngeneral_in_nounStructure884);
                    nngeneral214=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral214.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:249: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure886_static.FOLLOW_nnmethod_in_nounStructure886);
                    nnmethod215=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod215.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:258: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure888_static.FOLLOW_nnamount_in_nounStructure888);
                    nnamount216=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount216.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:267: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure890_static.FOLLOW_nnpressure_in_nounStructure890);
                    nnpressure217=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure217.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:278: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure892_static.FOLLOW_nncolumn_in_nounStructure892);
                    nncolumn218=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn218.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:287: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure894_static.FOLLOW_nnchromatography_in_nounStructure894);
                    nnchromatography219=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography219.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:304: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure896_static.FOLLOW_nnvacuum_in_nounStructure896);
                    nnvacuum220=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum220.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:313: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure898_static.FOLLOW_nncycle_in_nounStructure898);
                    nncycle221=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle221.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:321: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure900_static.FOLLOW_nntimes_in_nounStructure900);
                    nntimes222=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes222.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:329: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure902_static.FOLLOW_nnconcentrate_in_nounStructure902);
                    nnconcentrate223=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate223.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:343: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure904_static.FOLLOW_nnvol_in_nounStructure904);
                    nnvol224=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol224.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:349: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure906_static.FOLLOW_nnpurify_in_nounStructure906);
                    nnpurify225=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify225.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:358: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure908_static.FOLLOW_nnsynthesize_in_nounStructure908);
                    nnsynthesize226=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize226.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:371: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure910_static.FOLLOW_nnmixture_in_nounStructure910);
                    nnmixture227=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture227.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:381: reference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_reference_in_nounStructure912_static.FOLLOW_reference_in_nounStructure912);
                    reference228=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference228.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:391: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure914_static.FOLLOW_nndry_in_nounStructure914);
                    nndry229=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry229.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:397: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure916_static.FOLLOW_number_in_nounStructure916);
                    number230=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number230.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:404: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure918_static.FOLLOW_oscarCompound_in_nounStructure918);
                    oscarCompound231=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound231.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:418: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure920_static.FOLLOW_nnextract_in_nounStructure920);
                    nnextract232=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract232.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:428: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure922_static.FOLLOW_nnfilter_in_nounStructure922);
                    nnfilter233=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter233.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:437: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure924_static.FOLLOW_nnprecipitate_in_nounStructure924);
                    nnprecipitate234=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate234.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:451: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure926_static.FOLLOW_nnremove_in_nounStructure926);
                    nnremove235=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove235.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:460: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure928_static.FOLLOW_fw_in_nounStructure928);
                    fw236=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw236.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:463: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure930_static.FOLLOW_sym_in_nounStructure930);
                    sym237=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym237.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:467: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure932_static.FOLLOW_clause_in_nounStructure932);
                    clause238=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause238.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:474: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure934_static.FOLLOW_ls_in_nounStructure934);
                    ls239=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls239.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:477: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure936_static.FOLLOW_nnps_in_nounStructure936);
                    nnps240=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps240.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:482: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure938_static.FOLLOW_pos_in_nounStructure938);
                    pos241=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos241.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:486: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure940_static.FOLLOW_oscarase_in_nounStructure940);
                    oscarase242=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase242.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg243 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere244 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime245 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp246 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN247 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole248 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther249 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:5: ( neg )?
            int alt52=2;
            switch ( input.LA(1) ) {
                case 130:
                    {
                    alt52=1;
                    }
                    break;
            }

            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase952_static.FOLLOW_neg_in_prepphrase952);
                    neg243=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg243.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt53=6;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase956_static.FOLLOW_prepphraseAtmosphere_in_prepphrase956);
                    prepphraseAtmosphere244=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere244.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase958_static.FOLLOW_prepphraseTime_in_prepphrase958);
                    prepphraseTime245=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime245.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase960_static.FOLLOW_prepphraseTemp_in_prepphrase960);
                    prepphraseTemp246=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp246.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase962_static.FOLLOW_prepphraseIN_in_prepphrase962);
                    prepphraseIN247=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN247.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase964_static.FOLLOW_prepphraseRole_in_prepphrase964);
                    prepphraseRole248=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole248.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase966_static.FOLLOW_prepphraseOther_in_prepphrase966);
                    prepphraseOther249=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther249.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent250 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere978_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere978);
            prepphraseAtmosphereContent250=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent250.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder251 = null;

        ChemicalChunkerParser.dt_return dt252 = null;

        ChemicalChunkerParser.advAdj_return advAdj253 = null;

        ChemicalChunkerParser.molecule_return molecule254 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere255 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent998_static.FOLLOW_inunder_in_prepphraseAtmosphereContent998);
            inunder251=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder251.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:12: ( dt )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt54=1;
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1001_static.FOLLOW_dt_in_prepphraseAtmosphereContent1001);
                    dt252=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt252.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:16: ( advAdj )*
            loop55:
            do {
                int alt55=2;
                alt55 = dfa55.predict(input);
                switch (alt55) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1004_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1004);
            	    advAdj253=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj253.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1007_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1007);
            molecule254=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule254.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:33: ( nnatmosphere )?
            int alt56=2;
            switch ( input.LA(1) ) {
                case 64:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA56_3 = input.LA(3);

                            if ( (synpred232_ChemicalChunker()) ) {
                                alt56=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt56) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1009_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1009);
                    nnatmosphere255=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere255.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure256 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1019_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1019);
            prepPhraseTimeStructure256=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure256.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 106:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj257 = null;

        ChemicalChunkerParser.inAll_return inAll258 = null;

        ChemicalChunkerParser.dt_return dt259 = null;

        ChemicalChunkerParser.advAdj_return advAdj260 = null;

        ChemicalChunkerParser.cd_return cd261 = null;

        ChemicalChunkerParser.nntime_return nntime262 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:3: ( advAdj )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1037_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1037);
            	    advAdj257=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj257.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:11: ( inAll )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1040_static.FOLLOW_inAll_in_prepPhraseTimeStructure1040);
                    inAll258=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll258.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:19: ( dt )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1044_static.FOLLOW_dt_in_prepPhraseTimeStructure1044);
                    dt259=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt259.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:23: ( advAdj )*
            loop60:
            do {
                int alt60=2;
                switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt60=1;
                    }
                    break;

                }

                switch (alt60) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1047_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1047);
            	    advAdj260=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj260.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:31: ( cd )?
            int alt61=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt61=1;
                    }
                    break;
            }

            switch (alt61) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1050_static.FOLLOW_cd_in_prepPhraseTimeStructure1050);
                    cd261=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd261.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:35: ( nntime )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                switch ( input.LA(1) ) {
                case 60:
                    {
                    int LA62_2 = input.LA(2);

                    if ( (synpred238_ChemicalChunker()) ) {
                        alt62=1;
                    }


                    }
                    break;

                }

                switch (alt62) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1053_static.FOLLOW_nntime_in_prepPhraseTimeStructure1053);
            	    nntime262=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime262.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent263 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1063_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1063);
            prepphraseTempContent263=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent263.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 111:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj264 = null;

        ChemicalChunkerParser.inAll_return inAll265 = null;

        ChemicalChunkerParser.dt_return dt266 = null;

        ChemicalChunkerParser.advAdj_return advAdj267 = null;

        ChemicalChunkerParser.cd_return cd268 = null;

        ChemicalChunkerParser.nntemp_return nntemp269 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:5: ( advAdj )?
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1084_static.FOLLOW_advAdj_in_prepphraseTempContent1084);
                    advAdj264=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj264.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:13: ( inAll )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt64=1;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1087_static.FOLLOW_inAll_in_prepphraseTempContent1087);
                    inAll265=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll265.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:20: ( dt )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1090_static.FOLLOW_dt_in_prepphraseTempContent1090);
                    dt266=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt266.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:24: ( advAdj )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1093_static.FOLLOW_advAdj_in_prepphraseTempContent1093);
                    advAdj267=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj267.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:32: ( cd )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1096_static.FOLLOW_cd_in_prepphraseTempContent1096);
                    cd268=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd268.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:36: ( nntemp )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                switch ( input.LA(1) ) {
                case 68:
                    {
                    int LA68_2 = input.LA(2);

                    if ( (synpred244_ChemicalChunker()) ) {
                        alt68=1;
                    }


                    }
                    break;

                }

                switch (alt68) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1099_static.FOLLOW_nntemp_in_prepphraseTempContent1099);
            	    nntemp269=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp269.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin270 = null;

        ChemicalChunkerParser.molecule_return molecule271 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1108_static.FOLLOW_inin_in_prepphraseIN1108);
            inin270=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin270.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1110_static.FOLLOW_molecule_in_prepphraseIN1110);
            molecule271=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule271.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas272 = null;

        ChemicalChunkerParser.dt_return dt273 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity274 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1131_static.FOLLOW_inas_in_prepphraseRole1131);
            inas272=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas272.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:8: ( dt )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt69=1;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1133_static.FOLLOW_dt_in_prepphraseRole1133);
                    dt273=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt273.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1136_static.FOLLOW_nnchementity_in_prepphraseRole1136);
            nnchementity274=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity274.getTree());


            // AST REWRITE
            // elements: nnchementity, inas, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 120:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj275 = null;

        ChemicalChunkerParser.inMost_return inMost276 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase277 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:4: ( advAdj )*
            loop70:
            do {
                int alt70=2;
                switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt70=1;
                    }
                    break;

                }

                switch (alt70) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1159_static.FOLLOW_advAdj_in_prepphraseOther1159);
            	    advAdj275=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj275.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:12: ( inMost )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 43:
                case 44:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 144:
                case 163:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1162_static.FOLLOW_inMost_in_prepphraseOther1162);
            	    inMost276=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost276.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1166_static.FOLLOW_nounphrase_in_prepphraseOther1166);
            nounphrase277=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase277.getTree());


            // AST REWRITE
            // elements: inMost, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 123:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof278 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase279 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1192_static.FOLLOW_inof_in_prepphraseOf1192);
            inof278=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof278.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1195_static.FOLLOW_nounphrase_in_prepphraseOf1195);
            nounphrase279=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase279.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 126:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj280 = null;

        ChemicalChunkerParser.inafter_return inafter281 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase282 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:5: ( advAdj )?
            int alt72=2;
            switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                case 158:
                case 159:
                case 160:
                case 161:
                    {
                    alt72=1;
                    }
                    break;
            }

            switch (alt72) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1217_static.FOLLOW_advAdj_in_prepphraseAfter1217);
                    advAdj280=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj280.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1220_static.FOLLOW_inafter_in_prepphraseAfter1220);
            inafter281=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter281.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1223_static.FOLLOW_nounphrase_in_prepphraseAfter1223);
            nounphrase282=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase282.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inafter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 129:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize283 = null;

        ChemicalChunkerParser.inas_return inas284 = null;

        ChemicalChunkerParser.nnexample_return nnexample285 = null;

        ChemicalChunkerParser.cd_return cd286 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1248_static.FOLLOW_vbsynthesize_in_preparationphrase1248);
            vbsynthesize283=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize283.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1250_static.FOLLOW_inas_in_preparationphrase1250);
            inas284=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas284.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:22: ( nnexample cd | prepphrase )
            int alt73=2;
            switch ( input.LA(1) ) {
            case 78:
                {
                alt73=1;
                }
                break;
            case 35:
            case 36:
            case 41:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 60:
            case 68:
            case 130:
            case 140:
            case 141:
            case 144:
            case 145:
            case 146:
            case 147:
            case 158:
            case 159:
            case 160:
            case 161:
            case 163:
                {
                alt73=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1253_static.FOLLOW_nnexample_in_preparationphrase1253);
                    nnexample285=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample285.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1255_static.FOLLOW_cd_in_preparationphrase1255);
                    cd286=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd286.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1258_static.FOLLOW_prepphrase_in_preparationphrase1258);
                    prepphrase287=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase287.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus288 = null;

        ChemicalChunkerParser.conjunction_return conjunction289 = null;

        ChemicalChunkerParser.apparatus_return apparatus290 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1269_static.FOLLOW_apparatus_in_multiApparatus1269);
            apparatus288=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus288.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:14: ( ( conjunction )* apparatus )*
            loop75:
            do {
                int alt75=2;
                alt75 = dfa75.predict(input);
                switch (alt75) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: ( conjunction )*
            	    loop74:
            	    do {
            	        int alt74=2;
            	        alt74 = dfa74.predict(input);
            	        switch (alt74) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1272_static.FOLLOW_conjunction_in_multiApparatus1272);
            	    	    conjunction289=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction289.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop74;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1275_static.FOLLOW_apparatus_in_multiApparatus1275);
            	    apparatus290=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus290.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt291 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus292 = null;

        ChemicalChunkerParser.nnApp_return nnApp293 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:4: ( dt )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt76=1;
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1286_static.FOLLOW_dt_in_apparatus1286);
                    dt291=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt291.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:8: ( preapparatus )*
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 34:
                case 35:
                case 36:
                case 41:
                case 59:
                case 67:
                case 72:
                case 79:
                case 84:
                case 128:
                case 137:
                case 140:
                case 145:
                case 146:
                case 147:
                case 150:
                    {
                    alt77=1;
                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1289_static.FOLLOW_preapparatus_in_apparatus1289);
            	    preapparatus292=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus292.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:22: ( nnApp )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    int LA78_2 = input.LA(2);

                    if ( (synpred254_ChemicalChunker()) ) {
                        alt78=1;
                    }


                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1292_static.FOLLOW_nnApp_in_apparatus1292);
            	    nnApp293=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp293.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);



            // AST REWRITE
            // elements: dt, preapparatus, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 137:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus294 = null;

        ChemicalChunkerParser.dash_return dash295 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus296 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:4: ( nnapparatus )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred255_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1319_static.FOLLOW_nnapparatus_in_nnApp1319);
            	    nnapparatus294=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus294.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:17: ( dash nnapparatus )*
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 95:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA80_5 = input.LA(5);

                                if ( (synpred256_ChemicalChunker()) ) {
                                    alt80=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1323_static.FOLLOW_dash_in_nnApp1323);
            	    dash295=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash295.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1325_static.FOLLOW_nnapparatus_in_nnApp1325);
            	    nnapparatus296=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus296.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity297 = null;

        ChemicalChunkerParser.adj_return adj298 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure299 = null;

        ChemicalChunkerParser.nnadd_return nnadd300 = null;

        ChemicalChunkerParser.molecule_return molecule301 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity302 = null;

        ChemicalChunkerParser.nnstate_return nnstate303 = null;

        ChemicalChunkerParser.nn_return nn304 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt81=0;
            loop81:
            do {
                int alt81=9;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1339_static.FOLLOW_quantity_in_preapparatus1339);
            	    quantity297=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity297.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1341_static.FOLLOW_adj_in_preapparatus1341);
            	    adj298=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj298.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1343_static.FOLLOW_nnpressure_in_preapparatus1343);
            	    nnpressure299=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure299.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1345_static.FOLLOW_nnadd_in_preapparatus1345);
            	    nnadd300=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd300.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1347_static.FOLLOW_molecule_in_preapparatus1347);
            	    molecule301=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule301.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1349_static.FOLLOW_nnchementity_in_preapparatus1349);
            	    nnchementity302=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity302.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1351_static.FOLLOW_nnstate_in_preapparatus1351);
            	    nnstate303=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate303.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1353_static.FOLLOW_nn_in_preapparatus1353);
            	    nn304=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn304.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront305 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:4: ( oscaront )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                switch ( input.LA(1) ) {
                case 38:
                    {
                    int LA82_2 = input.LA(2);

                    if ( (synpred265_ChemicalChunker()) ) {
                        alt82=1;
                    }


                    }
                    break;

                }

                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1366_static.FOLLOW_oscaront_in_oscaronts1366);
            	    oscaront305=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront305.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj306 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1307 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2308 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3309 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4310 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm311 = null;

        ChemicalChunkerParser.adj_return adj312 = null;

        ChemicalChunkerParser.reference_return reference313 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:18: ( adj )*
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 145:
                case 146:
                case 147:
                    {
                    alt83=1;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1386_static.FOLLOW_adj_in_oscarCompound1386);
            	    adj306=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj306.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt84=5;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1390_static.FOLLOW_oscarCompound1_in_oscarCompound1390);
                    oscarCompound1307=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1307.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1392_static.FOLLOW_oscarCompound2_in_oscarCompound1392);
                    oscarCompound2308=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2308.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1394_static.FOLLOW_oscarCompound3_in_oscarCompound1394);
                    oscarCompound3309=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3309.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound1396_static.FOLLOW_oscarCompound4_in_oscarCompound1396);
                    oscarCompound4310=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4310.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1398_static.FOLLOW_oscarcm_in_oscarCompound1398);
                    oscarcm311=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm311.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:93: ( adj )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1401_static.FOLLOW_adj_in_oscarCompound1401);
                    adj312=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj312.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:98: ( reference )?
            int alt86=2;
            switch ( input.LA(1) ) {
                case 134:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 140:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 135:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA86_7 = input.LA(7);

                                                            if ( (synpred272_ChemicalChunker()) ) {
                                                                alt86=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: reference
                    {
                    pushFollow(FOLLOW_reference_in_oscarCompound1404_static.FOLLOW_reference_in_oscarCompound1404);
                    reference313=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference313.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:1: oscarCompound4 : lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);
        int oscarCompound4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb314 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm315 = null;

        ChemicalChunkerParser.rrb_return rrb316 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:16: ( lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound41413_static.FOLLOW_lrb_in_oscarCompound41413);
            lrb314=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb314.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound41416_static.FOLLOW_oscarcm_in_oscarCompound41416);
            oscarcm315=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm315.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound41418_static.FOLLOW_rrb_in_oscarCompound41418);
            rrb316=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb316.getTree());


            // AST REWRITE
            // elements: oscarcm, rrb, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:35: -> ^( OSCARCM lrb oscarcm rrb )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:38: ^( OSCARCM lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, oscarCompound4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:1: oscarCompound3 : oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);
        int oscarCompound3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure317 = null;


        RewriteRuleSubtreeStream stream_oscarCompound3Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound3Structure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:16: ( oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:18: oscarCompound3Structure
            {
            pushFollow(FOLLOW_oscarCompound3Structure_in_oscarCompound31441_static.FOLLOW_oscarCompound3Structure_in_oscarCompound31441);
            oscarCompound3Structure317=oscarCompound3Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound3Structure.add(oscarCompound3Structure317.getTree());


            // AST REWRITE
            // elements: oscarCompound3Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:42: -> ^( OSCARCM oscarCompound3Structure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:45: ^( OSCARCM oscarCompound3Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound3Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, oscarCompound3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:1: oscarCompound2 : oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);
        int oscarCompound2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure318 = null;


        RewriteRuleSubtreeStream stream_oscarCompound2Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound2Structure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:16: ( oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:18: oscarCompound2Structure
            {
            pushFollow(FOLLOW_oscarCompound2Structure_in_oscarCompound21459_static.FOLLOW_oscarCompound2Structure_in_oscarCompound21459);
            oscarCompound2Structure318=oscarCompound2Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound2Structure.add(oscarCompound2Structure318.getTree());


            // AST REWRITE
            // elements: oscarCompound2Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:42: -> ^( OSCARCM oscarCompound2Structure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:45: ^( OSCARCM oscarCompound2Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound2Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, oscarCompound2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);
        int oscarCompound1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm319 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm320 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:16: ( oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11477_static.FOLLOW_oscarcm_in_oscarCompound11477);
            oscarcm319=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm319.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:26: ( oscarcm )+
            int cnt87=0;
            loop87:
            do {
                int alt87=2;
                switch ( input.LA(1) ) {
                case 79:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA87_3 = input.LA(3);

                        if ( (synpred273_ChemicalChunker()) ) {
                            alt87=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt87) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound11479_static.FOLLOW_oscarcm_in_oscarCompound11479);
            	    oscarcm320=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm320.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:35: -> ^( OSCARCM oscarcm ( oscarcm )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:38: ^( OSCARCM oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, oscarCompound1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class oscarCompound3Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3Structure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:1: oscarCompound3Structure : oscarcm ( dash | apost )+ ;
    public final ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3Structure_return retval = new ChemicalChunkerParser.oscarCompound3Structure_return();
        retval.start = input.LT(1);
        int oscarCompound3Structure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm321 = null;

        ChemicalChunkerParser.dash_return dash322 = null;

        ChemicalChunkerParser.apost_return apost323 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:2: ( oscarcm ( dash | apost )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:5: oscarcm ( dash | apost )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound3Structure1502_static.FOLLOW_oscarcm_in_oscarCompound3Structure1502);
            oscarcm321=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm321.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:13: ( dash | apost )+
            int cnt88=0;
            loop88:
            do {
                int alt88=3;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA88_4 = input.LA(3);

                        if ( (synpred274_ChemicalChunker()) ) {
                            alt88=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 129:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA88_5 = input.LA(3);

                        if ( (synpred275_ChemicalChunker()) ) {
                            alt88=2;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt88) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:14: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound3Structure1505_static.FOLLOW_dash_in_oscarCompound3Structure1505);
            	    dash322=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash322.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:19: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound3Structure1507_static.FOLLOW_apost_in_oscarCompound3Structure1507);
            	    apost323=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost323.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, oscarCompound3Structure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3Structure"

    public static class oscarCompound2Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2Structure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:156:1: oscarCompound2Structure : oscarcm ( dash oscarcm )+ ( dash )? ;
    public final ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2Structure_return retval = new ChemicalChunkerParser.oscarCompound2Structure_return();
        retval.start = input.LT(1);
        int oscarCompound2Structure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm324 = null;

        ChemicalChunkerParser.dash_return dash325 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm326 = null;

        ChemicalChunkerParser.dash_return dash327 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:2: ( oscarcm ( dash oscarcm )+ ( dash )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:5: oscarcm ( dash oscarcm )+ ( dash )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure1518_static.FOLLOW_oscarcm_in_oscarCompound2Structure1518);
            oscarcm324=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm324.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:13: ( dash oscarcm )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 79:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA89_5 = input.LA(5);

                                if ( (synpred276_ChemicalChunker()) ) {
                                    alt89=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt89) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:14: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound2Structure1521_static.FOLLOW_dash_in_oscarCompound2Structure1521);
            	    dash325=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash325.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure1523_static.FOLLOW_oscarcm_in_oscarCompound2Structure1523);
            	    oscarcm326=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm326.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:30: ( dash )?
            int alt90=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA90_3 = input.LA(3);

                            if ( (synpred277_ChemicalChunker()) ) {
                                alt90=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound2Structure1528_static.FOLLOW_dash_in_oscarCompound2Structure1528);
                    dash327=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash327.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, oscarCompound2Structure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2Structure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount328 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1539_static.FOLLOW_moleculeamount_in_molecule1539);
            moleculeamount328=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount328.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 160:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3329 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1330 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2331 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:16: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt91=3;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:18: moleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1556_static.FOLLOW_moleculeamount3_in_moleculeamount1556);
                    moleculeamount3329=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3329.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:34: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1558_static.FOLLOW_moleculeamount1_in_moleculeamount1558);
                    moleculeamount1330=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1330.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:52: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1562_static.FOLLOW_moleculeamount2_in_moleculeamount1562);
                    moleculeamount2331=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:1: moleculeamount3 : ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity332 = null;

        ChemicalChunkerParser.mixture_return mixture333 = null;

        ChemicalChunkerParser.inof_return inof334 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio335 = null;

        ChemicalChunkerParser.mixture_return mixture336 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound337 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:2: ( ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:3: ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:3: ( quantity | mixture )
            int alt92=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                int LA92_1 = input.LA(2);

                if ( (synpred280_ChemicalChunker()) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 1, input);

                    throw nvae;
                }
                }
                break;
            case 140:
                {
                int LA92_2 = input.LA(2);

                if ( (synpred280_ChemicalChunker()) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 2, input);

                    throw nvae;
                }
                }
                break;
            case 34:
                {
                alt92=1;
                }
                break;
            case 128:
                {
                alt92=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount31572_static.FOLLOW_quantity_in_moleculeamount31572);
                    quantity332=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity332.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31574_static.FOLLOW_mixture_in_moleculeamount31574);
                    mixture333=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture333.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount31577_static.FOLLOW_inof_in_moleculeamount31577);
            inof334=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof334.getTree());
            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount31579_static.FOLLOW_mixtureRatio_in_moleculeamount31579);
            mixtureRatio335=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio335.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:40: ( mixture )?
            int alt93=2;
            switch ( input.LA(1) ) {
                case 128:
                case 140:
                    {
                    alt93=1;
                    }
                    break;
                case 137:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 62:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 127:
                                case 128:
                                case 131:
                                case 132:
                                case 133:
                                case 134:
                                case 137:
                                case 140:
                                case 141:
                                case 142:
                                case 143:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 162:
                                case 163:
                                case 165:
                                case 166:
                                case 167:
                                case 168:
                                case 169:
                                case 170:
                                case 171:
                                case 172:
                                case 173:
                                case 174:
                                    {
                                    alt93=1;
                                    }
                                    break;
                                case 79:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 34:
                                                case 35:
                                                case 36:
                                                case 37:
                                                case 38:
                                                case 39:
                                                case 41:
                                                case 42:
                                                case 43:
                                                case 44:
                                                case 45:
                                                case 46:
                                                case 47:
                                                case 48:
                                                case 49:
                                                case 50:
                                                case 51:
                                                case 52:
                                                case 53:
                                                case 54:
                                                case 55:
                                                case 56:
                                                case 57:
                                                case 58:
                                                case 59:
                                                case 60:
                                                case 62:
                                                case 64:
                                                case 65:
                                                case 66:
                                                case 67:
                                                case 68:
                                                case 69:
                                                case 70:
                                                case 71:
                                                case 72:
                                                case 73:
                                                case 74:
                                                case 75:
                                                case 76:
                                                case 77:
                                                case 78:
                                                case 79:
                                                case 80:
                                                case 81:
                                                case 82:
                                                case 83:
                                                case 84:
                                                case 85:
                                                case 86:
                                                case 87:
                                                case 88:
                                                case 89:
                                                case 90:
                                                case 91:
                                                case 92:
                                                case 93:
                                                case 94:
                                                case 95:
                                                case 96:
                                                case 97:
                                                case 98:
                                                case 99:
                                                case 100:
                                                case 101:
                                                case 102:
                                                case 103:
                                                case 104:
                                                case 105:
                                                case 106:
                                                case 107:
                                                case 108:
                                                case 109:
                                                case 110:
                                                case 111:
                                                case 112:
                                                case 113:
                                                case 114:
                                                case 115:
                                                case 116:
                                                case 117:
                                                case 118:
                                                case 119:
                                                case 120:
                                                case 121:
                                                case 122:
                                                case 123:
                                                case 124:
                                                case 125:
                                                case 127:
                                                case 128:
                                                case 129:
                                                case 131:
                                                case 132:
                                                case 133:
                                                case 134:
                                                case 137:
                                                case 140:
                                                case 141:
                                                case 142:
                                                case 143:
                                                case 144:
                                                case 145:
                                                case 146:
                                                case 147:
                                                case 148:
                                                case 149:
                                                case 150:
                                                case 151:
                                                case 152:
                                                case 153:
                                                case 154:
                                                case 155:
                                                case 156:
                                                case 157:
                                                case 162:
                                                case 163:
                                                case 165:
                                                case 166:
                                                case 167:
                                                case 168:
                                                case 169:
                                                case 170:
                                                case 171:
                                                case 172:
                                                case 173:
                                                case 174:
                                                    {
                                                    alt93=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31581_static.FOLLOW_mixture_in_moleculeamount31581);
                    mixture336=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture336.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31584_static.FOLLOW_oscarCompound_in_moleculeamount31584);
            oscarCompound337=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound337.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:1: moleculeamount1 : ( quantity | mixture )+ inof ( quantity )? ( inof )? oscarCompound ( mixture )? ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity338 = null;

        ChemicalChunkerParser.mixture_return mixture339 = null;

        ChemicalChunkerParser.inof_return inof340 = null;

        ChemicalChunkerParser.quantity_return quantity341 = null;

        ChemicalChunkerParser.inof_return inof342 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound343 = null;

        ChemicalChunkerParser.mixture_return mixture344 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:2: ( ( quantity | mixture )+ inof ( quantity )? ( inof )? oscarCompound ( mixture )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:3: ( quantity | mixture )+ inof ( quantity )? ( inof )? oscarCompound ( mixture )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:3: ( quantity | mixture )+
            int cnt94=0;
            loop94:
            do {
                int alt94=3;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    int LA94_2 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt94=1;
                    }
                    else if ( (synpred283_ChemicalChunker()) ) {
                        alt94=2;
                    }


                    }
                    break;
                case 140:
                    {
                    int LA94_3 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt94=1;
                    }
                    else if ( (synpred283_ChemicalChunker()) ) {
                        alt94=2;
                    }


                    }
                    break;
                case 34:
                    {
                    alt94=1;
                    }
                    break;
                case 128:
                    {
                    alt94=2;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11594_static.FOLLOW_quantity_in_moleculeamount11594);
            	    quantity338=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity338.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11596_static.FOLLOW_mixture_in_moleculeamount11596);
            	    mixture339=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture339.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11600_static.FOLLOW_inof_in_moleculeamount11600);
            inof340=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof340.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:28: ( quantity )?
            int alt95=2;
            switch ( input.LA(1) ) {
                case 137:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 34:
                                case 140:
                                    {
                                    alt95=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 34:
                case 140:
                    {
                    alt95=1;
                    }
                    break;
            }

            switch (alt95) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11602_static.FOLLOW_quantity_in_moleculeamount11602);
                    quantity341=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity341.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:38: ( inof )?
            int alt96=2;
            switch ( input.LA(1) ) {
                case 52:
                    {
                    alt96=1;
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_moleculeamount11605_static.FOLLOW_inof_in_moleculeamount11605);
                    inof342=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof342.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11608_static.FOLLOW_oscarCompound_in_moleculeamount11608);
            oscarCompound343=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound343.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:58: ( mixture )?
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount11610_static.FOLLOW_mixture_in_moleculeamount11610);
                    mixture344=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture344.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( ( cdAlphanumType | number ) ( quantity )+ )? ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity345 = null;

        ChemicalChunkerParser.mixture_return mixture346 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound347 = null;

        ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType348 = null;

        ChemicalChunkerParser.number_return number349 = null;

        ChemicalChunkerParser.quantity_return quantity350 = null;

        ChemicalChunkerParser.citation_return citation351 = null;

        ChemicalChunkerParser.quantity_return quantity352 = null;

        ChemicalChunkerParser.comma_return comma353 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node354 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure355 = null;

        ChemicalChunkerParser.mixture_return mixture356 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:2: ( ( quantity | mixture )* ( oscarCompound )+ ( ( cdAlphanumType | number ) ( quantity )+ )? ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:3: ( quantity | mixture )* ( oscarCompound )+ ( ( cdAlphanumType | number ) ( quantity )+ )? ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:3: ( quantity | mixture )*
            loop98:
            do {
                int alt98=3;
                alt98 = dfa98.predict(input);
                switch (alt98) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21620_static.FOLLOW_quantity_in_moleculeamount21620);
            	    quantity345=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity345.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21622_static.FOLLOW_mixture_in_moleculeamount21622);
            	    mixture346=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture346.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:23: ( oscarCompound )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                alt99 = dfa99.predict(input);
                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21626_static.FOLLOW_oscarCompound_in_moleculeamount21626);
            	    oscarCompound347=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound347.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:39: ( ( cdAlphanumType | number ) ( quantity )+ )?
            int alt102=2;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:40: ( cdAlphanumType | number ) ( quantity )+
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:40: ( cdAlphanumType | number )
                    int alt100=2;
                    switch ( input.LA(1) ) {
                    case 137:
                        {
                        alt100=1;
                        }
                        break;
                    case 34:
                    case 140:
                        {
                        alt100=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;
                    }

                    switch (alt100) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:41: cdAlphanumType
                            {
                            pushFollow(FOLLOW_cdAlphanumType_in_moleculeamount21632_static.FOLLOW_cdAlphanumType_in_moleculeamount21632);
                            cdAlphanumType348=cdAlphanumType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanumType348.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:56: number
                            {
                            pushFollow(FOLLOW_number_in_moleculeamount21634_static.FOLLOW_number_in_moleculeamount21634);
                            number349=number();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, number349.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:63: ( quantity )+
                    int cnt101=0;
                    loop101:
                    do {
                        int alt101=2;
                        alt101 = dfa101.predict(input);
                        switch (alt101) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
                    	    {
                    	    pushFollow(FOLLOW_quantity_in_moleculeamount21636_static.FOLLOW_quantity_in_moleculeamount21636);
                    	    quantity350=quantity();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity350.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt101 >= 1 ) break loop101;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(101, input);
                                throw eee;
                        }
                        cnt101++;
                    } while (true);


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:74: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop104:
            do {
                int alt104=5;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:75: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount21641_static.FOLLOW_citation_in_moleculeamount21641);
            	    citation351=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation351.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:84: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21643_static.FOLLOW_quantity_in_moleculeamount21643);
            	    quantity352=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity352.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:93: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_moleculeamount21645_static.FOLLOW_comma_in_moleculeamount21645);
            	    comma353=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma353.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:99: ( quantity1Node | citationStructure )
            	    int alt103=2;
            	    alt103 = dfa103.predict(input);
            	    switch (alt103) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:100: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_moleculeamount21648_static.FOLLOW_quantity1Node_in_moleculeamount21648);
            	            quantity1Node354=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node354.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:114: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_moleculeamount21650_static.FOLLOW_citationStructure_in_moleculeamount21650);
            	            citationStructure355=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure355.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:133: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21653_static.FOLLOW_mixture_in_moleculeamount21653);
            	    mixture356=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture356.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: unnamedmolecule : unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount357 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:2: ( unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1665_static.FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1665);
            unnamedmoleculeamount357=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount357.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 174:26: -> ^( UNNAMEDMOLECULE unnamedmoleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:29: ^( UNNAMEDMOLECULE unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: unnamedmoleculeamount : ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5358 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1359 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2360 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3361 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4362 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:2: ( ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt105=5;
            switch ( input.LA(1) ) {
            case 42:
                {
                alt105=1;
                }
                break;
            case 137:
                {
                int LA105_2 = input.LA(2);

                if ( (synpred299_ChemicalChunker()) ) {
                    alt105=2;
                }
                else if ( (synpred300_ChemicalChunker()) ) {
                    alt105=3;
                }
                else if ( (synpred301_ChemicalChunker()) ) {
                    alt105=4;
                }
                else if ( (true) ) {
                    alt105=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 2, input);

                    throw nvae;
                }
                }
                break;
            case 140:
                {
                int LA105_3 = input.LA(2);

                if ( (synpred299_ChemicalChunker()) ) {
                    alt105=2;
                }
                else if ( (synpred301_ChemicalChunker()) ) {
                    alt105=4;
                }
                else if ( (true) ) {
                    alt105=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 3, input);

                    throw nvae;
                }
                }
                break;
            case 34:
                {
                int LA105_4 = input.LA(2);

                if ( (synpred299_ChemicalChunker()) ) {
                    alt105=2;
                }
                else if ( (synpred300_ChemicalChunker()) ) {
                    alt105=3;
                }
                else if ( (synpred301_ChemicalChunker()) ) {
                    alt105=4;
                }
                else if ( (true) ) {
                    alt105=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 4, input);

                    throw nvae;
                }
                }
                break;
            case 128:
                {
                alt105=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }

            switch (alt105) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1682_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1682);
                    unnamedmoleculeamount5358=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5358.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:27: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1684_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1684);
                    unnamedmoleculeamount1359=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1359.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:52: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1688_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1688);
                    unnamedmoleculeamount2360=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2360.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:77: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1692_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1692);
                    unnamedmoleculeamount3361=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3361.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:100: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1694_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1694);
                    unnamedmoleculeamount4362=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4362.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, unnamedmoleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:1: unnamedmoleculeamount5 : jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp363 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity364 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum365 = null;

        ChemicalChunkerParser.quantity_return quantity366 = null;

        ChemicalChunkerParser.mixture_return mixture367 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:24: ( jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:11: jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount51714_static.FOLLOW_jjcomp_in_unnamedmoleculeamount51714);
            jjcomp363=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp363.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount51716_static.FOLLOW_nnchementity_in_unnamedmoleculeamount51716);
            nnchementity364=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity364.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:31: ( cdAlphanum )?
            int alt106=2;
            switch ( input.LA(1) ) {
                case 34:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA106_3 = input.LA(3);

                            if ( (synpred302_ChemicalChunker()) ) {
                                alt106=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt106) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount51718_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount51718);
                    cdAlphanum365=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum365.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:43: ( quantity | mixture )*
            loop107:
            do {
                int alt107=3;
                alt107 = dfa107.predict(input);
                switch (alt107) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51722_static.FOLLOW_quantity_in_unnamedmoleculeamount51722);
            	    quantity366=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity366.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount51724_static.FOLLOW_mixture_in_unnamedmoleculeamount51724);
            	    mixture367=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture367.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: unnamedmoleculeamount1 : quantity inof ( cdAlphanum | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity368 = null;

        ChemicalChunkerParser.inof_return inof369 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum370 = null;

        ChemicalChunkerParser.cd_return cd371 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:2: ( quantity inof ( cdAlphanum | cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:4: quantity inof ( cdAlphanum | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11736_static.FOLLOW_quantity_in_unnamedmoleculeamount11736);
            quantity368=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity368.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11738_static.FOLLOW_inof_in_unnamedmoleculeamount11738);
            inof369=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof369.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:18: ( cdAlphanum | cd )
            int alt108=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt108=1;
                }
                break;
            case 140:
                {
                alt108=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:19: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount11741_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount11741);
                    cdAlphanum370=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum370.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:30: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11743_static.FOLLOW_cd_in_unnamedmoleculeamount11743);
                    cd371=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd371.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: unnamedmoleculeamount2 : ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum372 = null;

        ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType373 = null;

        ChemicalChunkerParser.citation_return citation374 = null;

        ChemicalChunkerParser.quantity_return quantity375 = null;

        ChemicalChunkerParser.mixture_return mixture376 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:2: ( ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:3: ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:3: ( cdAlphanum | cdAlphanumType )
            int alt109=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt109=1;
                }
                break;
            case 137:
                {
                alt109=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }

            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount21753_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount21753);
                    cdAlphanum372=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum372.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:15: cdAlphanumType
                    {
                    pushFollow(FOLLOW_cdAlphanumType_in_unnamedmoleculeamount21755_static.FOLLOW_cdAlphanumType_in_unnamedmoleculeamount21755);
                    cdAlphanumType373=cdAlphanumType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanumType373.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:31: ( citation | quantity | mixture )*
            loop110:
            do {
                int alt110=4;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:32: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount21759_static.FOLLOW_citation_in_unnamedmoleculeamount21759);
            	    citation374=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation374.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:41: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount21761_static.FOLLOW_quantity_in_unnamedmoleculeamount21761);
            	    quantity375=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity375.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:50: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount21763_static.FOLLOW_mixture_in_unnamedmoleculeamount21763);
            	    mixture376=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture376.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity377 = null;

        ChemicalChunkerParser.inof_return inof378 = null;

        ChemicalChunkerParser.jj_return jj379 = null;

        ChemicalChunkerParser.noun_return noun380 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:2: ( quantity inof ( ( jj )? noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount31773_static.FOLLOW_quantity_in_unnamedmoleculeamount31773);
            quantity377=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity377.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount31775_static.FOLLOW_inof_in_unnamedmoleculeamount31775);
            inof378=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof378.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:17: ( ( jj )? noun )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( jj )? noun
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( jj )?
            	    int alt111=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA111_3 = input.LA(3);

            	                    if ( (synpred310_ChemicalChunker()) ) {
            	                        alt111=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt111) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount31778_static.FOLLOW_jj_in_unnamedmoleculeamount31778);
            	            jj379=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj379.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount31781_static.FOLLOW_noun_in_unnamedmoleculeamount31781);
            	    noun380=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun380.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity381 = null;

        ChemicalChunkerParser.mixture_return mixture382 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity383 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:2: ( ( quantity | mixture ) nnchementity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:3: ( quantity | mixture )
            int alt113=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                int LA113_1 = input.LA(2);

                if ( (synpred312_ChemicalChunker()) ) {
                    alt113=1;
                }
                else if ( (true) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;
                }
                }
                break;
            case 140:
                {
                int LA113_2 = input.LA(2);

                if ( (synpred312_ChemicalChunker()) ) {
                    alt113=1;
                }
                else if ( (true) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);

                    throw nvae;
                }
                }
                break;
            case 34:
                {
                alt113=1;
                }
                break;
            case 128:
                {
                alt113=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41792_static.FOLLOW_quantity_in_unnamedmoleculeamount41792);
                    quantity381=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity381.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount41794_static.FOLLOW_mixture_in_unnamedmoleculeamount41794);
                    mixture382=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture382.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount41797_static.FOLLOW_nnchementity_in_unnamedmoleculeamount41797);
            nnchementity383=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node384 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node385 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:14: ( quantity1Node | quantity2Node )
            int alt114=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt114=1;
                }
                break;
            case 34:
            case 140:
                {
                alt114=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity1808_static.FOLLOW_quantity1Node_in_quantity1808);
                    quantity1Node384=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node384.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity1810_static.FOLLOW_quantity2Node_in_quantity1810);
                    quantity2Node385=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node385.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1386 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node1819_static.FOLLOW_quantity1_in_quantity1Node1819);
            quantity1386=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1386.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 196:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb387 = null;

        ChemicalChunkerParser.measurements_return measurements388 = null;

        ChemicalChunkerParser.comma_return comma389 = null;

        ChemicalChunkerParser.measurements_return measurements390 = null;

        ChemicalChunkerParser.comma_return comma391 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase392 = null;

        ChemicalChunkerParser.stop_return stop393 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase394 = null;

        ChemicalChunkerParser.rrb_return rrb395 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity11839_static.FOLLOW_lrb_in_quantity11839);
            lrb387=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb387.getTree());
            pushFollow(FOLLOW_measurements_in_quantity11841_static.FOLLOW_measurements_in_quantity11841);
            measurements388=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements388.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:21: ( comma measurements )*
            loop115:
            do {
                int alt115=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 34:
                        case 140:
                            {
                            alt115=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt115) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11844_static.FOLLOW_comma_in_quantity11844);
            	    comma389=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma389.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity11847_static.FOLLOW_measurements_in_quantity11847);
            	    measurements390=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements390.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:44: ( comma preparationphrase )*
            loop116:
            do {
                int alt116=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    alt116=1;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11852_static.FOLLOW_comma_in_quantity11852);
            	    comma391=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma391.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11854_static.FOLLOW_preparationphrase_in_quantity11854);
            	    preparationphrase392=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase392.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:71: ( stop preparationphrase )*
            loop117:
            do {
                int alt117=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    alt117=1;
                    }
                    break;

                }

                switch (alt117) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity11859_static.FOLLOW_stop_in_quantity11859);
            	    stop393=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop393.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11861_static.FOLLOW_preparationphrase_in_quantity11861);
            	    preparationphrase394=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase394.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity11866_static.FOLLOW_rrb_in_quantity11866);
            rrb395=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb395.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2396 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node1874_static.FOLLOW_quantity2_in_quantity2Node1874);
            quantity2396=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2396.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 201:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements397 = null;

        ChemicalChunkerParser.comma_return comma398 = null;

        ChemicalChunkerParser.measurements_return measurements399 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity21895_static.FOLLOW_measurements_in_quantity21895);
            measurements397=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements397.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:18: ( comma measurements )*
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity21898_static.FOLLOW_comma_in_quantity21898);
            	    comma398=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma398.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity21901_static.FOLLOW_measurements_in_quantity21901);
            	    measurements399=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements399.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd400 = null;

        ChemicalChunkerParser.nn_return nn401 = null;

        ChemicalChunkerParser.multiple_return multiple402 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes403 = null;

        ChemicalChunkerParser.dt_return dt404 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:3: ( cd nn )?
            int alt119=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 150:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 34:
                                                case 140:
                                                    {
                                                    alt119=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements1914_static.FOLLOW_cd_in_measurements1914);
                    cd400=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd400.getTree());
                    pushFollow(FOLLOW_nn_in_measurements1916_static.FOLLOW_nn_in_measurements1916);
                    nn401=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn401.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:12: ( multiple | measurementtypes )
            int alt120=2;
            switch ( input.LA(1) ) {
            case 140:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 61:
                    case 62:
                    case 63:
                    case 66:
                    case 133:
                    case 140:
                    case 150:
                        {
                        alt120=2;
                        }
                        break;
                    case 40:
                        {
                        alt120=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;
                }

                }
                break;
            case 34:
                {
                alt120=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements1921_static.FOLLOW_multiple_in_measurements1921);
                    multiple402=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple402.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements1923_static.FOLLOW_measurementtypes_in_measurements1923);
                    measurementtypes403=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes403.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:43: ( dt )?
            int alt121=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA121_3 = input.LA(3);

                            if ( (synpred320_ChemicalChunker()) ) {
                                alt121=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt121) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements1929_static.FOLLOW_dt_in_measurements1929);
                    dt404=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt404.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd405 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode406 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes407 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple1937_static.FOLLOW_cd_in_multiple1937);
            cd405=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd405.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple1939_static.FOLLOW_cdunicode_in_multiple1939);
            cdunicode406=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode406.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:25: ( measurementtypes )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple1941_static.FOLLOW_measurementtypes_in_multiple1941);
                    measurementtypes407=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes407.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, cdunicode, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 208:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: measurementtypes : ( molar | amount | mass | volume | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar408 = null;

        ChemicalChunkerParser.amount_return amount409 = null;

        ChemicalChunkerParser.mass_return mass410 = null;

        ChemicalChunkerParser.volume_return volume411 = null;

        ChemicalChunkerParser.yield_return yield412 = null;

        ChemicalChunkerParser.percent_return percent413 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( molar | amount | mass | volume | yield | percent )
            int alt123=6;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes1966_static.FOLLOW_molar_in_measurementtypes1966);
                    molar408=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar408.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes1968_static.FOLLOW_amount_in_measurementtypes1968);
                    amount409=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount409.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes1970_static.FOLLOW_mass_in_measurementtypes1970);
                    mass410=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass410.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes1972_static.FOLLOW_volume_in_measurementtypes1972);
                    volume411=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume411.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:29: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes1974_static.FOLLOW_yield_in_measurementtypes1974);
                    yield412=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield412.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:35: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes1976_static.FOLLOW_percent_in_measurementtypes1976);
                    percent413=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent413.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: molar : ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd414 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar415 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:7: ( ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:9: ( cd )+ nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:9: ( cd )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt124=1;
                    }
                    break;

                }

                switch (alt124) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar1984_static.FOLLOW_cd_in_molar1984);
            	    cd414=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd414.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar1987_static.FOLLOW_nnmolar_in_molar1987);
            nnmolar415=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar415.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 212:21: -> ^( MOLAR ( cd )+ nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:24: ^( MOLAR ( cd )+ nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd416 = null;

        ChemicalChunkerParser.nnamount_return nnamount417 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:10: ( cd )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt125=1;
                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2008_static.FOLLOW_cd_in_amount2008);
            	    cd416=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd416.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2011_static.FOLLOW_nnamount_in_amount2011);
            nnamount417=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount417.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 213:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd418 = null;

        ChemicalChunkerParser.nnmass_return nnmass419 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:8: ( cd )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt126=1;
                    }
                    break;

                }

                switch (alt126) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2032_static.FOLLOW_cd_in_mass2032);
            	    cd418=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd418.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2035_static.FOLLOW_nnmass_in_mass2035);
            nnmass419=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass419.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd420 = null;

        ChemicalChunkerParser.nnvol_return nnvol421 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:10: ( cd )+
            int cnt127=0;
            loop127:
            do {
                int alt127=2;
                switch ( input.LA(1) ) {
                case 140:
                    {
                    alt127=1;
                    }
                    break;

                }

                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2055_static.FOLLOW_cd_in_volume2055);
            	    cd420=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd420.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt127 >= 1 ) break loop127;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(127, input);
                        throw eee;
                }
                cnt127++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2058_static.FOLLOW_nnvol_in_volume2058);
            nnvol421=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol421.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 215:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:1: yield : percent nnyield -> ^( YIELD percent nnyield ) ;
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent422 = null;

        ChemicalChunkerParser.nnyield_return nnyield423 = null;


        RewriteRuleSubtreeStream stream_percent=new RewriteRuleSubtreeStream(adaptor,"rule percent");
        RewriteRuleSubtreeStream stream_nnyield=new RewriteRuleSubtreeStream(adaptor,"rule nnyield");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:6: ( percent nnyield -> ^( YIELD percent nnyield ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:8: percent nnyield
            {
            pushFollow(FOLLOW_percent_in_yield2078_static.FOLLOW_percent_in_yield2078);
            percent422=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percent.add(percent422.getTree());
            pushFollow(FOLLOW_nnyield_in_yield2080_static.FOLLOW_nnyield_in_yield2080);
            nnyield423=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnyield.add(nnyield423.getTree());


            // AST REWRITE
            // elements: nnyield, percent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 216:24: -> ^( YIELD percent nnyield )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:27: ^( YIELD percent nnyield )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_percent.nextTree());
                adaptor.addChild(root_1, stream_nnyield.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:1: percent : number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number424 = null;

        ChemicalChunkerParser.nn_return nn425 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent426 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:9: ( number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:11: number ( nn )? nnpercent
            {
            pushFollow(FOLLOW_number_in_percent2098_static.FOLLOW_number_in_percent2098);
            number424=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number424.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:18: ( nn )?
            int alt128=2;
            switch ( input.LA(1) ) {
                case 150:
                    {
                    alt128=1;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2100_static.FOLLOW_nn_in_percent2100);
                    nn425=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn425.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2103_static.FOLLOW_nnpercent_in_percent2103);
            nnpercent426=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent426.getTree());


            // AST REWRITE
            // elements: nnpercent, nn, number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:32: -> ^( PERCENT number ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:35: ^( PERCENT number ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_number.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio427 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3428 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2429 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1430 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:10: ( mixtureRatio )?
            int alt129=2;
            switch ( input.LA(1) ) {
                case 140:
                    {
                    alt129=1;
                    }
                    break;
            }

            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture2126_static.FOLLOW_mixtureRatio_in_mixture2126);
                    mixtureRatio427=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio427.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt130=3;
            switch ( input.LA(1) ) {
            case 137:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 62:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 127:
                    case 128:
                    case 131:
                    case 132:
                    case 134:
                    case 137:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 162:
                    case 163:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                        {
                        alt130=3;
                        }
                        break;
                    case 133:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 138:
                                {
                                alt130=1;
                                }
                                break;
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 38:
                            case 39:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 62:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 127:
                            case 128:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 137:
                            case 140:
                            case 141:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 162:
                            case 163:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                                {
                                alt130=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 130, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 130, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }

                }
                break;
            case 128:
                {
                alt130=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2131_static.FOLLOW_mixtureStructure3_in_mixture2131);
                    mixtureStructure3428=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3428.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2133_static.FOLLOW_mixtureStructure2_in_mixture2133);
                    mixtureStructure2429=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2429.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2135_static.FOLLOW_mixtureStructure1_in_mixture2135);
                    mixtureStructure1430=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1430.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureRatio, mixtureStructure2, mixtureStructure3, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 219:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma431 = null;

        ChemicalChunkerParser.lrb_return lrb432 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent433 = null;

        ChemicalChunkerParser.rrb_return rrb434 = null;

        ChemicalChunkerParser.comma_return comma435 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22162_static.FOLLOW_comma_in_mixtureStructure22162);
            comma431=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma431.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22164_static.FOLLOW_lrb_in_mixtureStructure22164);
            lrb432=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb432.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22166_static.FOLLOW_mixtureContent_in_mixtureStructure22166);
            mixtureContent433=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent433.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22168_static.FOLLOW_rrb_in_mixtureStructure22168);
            rrb434=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb434.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22170_static.FOLLOW_comma_in_mixtureStructure22170);
            comma435=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma435.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb436 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent437 = null;

        ChemicalChunkerParser.rrb_return rrb438 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12176_static.FOLLOW_lrb_in_mixtureStructure12176);
            lrb436=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb436.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure12178_static.FOLLOW_mixtureContent_in_mixtureStructure12178);
            mixtureContent437=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent437.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure12180_static.FOLLOW_rrb_in_mixtureStructure12180);
            rrb438=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb438.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb439 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent440 = null;

        ChemicalChunkerParser.rrb_return rrb441 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32188_static.FOLLOW_lrb_in_mixtureStructure32188);
            lrb439=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb439.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure32191_static.FOLLOW_nnpercent_in_mixtureStructure32191);
            nnpercent440=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent440.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32193_static.FOLLOW_rrb_in_mixtureStructure32193);
            rrb441=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb441.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:1: mixtureRatio : cd colon ( cd | cdAlphanum ) ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);
        int mixtureRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd442 = null;

        ChemicalChunkerParser.colon_return colon443 = null;

        ChemicalChunkerParser.cd_return cd444 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum445 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:2: ( cd colon ( cd | cdAlphanum ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:4: cd colon ( cd | cdAlphanum )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio2202_static.FOLLOW_cd_in_mixtureRatio2202);
            cd442=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd442.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio2204_static.FOLLOW_colon_in_mixtureRatio2204);
            colon443=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon443.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:13: ( cd | cdAlphanum )
            int alt131=2;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt131=1;
                }
                break;
            case 34:
                {
                alt131=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }

            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:14: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureRatio2207_static.FOLLOW_cd_in_mixtureRatio2207);
                    cd444=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd444.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:17: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_mixtureRatio2209_static.FOLLOW_cdAlphanum_in_mixtureRatio2209);
                    cdAlphanum445=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum445.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, mixtureRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:1: mixtureContent : ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw446 = null;

        ChemicalChunkerParser.verb_return verb447 = null;

        ChemicalChunkerParser.nn_return nn448 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node449 = null;

        ChemicalChunkerParser.md_return md450 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent451 = null;

        ChemicalChunkerParser.stop_return stop452 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound453 = null;

        ChemicalChunkerParser.molecule_return molecule454 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule455 = null;

        ChemicalChunkerParser.dash_return dash456 = null;

        ChemicalChunkerParser.sym_return sym457 = null;

        ChemicalChunkerParser.cd_return cd458 = null;

        ChemicalChunkerParser.noun_return noun459 = null;

        ChemicalChunkerParser.inAll_return inAll460 = null;

        ChemicalChunkerParser.cd_return cd461 = null;

        ChemicalChunkerParser.comma_return comma462 = null;

        ChemicalChunkerParser.adj_return adj463 = null;

        ChemicalChunkerParser.colon_return colon464 = null;

        ChemicalChunkerParser.stop_return stop465 = null;

        ChemicalChunkerParser.minimixture_return minimixture466 = null;

        ChemicalChunkerParser.fw_return fw467 = null;

        ChemicalChunkerParser.verb_return verb468 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node469 = null;

        ChemicalChunkerParser.nnyield_return nnyield470 = null;

        ChemicalChunkerParser.md_return md471 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent472 = null;

        ChemicalChunkerParser.stop_return stop473 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound474 = null;

        ChemicalChunkerParser.molecule_return molecule475 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule476 = null;

        ChemicalChunkerParser.dash_return dash477 = null;

        ChemicalChunkerParser.sym_return sym478 = null;

        ChemicalChunkerParser.cd_return cd479 = null;

        ChemicalChunkerParser.noun_return noun480 = null;

        ChemicalChunkerParser.inAll_return inAll481 = null;

        ChemicalChunkerParser.cd_return cd482 = null;

        ChemicalChunkerParser.comma_return comma483 = null;

        ChemicalChunkerParser.adj_return adj484 = null;

        ChemicalChunkerParser.colon_return colon485 = null;

        ChemicalChunkerParser.stop_return stop486 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:15: ( ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:19: ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:19: ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )
            int alt132=20;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent2219_static.FOLLOW_fw_in_mixtureContent2219);
                    fw446=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw446.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2221_static.FOLLOW_verb_in_mixtureContent2221);
                    verb447=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb447.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent2223_static.FOLLOW_nn_in_mixtureContent2223);
                    nn448=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn448.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:31: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2225_static.FOLLOW_quantity2Node_in_mixtureContent2225);
                    quantity2Node449=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node449.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:45: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2227_static.FOLLOW_md_in_mixtureContent2227);
                    md450=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md450.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent2229_static.FOLLOW_nnpercent_in_mixtureContent2229);
                    nnpercent451=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent451.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:58: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2231_static.FOLLOW_stop_in_mixtureContent2231);
                    stop452=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop452.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:63: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2233_static.FOLLOW_oscarCompound_in_mixtureContent2233);
                    oscarCompound453=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound453.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:77: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent2235_static.FOLLOW_molecule_in_mixtureContent2235);
                    molecule454=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule454.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:86: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2237_static.FOLLOW_unnamedmolecule_in_mixtureContent2237);
                    unnamedmolecule455=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule455.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:102: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2239_static.FOLLOW_dash_in_mixtureContent2239);
                    dash456=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash456.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:107: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent2241_static.FOLLOW_sym_in_mixtureContent2241);
                    sym457=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym457.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:111: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2243_static.FOLLOW_cd_in_mixtureContent2243);
                    cd458=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd458.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:114: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2245_static.FOLLOW_noun_in_mixtureContent2245);
                    noun459=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun459.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:119: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2247_static.FOLLOW_inAll_in_mixtureContent2247);
                    inAll460=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll460.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:125: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2249_static.FOLLOW_cd_in_mixtureContent2249);
                    cd461=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd461.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:128: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2251_static.FOLLOW_comma_in_mixtureContent2251);
                    comma462=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma462.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:134: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2253_static.FOLLOW_adj_in_mixtureContent2253);
                    adj463=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj463.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:138: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2255_static.FOLLOW_colon_in_mixtureContent2255);
                    colon464=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon464.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:144: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2257_static.FOLLOW_stop_in_mixtureContent2257);
                    stop465=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop465.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:150: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt133=0;
            loop133:
            do {
                int alt133=22;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:151: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent2261_static.FOLLOW_minimixture_in_mixtureContent2261);
            	    minimixture466=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture466.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:163: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent2263_static.FOLLOW_fw_in_mixtureContent2263);
            	    fw467=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw467.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:166: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2265_static.FOLLOW_verb_in_mixtureContent2265);
            	    verb468=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb468.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:171: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2267_static.FOLLOW_quantity2Node_in_mixtureContent2267);
            	    quantity2Node469=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node469.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:185: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent2269_static.FOLLOW_nnyield_in_mixtureContent2269);
            	    nnyield470=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield470.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:193: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2271_static.FOLLOW_md_in_mixtureContent2271);
            	    md471=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md471.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:196: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent2273_static.FOLLOW_nnpercent_in_mixtureContent2273);
            	    nnpercent472=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent472.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:206: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2275_static.FOLLOW_stop_in_mixtureContent2275);
            	    stop473=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop473.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:211: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2277_static.FOLLOW_oscarCompound_in_mixtureContent2277);
            	    oscarCompound474=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound474.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:225: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent2279_static.FOLLOW_molecule_in_mixtureContent2279);
            	    molecule475=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule475.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:234: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2281_static.FOLLOW_unnamedmolecule_in_mixtureContent2281);
            	    unnamedmolecule476=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule476.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:250: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2283_static.FOLLOW_dash_in_mixtureContent2283);
            	    dash477=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash477.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:255: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent2285_static.FOLLOW_sym_in_mixtureContent2285);
            	    sym478=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym478.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:259: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2287_static.FOLLOW_cd_in_mixtureContent2287);
            	    cd479=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd479.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:262: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2289_static.FOLLOW_noun_in_mixtureContent2289);
            	    noun480=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun480.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:267: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2291_static.FOLLOW_inAll_in_mixtureContent2291);
            	    inAll481=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll481.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:273: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2293_static.FOLLOW_cd_in_mixtureContent2293);
            	    cd482=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd482.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:276: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent2295_static.FOLLOW_comma_in_mixtureContent2295);
            	    comma483=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma483.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:282: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2297_static.FOLLOW_adj_in_mixtureContent2297);
            	    adj484=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj484.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:286: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2299_static.FOLLOW_colon_in_mixtureContent2299);
            	    colon485=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon485.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:292: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2301_static.FOLLOW_stop_in_mixtureContent2301);
            	    stop486=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop486.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2487 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1488 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt134=2;
            switch ( input.LA(1) ) {
            case 128:
                {
                alt134=1;
                }
                break;
            case 137:
                {
                alt134=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture2312_static.FOLLOW_mixtureStructure2_in_minimixture2312);
                    mixtureStructure2487=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2487.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture2314_static.FOLLOW_mixtureStructure1_in_minimixture2314);
                    mixtureStructure1488=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1488.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 229:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);
        int minimixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma489 = null;

        ChemicalChunkerParser.lrb_return lrb490 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent491 = null;

        ChemicalChunkerParser.rrb_return rrb492 = null;

        ChemicalChunkerParser.comma_return comma493 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:22: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure22335_static.FOLLOW_comma_in_minimixtureStructure22335);
            comma489=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma489.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure22337_static.FOLLOW_lrb_in_minimixtureStructure22337);
            lrb490=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb490.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure22339_static.FOLLOW_mixtureContent_in_minimixtureStructure22339);
            mixtureContent491=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent491.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure22341_static.FOLLOW_rrb_in_minimixtureStructure22341);
            rrb492=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb492.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure22343_static.FOLLOW_comma_in_minimixtureStructure22343);
            comma493=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma493.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, minimixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);
        int minimixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb494 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent495 = null;

        ChemicalChunkerParser.rrb_return rrb496 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:22: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure12350_static.FOLLOW_lrb_in_minimixtureStructure12350);
            lrb494=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb494.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure12352_static.FOLLOW_mixtureContent_in_minimixtureStructure12352);
            mixtureContent495=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent495.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure12354_static.FOLLOW_rrb_in_minimixtureStructure12354);
            rrb496=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb496.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, minimixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:1: minimixtureContent : ( fw | nn | verb | quantity2Node | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( fw | verb | quantity2Node | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);
        int minimixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw497 = null;

        ChemicalChunkerParser.nn_return nn498 = null;

        ChemicalChunkerParser.verb_return verb499 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node500 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent501 = null;

        ChemicalChunkerParser.md_return md502 = null;

        ChemicalChunkerParser.stop_return stop503 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound504 = null;

        ChemicalChunkerParser.molecule_return molecule505 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule506 = null;

        ChemicalChunkerParser.dash_return dash507 = null;

        ChemicalChunkerParser.sym_return sym508 = null;

        ChemicalChunkerParser.cd_return cd509 = null;

        ChemicalChunkerParser.noun_return noun510 = null;

        ChemicalChunkerParser.inAll_return inAll511 = null;

        ChemicalChunkerParser.cd_return cd512 = null;

        ChemicalChunkerParser.comma_return comma513 = null;

        ChemicalChunkerParser.adj_return adj514 = null;

        ChemicalChunkerParser.colon_return colon515 = null;

        ChemicalChunkerParser.stop_return stop516 = null;

        ChemicalChunkerParser.fw_return fw517 = null;

        ChemicalChunkerParser.verb_return verb518 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node519 = null;

        ChemicalChunkerParser.nnyield_return nnyield520 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent521 = null;

        ChemicalChunkerParser.md_return md522 = null;

        ChemicalChunkerParser.stop_return stop523 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound524 = null;

        ChemicalChunkerParser.molecule_return molecule525 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule526 = null;

        ChemicalChunkerParser.dash_return dash527 = null;

        ChemicalChunkerParser.sym_return sym528 = null;

        ChemicalChunkerParser.cd_return cd529 = null;

        ChemicalChunkerParser.noun_return noun530 = null;

        ChemicalChunkerParser.inAll_return inAll531 = null;

        ChemicalChunkerParser.cd_return cd532 = null;

        ChemicalChunkerParser.comma_return comma533 = null;

        ChemicalChunkerParser.adj_return adj534 = null;

        ChemicalChunkerParser.colon_return colon535 = null;

        ChemicalChunkerParser.stop_return stop536 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:19: ( ( fw | nn | verb | quantity2Node | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( fw | verb | quantity2Node | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:23: ( fw | nn | verb | quantity2Node | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( fw | verb | quantity2Node | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:23: ( fw | nn | verb | quantity2Node | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )
            int alt135=20;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent2363_static.FOLLOW_fw_in_minimixtureContent2363);
                    fw497=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw497.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:27: nn
                    {
                    pushFollow(FOLLOW_nn_in_minimixtureContent2365_static.FOLLOW_nn_in_minimixtureContent2365);
                    nn498=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn498.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:30: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent2367_static.FOLLOW_verb_in_minimixtureContent2367);
                    verb499=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb499.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:35: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_minimixtureContent2369_static.FOLLOW_quantity2Node_in_minimixtureContent2369);
                    quantity2Node500=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node500.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:49: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_minimixtureContent2371_static.FOLLOW_nnpercent_in_minimixtureContent2371);
                    nnpercent501=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent501.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:59: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent2373_static.FOLLOW_md_in_minimixtureContent2373);
                    md502=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md502.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:62: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent2375_static.FOLLOW_stop_in_minimixtureContent2375);
                    stop503=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop503.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:67: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent2377_static.FOLLOW_oscarCompound_in_minimixtureContent2377);
                    oscarCompound504=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound504.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:81: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent2379_static.FOLLOW_molecule_in_minimixtureContent2379);
                    molecule505=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule505.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:90: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent2381_static.FOLLOW_unnamedmolecule_in_minimixtureContent2381);
                    unnamedmolecule506=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule506.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:106: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent2383_static.FOLLOW_dash_in_minimixtureContent2383);
                    dash507=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash507.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:111: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent2385_static.FOLLOW_sym_in_minimixtureContent2385);
                    sym508=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym508.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:115: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent2387_static.FOLLOW_cd_in_minimixtureContent2387);
                    cd509=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd509.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:118: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent2389_static.FOLLOW_noun_in_minimixtureContent2389);
                    noun510=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun510.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:123: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent2391_static.FOLLOW_inAll_in_minimixtureContent2391);
                    inAll511=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll511.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:129: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent2393_static.FOLLOW_cd_in_minimixtureContent2393);
                    cd512=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd512.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:132: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent2395_static.FOLLOW_comma_in_minimixtureContent2395);
                    comma513=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma513.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:138: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent2397_static.FOLLOW_adj_in_minimixtureContent2397);
                    adj514=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj514.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:142: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent2399_static.FOLLOW_colon_in_minimixtureContent2399);
                    colon515=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon515.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:148: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent2401_static.FOLLOW_stop_in_minimixtureContent2401);
                    stop516=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop516.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:154: ( fw | verb | quantity2Node | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt136=0;
            loop136:
            do {
                int alt136=21;
                alt136 = dfa136.predict(input);
                switch (alt136) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:155: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent2405_static.FOLLOW_fw_in_minimixtureContent2405);
            	    fw517=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw517.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:158: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent2407_static.FOLLOW_verb_in_minimixtureContent2407);
            	    verb518=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb518.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:163: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_minimixtureContent2409_static.FOLLOW_quantity2Node_in_minimixtureContent2409);
            	    quantity2Node519=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node519.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:177: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent2411_static.FOLLOW_nnyield_in_minimixtureContent2411);
            	    nnyield520=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield520.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:185: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_minimixtureContent2413_static.FOLLOW_nnpercent_in_minimixtureContent2413);
            	    nnpercent521=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent521.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:195: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent2415_static.FOLLOW_md_in_minimixtureContent2415);
            	    md522=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md522.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:198: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent2417_static.FOLLOW_stop_in_minimixtureContent2417);
            	    stop523=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop523.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:203: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent2419_static.FOLLOW_oscarCompound_in_minimixtureContent2419);
            	    oscarCompound524=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound524.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:217: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent2421_static.FOLLOW_molecule_in_minimixtureContent2421);
            	    molecule525=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule525.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:226: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent2423_static.FOLLOW_unnamedmolecule_in_minimixtureContent2423);
            	    unnamedmolecule526=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule526.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:242: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent2425_static.FOLLOW_dash_in_minimixtureContent2425);
            	    dash527=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash527.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:247: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent2427_static.FOLLOW_sym_in_minimixtureContent2427);
            	    sym528=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym528.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:251: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent2429_static.FOLLOW_cd_in_minimixtureContent2429);
            	    cd529=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd529.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:254: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent2431_static.FOLLOW_noun_in_minimixtureContent2431);
            	    noun530=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun530.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:259: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent2433_static.FOLLOW_inAll_in_minimixtureContent2433);
            	    inAll531=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll531.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:265: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent2435_static.FOLLOW_cd_in_minimixtureContent2435);
            	    cd532=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd532.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:268: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent2437_static.FOLLOW_comma_in_minimixtureContent2437);
            	    comma533=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma533.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:274: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent2439_static.FOLLOW_adj_in_minimixtureContent2439);
            	    adj534=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj534.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:278: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent2441_static.FOLLOW_colon_in_minimixtureContent2441);
            	    colon535=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon535.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:284: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent2443_static.FOLLOW_stop_in_minimixtureContent2443);
            	    stop536=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop536.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, minimixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: method : ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral537 = null;

        ChemicalChunkerParser.nn_return nn538 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod539 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum540 = null;

        ChemicalChunkerParser.cd_return cd541 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:7: ( ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:5: ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:5: ( nngeneral | nn )?
            int alt137=3;
            switch ( input.LA(1) ) {
                case 70:
                    {
                    alt137=1;
                    }
                    break;
                case 150:
                    {
                    alt137=2;
                    }
                    break;
            }

            switch (alt137) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2458_static.FOLLOW_nngeneral_in_method2458);
                    nngeneral537=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral537.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2460_static.FOLLOW_nn_in_method2460);
                    nn538=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn538.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2464_static.FOLLOW_nnmethod_in_method2464);
            nnmethod539=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod539.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:30: ( cdAlphanum | cd )?
            int alt138=3;
            switch ( input.LA(1) ) {
                case 34:
                    {
                    alt138=1;
                    }
                    break;
                case 140:
                    {
                    alt138=2;
                    }
                    break;
            }

            switch (alt138) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:31: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_method2467_static.FOLLOW_cdAlphanum_in_method2467);
                    cdAlphanum540=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum540.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:42: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2469_static.FOLLOW_cd_in_method2469);
                    cd541=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd541.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:1: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);
        int brackets_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb542 = null;

        ChemicalChunkerParser.rrb_return rrb543 = null;

        ChemicalChunkerParser.lsqb_return lsqb544 = null;

        ChemicalChunkerParser.rsqb_return rsqb545 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:9: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:2: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:2: ( lrb | rrb | lsqb | rsqb )+
            int cnt139=0;
            loop139:
            do {
                int alt139=5;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt139=1;
                    }
                    break;
                case 138:
                    {
                    alt139=2;
                    }
                    break;
                case 134:
                    {
                    alt139=3;
                    }
                    break;
                case 135:
                    {
                    alt139=4;
                    }
                    break;

                }

                switch (alt139) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:3: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2481_static.FOLLOW_lrb_in_brackets2481);
            	    lrb542=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb542.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:7: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2483_static.FOLLOW_rrb_in_brackets2483);
            	    rrb543=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb543.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:11: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2485_static.FOLLOW_lsqb_in_brackets2485);
            	    lsqb544=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb544.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:16: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2487_static.FOLLOW_rsqb_in_brackets2487);
            	    rsqb545=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb545.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, brackets_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class cdAlphanumType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanumType"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:1: cdAlphanumType : lrb ( cdAlphanum | cd ) rrb ;
    public final ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanumType_return retval = new ChemicalChunkerParser.cdAlphanumType_return();
        retval.start = input.LT(1);
        int cdAlphanumType_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb546 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum547 = null;

        ChemicalChunkerParser.cd_return cd548 = null;

        ChemicalChunkerParser.rrb_return rrb549 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:16: ( lrb ( cdAlphanum | cd ) rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:19: lrb ( cdAlphanum | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_cdAlphanumType2498_static.FOLLOW_lrb_in_cdAlphanumType2498);
            lrb546=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb546.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:23: ( cdAlphanum | cd )
            int alt140=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt140=1;
                }
                break;
            case 140:
                {
                alt140=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:24: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_cdAlphanumType2501_static.FOLLOW_cdAlphanum_in_cdAlphanumType2501);
                    cdAlphanum547=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum547.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:35: cd
                    {
                    pushFollow(FOLLOW_cd_in_cdAlphanumType2503_static.FOLLOW_cd_in_cdAlphanumType2503);
                    cd548=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd548.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_cdAlphanumType2506_static.FOLLOW_rrb_in_cdAlphanumType2506);
            rrb549=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb549.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, cdAlphanumType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanumType"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv550 = null;

        ChemicalChunkerParser.adj_return adj551 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:2: ( adv | adj )
            int alt141=2;
            switch ( input.LA(1) ) {
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt141=1;
                }
                break;
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt141=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2514_static.FOLLOW_adv_in_advAdj2514);
                    adv550=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv550.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2516_static.FOLLOW_adj_in_advAdj2516);
                    adj551=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj551.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:1: range : number dash number ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number552 = null;

        ChemicalChunkerParser.dash_return dash553 = null;

        ChemicalChunkerParser.number_return number554 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:6: ( number dash number )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:8: number dash number
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_number_in_range2523_static.FOLLOW_number_in_range2523);
            number552=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number552.getTree());
            pushFollow(FOLLOW_dash_in_range2525_static.FOLLOW_dash_in_range2525);
            dash553=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash553.getTree());
            pushFollow(FOLLOW_number_in_range2527_static.FOLLOW_number_in_range2527);
            number554=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number554.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure555 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2534_static.FOLLOW_cycleStructure_in_cycles2534);
            cycleStructure555=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure555.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 246:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd556 = null;

        ChemicalChunkerParser.dashNN_return dashNN557 = null;

        ChemicalChunkerParser.nncycle_return nncycle558 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2551_static.FOLLOW_cd_in_cycleStructure2551);
            cd556=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd556.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:21: ( dashNN )?
            int alt142=2;
            switch ( input.LA(1) ) {
                case 35:
                case 36:
                case 41:
                case 140:
                case 145:
                case 146:
                case 147:
                case 150:
                    {
                    alt142=1;
                    }
                    break;
            }

            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2553_static.FOLLOW_dashNN_in_cycleStructure2553);
                    dashNN557=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN557.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2556_static.FOLLOW_nncycle_in_cycleStructure2556);
            nncycle558=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle558.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj559 = null;

        ChemicalChunkerParser.nn_return nn560 = null;

        ChemicalChunkerParser.cd_return cd561 = null;

        ChemicalChunkerParser.dash_return dash562 = null;

        ChemicalChunkerParser.adj_return adj563 = null;

        ChemicalChunkerParser.nn_return nn564 = null;

        ChemicalChunkerParser.cd_return cd565 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:10: ( adj | nn | cd )
            int alt143=3;
            switch ( input.LA(1) ) {
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt143=1;
                }
                break;
            case 150:
                {
                alt143=2;
                }
                break;
            case 140:
                {
                alt143=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2564_static.FOLLOW_adj_in_dashNN2564);
                    adj559=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj559.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2566_static.FOLLOW_nn_in_dashNN2566);
                    nn560=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn560.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2568_static.FOLLOW_cd_in_dashNN2568);
                    cd561=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd561.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:22: ( dash ( adj | nn | cd ) )*
            loop145:
            do {
                int alt145=2;
                switch ( input.LA(1) ) {
                case 131:
                    {
                    alt145=1;
                    }
                    break;

                }

                switch (alt145) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2572_static.FOLLOW_dash_in_dashNN2572);
            	    dash562=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash562.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:28: ( adj | nn | cd )
            	    int alt144=3;
            	    switch ( input.LA(1) ) {
            	    case 35:
            	    case 36:
            	    case 41:
            	    case 145:
            	    case 146:
            	    case 147:
            	        {
            	        alt144=1;
            	        }
            	        break;
            	    case 150:
            	        {
            	        alt144=2;
            	        }
            	        break;
            	    case 140:
            	        {
            	        alt144=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt144) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2575_static.FOLLOW_adj_in_dashNN2575);
            	            adj563=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj563.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN2577_static.FOLLOW_nn_in_dashNN2577);
            	            nn564=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn564.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN2579_static.FOLLOW_cd_in_dashNN2579);
            	            cd565=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd565.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:1: ratio : ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio566 = null;

        ChemicalChunkerParser.nounratio_return nounratio567 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:7: ( ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:9: ( numberratio | nounratio )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:9: ( numberratio | nounratio )
            int alt146=2;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio2590_static.FOLLOW_numberratio_in_ratio2590);
                    numberratio566=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio566.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio2592_static.FOLLOW_nounratio_in_ratio2592);
                    nounratio567=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio567.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:33: -> ^( RATIO ( numberratio )? ( nounratio )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:36: ^( RATIO ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:44: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:57: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: numberratio : cd ( colon cdAlphanum | cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);
        int numberratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd568 = null;

        ChemicalChunkerParser.colon_return colon569 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum570 = null;

        ChemicalChunkerParser.cd_return cd571 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:13: ( cd ( colon cdAlphanum | cd )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:16: cd ( colon cdAlphanum | cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio2615_static.FOLLOW_cd_in_numberratio2615);
            cd568=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd568.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:19: ( colon cdAlphanum | cd )+
            int cnt147=0;
            loop147:
            do {
                int alt147=3;
                alt147 = dfa147.predict(input);
                switch (alt147) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:20: colon cdAlphanum
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio2618_static.FOLLOW_colon_in_numberratio2618);
            	    colon569=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon569.getTree());
            	    pushFollow(FOLLOW_cdAlphanum_in_numberratio2620_static.FOLLOW_cdAlphanum_in_numberratio2620);
            	    cdAlphanum570=cdAlphanum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum570.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:37: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_numberratio2622_static.FOLLOW_cd_in_numberratio2622);
            	    cd571=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd571.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, numberratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun572 = null;

        ChemicalChunkerParser.colon_return colon573 = null;

        ChemicalChunkerParser.noun_return noun574 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio2634_static.FOLLOW_noun_in_nounratio2634);
            noun572=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun572.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:11: ( colon noun )+
            int cnt148=0;
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 127:
                    {
                    int LA148_2 = input.LA(2);

                    if ( (synpred435_ChemicalChunker()) ) {
                        alt148=1;
                    }


                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio2638_static.FOLLOW_colon_in_nounratio2638);
            	    colon573=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon573.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio2640_static.FOLLOW_noun_in_nounratio2640);
            	    noun574=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun574.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt148 >= 1 ) break loop148;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(148, input);
                        throw eee;
                }
                cnt148++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:1: reference : lsqb cd rsqb ;
    public final ChemicalChunkerParser.reference_return reference() throws RecognitionException {
        ChemicalChunkerParser.reference_return retval = new ChemicalChunkerParser.reference_return();
        retval.start = input.LT(1);
        int reference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb575 = null;

        ChemicalChunkerParser.cd_return cd576 = null;

        ChemicalChunkerParser.rsqb_return rsqb577 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:2: ( lsqb cd rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:4: lsqb cd rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_reference2653_static.FOLLOW_lsqb_in_reference2653);
            lsqb575=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb575.getTree());
            pushFollow(FOLLOW_cd_in_reference2655_static.FOLLOW_cd_in_reference2655);
            cd576=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd576.getTree());
            pushFollow(FOLLOW_rsqb_in_reference2657_static.FOLLOW_rsqb_in_reference2657);
            rsqb577=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb577.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure578 = null;

        ChemicalChunkerParser.comma_return comma579 = null;

        ChemicalChunkerParser.citationContent_return citationContent580 = null;

        ChemicalChunkerParser.comma_return comma581 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:9: ( citationStructure | comma citationContent comma )
            int alt149=2;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt149=1;
                }
                break;
            case 128:
                {
                alt149=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation2664_static.FOLLOW_citationStructure_in_citation2664);
                    citationStructure578=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure578.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation2666_static.FOLLOW_comma_in_citation2666);
                    comma579=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma579.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation2668_static.FOLLOW_citationContent_in_citation2668);
                    citationContent580=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent580.getTree());
                    pushFollow(FOLLOW_comma_in_citation2670_static.FOLLOW_comma_in_citation2670);
                    comma581=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma581.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent582 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure2678_static.FOLLOW_citationContent_in_citationStructure2678);
            citationContent582=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent582.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 258:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb583 = null;

        ChemicalChunkerParser.nnp_return nnp584 = null;

        ChemicalChunkerParser.fw_return fw585 = null;

        ChemicalChunkerParser.cd_return cd586 = null;

        ChemicalChunkerParser.conjunction_return conjunction587 = null;

        ChemicalChunkerParser.nnp_return nnp588 = null;

        ChemicalChunkerParser.fw_return fw589 = null;

        ChemicalChunkerParser.cd_return cd590 = null;

        ChemicalChunkerParser.conjunction_return conjunction591 = null;

        ChemicalChunkerParser.rrb_return rrb592 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent2694_static.FOLLOW_lrb_in_citationContent2694);
            lrb583=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb583.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:24: ( nnp | fw | cd | conjunction )
            int alt150=4;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt150=1;
                }
                break;
            case 143:
                {
                alt150=2;
                }
                break;
            case 140:
                {
                alt150=3;
                }
                break;
            case 128:
            case 139:
                {
                alt150=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent2697_static.FOLLOW_nnp_in_citationContent2697);
                    nnp584=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp584.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent2699_static.FOLLOW_fw_in_citationContent2699);
                    fw585=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw585.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent2701_static.FOLLOW_cd_in_citationContent2701);
                    cd586=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd586.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent2703_static.FOLLOW_conjunction_in_citationContent2703);
                    conjunction587=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction587.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:48: ( nnp | fw | cd | conjunction )+
            int cnt151=0;
            loop151:
            do {
                int alt151=5;
                switch ( input.LA(1) ) {
                case 152:
                    {
                    alt151=1;
                    }
                    break;
                case 143:
                    {
                    alt151=2;
                    }
                    break;
                case 140:
                    {
                    alt151=3;
                    }
                    break;
                case 128:
                case 139:
                    {
                    alt151=4;
                    }
                    break;

                }

                switch (alt151) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent2707_static.FOLLOW_nnp_in_citationContent2707);
            	    nnp588=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp588.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent2709_static.FOLLOW_fw_in_citationContent2709);
            	    fw589=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw589.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent2711_static.FOLLOW_cd_in_citationContent2711);
            	    cd590=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd590.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent2713_static.FOLLOW_conjunction_in_citationContent2713);
            	    conjunction591=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction591.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt151 >= 1 ) break loop151;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(151, input);
                        throw eee;
                }
                cnt151++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent2717_static.FOLLOW_rrb_in_citationContent2717);
            rrb592=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb592.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj593 = null;

        ChemicalChunkerParser.jjr_return jjr594 = null;

        ChemicalChunkerParser.jjs_return jjs595 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj596 = null;

        ChemicalChunkerParser.jjchem_return jjchem597 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn598 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt152=6;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt152=1;
                }
                break;
            case 146:
                {
                alt152=2;
                }
                break;
            case 147:
                {
                alt152=3;
                }
                break;
            case 35:
                {
                alt152=4;
                }
                break;
            case 41:
                {
                alt152=5;
                }
                break;
            case 36:
                {
                alt152=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj2726_static.FOLLOW_jj_in_adj2726);
                    jj593=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj593.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj2728_static.FOLLOW_jjr_in_adj2728);
                    jjr594=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr594.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj2730_static.FOLLOW_jjs_in_adj2730);
                    jjs595=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs595.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj2732_static.FOLLOW_oscarcj_in_adj2732);
                    oscarcj596=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj596.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj2734_static.FOLLOW_jjchem_in_adj2734);
                    jjchem597=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem597.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj2736_static.FOLLOW_oscarrn_in_adj2736);
                    oscarrn598=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn598.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb599 = null;

        ChemicalChunkerParser.rbr_return rbr600 = null;

        ChemicalChunkerParser.rp_return rp601 = null;

        ChemicalChunkerParser.rbs_return rbs602 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:5: ( rb | rbr | rp | rbs )
            int alt153=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt153=1;
                }
                break;
            case 159:
                {
                alt153=2;
                }
                break;
            case 161:
                {
                alt153=3;
                }
                break;
            case 160:
                {
                alt153=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv2743_static.FOLLOW_rb_in_adv2743);
                    rb599=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb599.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv2745_static.FOLLOW_rbr_in_adv2745);
                    rbr600=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr600.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv2747_static.FOLLOW_rp_in_adv2747);
                    rp601=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp601.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv2749_static.FOLLOW_rbs_in_adv2749);
                    rbs602=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs602.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt603 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss604 = null;

        ChemicalChunkerParser.wrb_return wrb605 = null;

        ChemicalChunkerParser.ex_return ex606 = null;

        ChemicalChunkerParser.pdt_return pdt607 = null;

        ChemicalChunkerParser.wp_return wp608 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt154=6;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt154=1;
                }
                break;
            case 173:
                {
                alt154=2;
                }
                break;
            case 174:
                {
                alt154=3;
                }
                break;
            case 142:
                {
                alt154=4;
                }
                break;
            case 154:
                {
                alt154=5;
                }
                break;
            case 172:
                {
                alt154=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause2756_static.FOLLOW_wdt_in_clause2756);
                    wdt603=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt603.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause2758_static.FOLLOW_wp_poss_in_clause2758);
                    wp_poss604=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss604.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause2760_static.FOLLOW_wrb_in_clause2760);
                    wrb605=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb605.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause2762_static.FOLLOW_ex_in_clause2762);
                    ex606=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex606.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause2764_static.FOLLOW_pdt_in_clause2764);
                    pdt607=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt607.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause2766_static.FOLLOW_wp_in_clause2766);
                    wp608=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp608.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc609 = null;

        ChemicalChunkerParser.comma_return comma610 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:13: ( cc | comma )
            int alt155=2;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt155=1;
                }
                break;
            case 128:
                {
                alt155=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction2773_static.FOLLOW_cc_in_conjunction2773);
                    cc609=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc609.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction2775_static.FOLLOW_comma_in_conjunction2775);
                    comma610=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma610.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in611 = null;

        ChemicalChunkerParser.inafter_return inafter612 = null;

        ChemicalChunkerParser.inas_return inas613 = null;

        ChemicalChunkerParser.inbefore_return inbefore614 = null;

        ChemicalChunkerParser.inby_return inby615 = null;

        ChemicalChunkerParser.infor_return infor616 = null;

        ChemicalChunkerParser.infrom_return infrom617 = null;

        ChemicalChunkerParser.inin_return inin618 = null;

        ChemicalChunkerParser.ininto_return ininto619 = null;

        ChemicalChunkerParser.inof_return inof620 = null;

        ChemicalChunkerParser.inoff_return inoff621 = null;

        ChemicalChunkerParser.inon_return inon622 = null;

        ChemicalChunkerParser.inover_return inover623 = null;

        ChemicalChunkerParser.inunder_return inunder624 = null;

        ChemicalChunkerParser.invia_return invia625 = null;

        ChemicalChunkerParser.inwith_return inwith626 = null;

        ChemicalChunkerParser.inwithout_return inwithout627 = null;

        ChemicalChunkerParser.to_return to628 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt156=18;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt156=1;
                }
                break;
            case 45:
                {
                alt156=2;
                }
                break;
            case 43:
                {
                alt156=3;
                }
                break;
            case 44:
                {
                alt156=4;
                }
                break;
            case 50:
                {
                alt156=5;
                }
                break;
            case 54:
                {
                alt156=6;
                }
                break;
            case 55:
                {
                alt156=7;
                }
                break;
            case 46:
                {
                alt156=8;
                }
                break;
            case 47:
                {
                alt156=9;
                }
                break;
            case 52:
                {
                alt156=10;
                }
                break;
            case 58:
                {
                alt156=11;
                }
                break;
            case 53:
                {
                alt156=12;
                }
                break;
            case 57:
                {
                alt156=13;
                }
                break;
            case 56:
                {
                alt156=14;
                }
                break;
            case 51:
                {
                alt156=15;
                }
                break;
            case 48:
                {
                alt156=16;
                }
                break;
            case 49:
                {
                alt156=17;
                }
                break;
            case 163:
                {
                alt156=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll2782_static.FOLLOW_in_in_inAll2782);
                    in611=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in611.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll2784_static.FOLLOW_inafter_in_inAll2784);
                    inafter612=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter612.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll2786_static.FOLLOW_inas_in_inAll2786);
                    inas613=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas613.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll2788_static.FOLLOW_inbefore_in_inAll2788);
                    inbefore614=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore614.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll2790_static.FOLLOW_inby_in_inAll2790);
                    inby615=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby615.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll2792_static.FOLLOW_infor_in_inAll2792);
                    infor616=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor616.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll2794_static.FOLLOW_infrom_in_inAll2794);
                    infrom617=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom617.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll2796_static.FOLLOW_inin_in_inAll2796);
                    inin618=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin618.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll2798_static.FOLLOW_ininto_in_inAll2798);
                    ininto619=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto619.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll2800_static.FOLLOW_inof_in_inAll2800);
                    inof620=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof620.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll2802_static.FOLLOW_inoff_in_inAll2802);
                    inoff621=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff621.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll2804_static.FOLLOW_inon_in_inAll2804);
                    inon622=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon622.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll2806_static.FOLLOW_inover_in_inAll2806);
                    inover623=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover623.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll2808_static.FOLLOW_inunder_in_inAll2808);
                    inunder624=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder624.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll2810_static.FOLLOW_invia_in_inAll2810);
                    invia625=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia625.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll2812_static.FOLLOW_inwith_in_inAll2812);
                    inwith626=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith626.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll2814_static.FOLLOW_inwithout_in_inAll2814);
                    inwithout627=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout627.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll2816_static.FOLLOW_to_in_inAll2816);
                    to628=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to628.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in629 = null;

        ChemicalChunkerParser.inas_return inas630 = null;

        ChemicalChunkerParser.inbefore_return inbefore631 = null;

        ChemicalChunkerParser.inby_return inby632 = null;

        ChemicalChunkerParser.infor_return infor633 = null;

        ChemicalChunkerParser.infrom_return infrom634 = null;

        ChemicalChunkerParser.inin_return inin635 = null;

        ChemicalChunkerParser.ininto_return ininto636 = null;

        ChemicalChunkerParser.inof_return inof637 = null;

        ChemicalChunkerParser.inoff_return inoff638 = null;

        ChemicalChunkerParser.inon_return inon639 = null;

        ChemicalChunkerParser.inover_return inover640 = null;

        ChemicalChunkerParser.inunder_return inunder641 = null;

        ChemicalChunkerParser.invia_return invia642 = null;

        ChemicalChunkerParser.inwith_return inwith643 = null;

        ChemicalChunkerParser.inwithout_return inwithout644 = null;

        ChemicalChunkerParser.to_return to645 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt157=17;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt157=1;
                }
                break;
            case 43:
                {
                alt157=2;
                }
                break;
            case 44:
                {
                alt157=3;
                }
                break;
            case 50:
                {
                alt157=4;
                }
                break;
            case 54:
                {
                alt157=5;
                }
                break;
            case 55:
                {
                alt157=6;
                }
                break;
            case 46:
                {
                alt157=7;
                }
                break;
            case 47:
                {
                alt157=8;
                }
                break;
            case 52:
                {
                alt157=9;
                }
                break;
            case 58:
                {
                alt157=10;
                }
                break;
            case 53:
                {
                alt157=11;
                }
                break;
            case 57:
                {
                alt157=12;
                }
                break;
            case 56:
                {
                alt157=13;
                }
                break;
            case 51:
                {
                alt157=14;
                }
                break;
            case 48:
                {
                alt157=15;
                }
                break;
            case 49:
                {
                alt157=16;
                }
                break;
            case 163:
                {
                alt157=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost2823_static.FOLLOW_in_in_inMost2823);
                    in629=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in629.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost2825_static.FOLLOW_inas_in_inMost2825);
                    inas630=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas630.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost2827_static.FOLLOW_inbefore_in_inMost2827);
                    inbefore631=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore631.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost2829_static.FOLLOW_inby_in_inMost2829);
                    inby632=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby632.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost2831_static.FOLLOW_infor_in_inMost2831);
                    infor633=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor633.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost2833_static.FOLLOW_infrom_in_inMost2833);
                    infrom634=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom634.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost2835_static.FOLLOW_inin_in_inMost2835);
                    inin635=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin635.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost2837_static.FOLLOW_ininto_in_inMost2837);
                    ininto636=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto636.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost2839_static.FOLLOW_inof_in_inMost2839);
                    inof637=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof637.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost2841_static.FOLLOW_inoff_in_inMost2841);
                    inoff638=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff638.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost2843_static.FOLLOW_inon_in_inMost2843);
                    inon639=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon639.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost2845_static.FOLLOW_inover_in_inMost2845);
                    inover640=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover640.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost2847_static.FOLLOW_inunder_in_inMost2847);
                    inunder641=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder641.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost2849_static.FOLLOW_invia_in_inMost2849);
                    invia642=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia642.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost2851_static.FOLLOW_inwith_in_inMost2851);
                    inwith643=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith643.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost2853_static.FOLLOW_inwithout_in_inMost2853);
                    inwithout644=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout644.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost2855_static.FOLLOW_to_in_inMost2855);
                    to645=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to645.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:1: number : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);
        int number_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd646 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum647 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:8: ( cd | cdAlphanum )
            int alt158=2;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt158=1;
                }
                break;
            case 34:
                {
                alt158=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number2862_static.FOLLOW_cd_in_number2862);
                    cd646=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd646.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:13: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_number2864_static.FOLLOW_cdAlphanum_in_number2864);
                    cdAlphanum647=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum647.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, number_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal648=(Token)match(input,34,FOLLOW_34_in_cdAlphanum2872_static.FOLLOW_34_in_cdAlphanum2872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_34.add(string_literal648);

            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum2874_static.FOLLOW_TOKEN_in_cdAlphanum2874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN649);



            // AST REWRITE
            // elements: 34, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 271:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_34.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:9: 'OSCAR-CJ' TOKEN
            {
            string_literal650=(Token)match(input,35,FOLLOW_35_in_oscarcj2887_static.FOLLOW_35_in_oscarcj2887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_35.add(string_literal650);

            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2889_static.FOLLOW_TOKEN_in_oscarcj2889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN651);



            // AST REWRITE
            // elements: TOKEN, 35
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_35.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;
        RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:9: 'OSCAR-RN' TOKEN
            {
            string_literal652=(Token)match(input,36,FOLLOW_36_in_oscarrn2902_static.FOLLOW_36_in_oscarrn2902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_36.add(string_literal652);

            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2904_static.FOLLOW_TOKEN_in_oscarrn2904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN653);



            // AST REWRITE
            // elements: 36, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_36.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:10: 'OSCAR-ASE' TOKEN
            {
            string_literal654=(Token)match(input,37,FOLLOW_37_in_oscarase2917_static.FOLLOW_37_in_oscarase2917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_37.add(string_literal654);

            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase2919_static.FOLLOW_TOKEN_in_oscarase2919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN655);



            // AST REWRITE
            // elements: TOKEN, 37
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_37.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:10: 'OSCAR-ONT' TOKEN
            {
            string_literal656=(Token)match(input,38,FOLLOW_38_in_oscaront2932_static.FOLLOW_38_in_oscaront2932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal656);

            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2934_static.FOLLOW_TOKEN_in_oscaront2934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN657);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 275:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:11: 'TM-UNICODE' TOKEN
            {
            string_literal658=(Token)match(input,39,FOLLOW_39_in_tmunicode2947_static.FOLLOW_39_in_tmunicode2947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal658);

            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2949_static.FOLLOW_TOKEN_in_tmunicode2949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN659);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:11: 'CD-UNICODE' TOKEN
            {
            string_literal660=(Token)match(input,40,FOLLOW_40_in_cdunicode2962_static.FOLLOW_40_in_cdunicode2962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal660);

            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2964_static.FOLLOW_TOKEN_in_cdunicode2964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN661);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:8: 'JJ-CHEM' TOKEN
            {
            string_literal662=(Token)match(input,41,FOLLOW_41_in_jjchem2977_static.FOLLOW_41_in_jjchem2977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal662);

            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem2979_static.FOLLOW_TOKEN_in_jjchem2979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN663);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal664=(Token)match(input,42,FOLLOW_42_in_jjcomp2992_static.FOLLOW_42_in_jjcomp2992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal664);

            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp2994_static.FOLLOW_TOKEN_in_jjcomp2994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN665);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 279:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:6: 'IN-AS' TOKEN
            {
            string_literal666=(Token)match(input,43,FOLLOW_43_in_inas3008_static.FOLLOW_43_in_inas3008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal666);

            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3010_static.FOLLOW_TOKEN_in_inas3010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN667);



            // AST REWRITE
            // elements: 43, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:10: 'IN-BEFORE' TOKEN
            {
            string_literal668=(Token)match(input,44,FOLLOW_44_in_inbefore3023_static.FOLLOW_44_in_inbefore3023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal668);

            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3025_static.FOLLOW_TOKEN_in_inbefore3025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN669);



            // AST REWRITE
            // elements: TOKEN, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 282:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:9: 'IN-AFTER' TOKEN
            {
            string_literal670=(Token)match(input,45,FOLLOW_45_in_inafter3038_static.FOLLOW_45_in_inafter3038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal670);

            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3040_static.FOLLOW_TOKEN_in_inafter3040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN671);



            // AST REWRITE
            // elements: 45, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 283:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:6: 'IN-IN' TOKEN
            {
            string_literal672=(Token)match(input,46,FOLLOW_46_in_inin3053_static.FOLLOW_46_in_inin3053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal672);

            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3055_static.FOLLOW_TOKEN_in_inin3055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN673);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:8: 'IN-INTO' TOKEN
            {
            string_literal674=(Token)match(input,47,FOLLOW_47_in_ininto3068_static.FOLLOW_47_in_ininto3068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal674);

            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3070_static.FOLLOW_TOKEN_in_ininto3070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN675);



            // AST REWRITE
            // elements: 47, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:8: 'IN-WITH' TOKEN
            {
            string_literal676=(Token)match(input,48,FOLLOW_48_in_inwith3083_static.FOLLOW_48_in_inwith3083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal676);

            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3085_static.FOLLOW_TOKEN_in_inwith3085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN677);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:11: 'IN-WITHOUT' TOKEN
            {
            string_literal678=(Token)match(input,49,FOLLOW_49_in_inwithout3098_static.FOLLOW_49_in_inwithout3098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal678);

            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3100_static.FOLLOW_TOKEN_in_inwithout3100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN679);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:6: 'IN-BY' TOKEN
            {
            string_literal680=(Token)match(input,50,FOLLOW_50_in_inby3113_static.FOLLOW_50_in_inby3113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal680);

            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3115_static.FOLLOW_TOKEN_in_inby3115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN681);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:7: 'IN-VIA' TOKEN
            {
            string_literal682=(Token)match(input,51,FOLLOW_51_in_invia3128_static.FOLLOW_51_in_invia3128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal682);

            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3130_static.FOLLOW_TOKEN_in_invia3130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN683);



            // AST REWRITE
            // elements: 51, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:6: 'IN-OF' TOKEN
            {
            string_literal684=(Token)match(input,52,FOLLOW_52_in_inof3143_static.FOLLOW_52_in_inof3143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal684);

            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3145_static.FOLLOW_TOKEN_in_inof3145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN685);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:6: 'IN-ON' TOKEN
            {
            string_literal686=(Token)match(input,53,FOLLOW_53_in_inon3158_static.FOLLOW_53_in_inon3158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal686);

            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3160_static.FOLLOW_TOKEN_in_inon3160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN687);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:7: 'IN-FOR' TOKEN
            {
            string_literal688=(Token)match(input,54,FOLLOW_54_in_infor3173_static.FOLLOW_54_in_infor3173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal688);

            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3175_static.FOLLOW_TOKEN_in_infor3175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN689);



            // AST REWRITE
            // elements: TOKEN, 54
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:8: 'IN-FROM' TOKEN
            {
            string_literal690=(Token)match(input,55,FOLLOW_55_in_infrom3188_static.FOLLOW_55_in_infrom3188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal690);

            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3190_static.FOLLOW_TOKEN_in_infrom3190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN691);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:9: 'IN-UNDER' TOKEN
            {
            string_literal692=(Token)match(input,56,FOLLOW_56_in_inunder3203_static.FOLLOW_56_in_inunder3203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal692);

            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3205_static.FOLLOW_TOKEN_in_inunder3205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN693);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:8: 'IN-OVER' TOKEN
            {
            string_literal694=(Token)match(input,57,FOLLOW_57_in_inover3218_static.FOLLOW_57_in_inover3218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal694);

            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3220_static.FOLLOW_TOKEN_in_inover3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN695);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:7: 'IN-OFF' TOKEN
            {
            string_literal696=(Token)match(input,58,FOLLOW_58_in_inoff3233_static.FOLLOW_58_in_inoff3233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal696);

            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3235_static.FOLLOW_TOKEN_in_inoff3235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN697);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:9: 'NN-STATE' TOKEN
            {
            string_literal698=(Token)match(input,59,FOLLOW_59_in_nnstate3250_static.FOLLOW_59_in_nnstate3250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal698);

            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3252_static.FOLLOW_TOKEN_in_nnstate3252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN699);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:8: 'NN-TIME' TOKEN
            {
            string_literal700=(Token)match(input,60,FOLLOW_60_in_nntime3265_static.FOLLOW_60_in_nntime3265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal700);

            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3267_static.FOLLOW_TOKEN_in_nntime3267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN701);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:8: 'NN-MASS' TOKEN
            {
            string_literal702=(Token)match(input,61,FOLLOW_61_in_nnmass3280_static.FOLLOW_61_in_nnmass3280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal702);

            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3282_static.FOLLOW_TOKEN_in_nnmass3282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN703);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:10: 'NN-AMOUNT' TOKEN
            {
            string_literal704=(Token)match(input,62,FOLLOW_62_in_nnamount3295_static.FOLLOW_62_in_nnamount3295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal704);

            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3297_static.FOLLOW_TOKEN_in_nnamount3297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN705);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:9: 'NN-MOLAR' TOKEN
            {
            string_literal706=(Token)match(input,63,FOLLOW_63_in_nnmolar3310_static.FOLLOW_63_in_nnmolar3310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal706);

            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3312_static.FOLLOW_TOKEN_in_nnmolar3312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN707);



            // AST REWRITE
            // elements: 63, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 303:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal708=(Token)match(input,64,FOLLOW_64_in_nnatmosphere3325_static.FOLLOW_64_in_nnatmosphere3325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal708);

            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3327_static.FOLLOW_TOKEN_in_nnatmosphere3327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN709);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:6: 'NN-EQ' TOKEN
            {
            string_literal710=(Token)match(input,65,FOLLOW_65_in_nneq3340_static.FOLLOW_65_in_nneq3340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal710);

            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3342_static.FOLLOW_TOKEN_in_nneq3342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN711);



            // AST REWRITE
            // elements: TOKEN, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:7: 'NN-VOL' TOKEN
            {
            string_literal712=(Token)match(input,66,FOLLOW_66_in_nnvol3355_static.FOLLOW_66_in_nnvol3355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal712);

            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3357_static.FOLLOW_TOKEN_in_nnvol3357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN713);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal714=(Token)match(input,67,FOLLOW_67_in_nnchementity3370_static.FOLLOW_67_in_nnchementity3370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal714);

            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3372_static.FOLLOW_TOKEN_in_nnchementity3372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN715);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 307:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:8: 'NN-TEMP' TOKEN
            {
            string_literal716=(Token)match(input,68,FOLLOW_68_in_nntemp3385_static.FOLLOW_68_in_nntemp3385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal716);

            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3387_static.FOLLOW_TOKEN_in_nntemp3387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN717);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:9: 'NN-FLASH' TOKEN
            {
            string_literal718=(Token)match(input,69,FOLLOW_69_in_nnflash3400_static.FOLLOW_69_in_nnflash3400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal718);

            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3402_static.FOLLOW_TOKEN_in_nnflash3402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN719);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:11: 'NN-GENERAL' TOKEN
            {
            string_literal720=(Token)match(input,70,FOLLOW_70_in_nngeneral3415_static.FOLLOW_70_in_nngeneral3415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal720);

            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3417_static.FOLLOW_TOKEN_in_nngeneral3417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN721);



            // AST REWRITE
            // elements: 70, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:10: 'NN-METHOD' TOKEN
            {
            string_literal722=(Token)match(input,71,FOLLOW_71_in_nnmethod3430_static.FOLLOW_71_in_nnmethod3430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal722);

            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3432_static.FOLLOW_TOKEN_in_nnmethod3432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN723);



            // AST REWRITE
            // elements: TOKEN, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:12: 'NN-PRESSURE' TOKEN
            {
            string_literal724=(Token)match(input,72,FOLLOW_72_in_nnpressure3445_static.FOLLOW_72_in_nnpressure3445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal724);

            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3447_static.FOLLOW_TOKEN_in_nnpressure3447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN725);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:10: 'NN-COLUMN' TOKEN
            {
            string_literal726=(Token)match(input,73,FOLLOW_73_in_nncolumn3460_static.FOLLOW_73_in_nncolumn3460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal726);

            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3462_static.FOLLOW_TOKEN_in_nncolumn3462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN727);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal728=(Token)match(input,74,FOLLOW_74_in_nnchromatography3475_static.FOLLOW_74_in_nnchromatography3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal728);

            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3477_static.FOLLOW_TOKEN_in_nnchromatography3477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN729);



            // AST REWRITE
            // elements: TOKEN, 74
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:10: 'NN-VACUUM' TOKEN
            {
            string_literal730=(Token)match(input,75,FOLLOW_75_in_nnvacuum3490_static.FOLLOW_75_in_nnvacuum3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal730);

            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3492_static.FOLLOW_TOKEN_in_nnvacuum3492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN731);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:9: 'NN-CYCLE' TOKEN
            {
            string_literal732=(Token)match(input,76,FOLLOW_76_in_nncycle3505_static.FOLLOW_76_in_nncycle3505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal732);

            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3507_static.FOLLOW_TOKEN_in_nncycle3507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN733);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:9: 'NN-TIMES' TOKEN
            {
            string_literal734=(Token)match(input,77,FOLLOW_77_in_nntimes3520_static.FOLLOW_77_in_nntimes3520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal734);

            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3522_static.FOLLOW_TOKEN_in_nntimes3522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN735);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal736=(Token)match(input,78,FOLLOW_78_in_nnexample3535_static.FOLLOW_78_in_nnexample3535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal736);

            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3537_static.FOLLOW_TOKEN_in_nnexample3537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN737);



            // AST REWRITE
            // elements: TOKEN, 78
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:9: 'OSCAR-CM' TOKEN
            {
            string_literal738=(Token)match(input,79,FOLLOW_79_in_oscarcm3552_static.FOLLOW_79_in_oscarcm3552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3554_static.FOLLOW_TOKEN_in_oscarcm3554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:7: 'VB-USE' TOKEN
            {
            string_literal740=(Token)match(input,80,FOLLOW_80_in_vbuse3569_static.FOLLOW_80_in_vbuse3569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3571_static.FOLLOW_TOKEN_in_vbuse3571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: TOKEN, 80
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:10: 'VB-CHANGE' TOKEN
            {
            string_literal742=(Token)match(input,81,FOLLOW_81_in_vbchange3584_static.FOLLOW_81_in_vbchange3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3586_static.FOLLOW_TOKEN_in_vbchange3586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: 81, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal744=(Token)match(input,82,FOLLOW_82_in_vbsubmerge3599_static.FOLLOW_82_in_vbsubmerge3599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3601_static.FOLLOW_TOKEN_in_vbsubmerge3601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:11: 'VB-SUBJECT' TOKEN
            {
            string_literal746=(Token)match(input,83,FOLLOW_83_in_vbsubject3614_static.FOLLOW_83_in_vbsubject3614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3616_static.FOLLOW_TOKEN_in_vbsubject3616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: 83, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:7: 'NN-ADD' TOKEN
            {
            string_literal748=(Token)match(input,84,FOLLOW_84_in_nnadd3631_static.FOLLOW_84_in_nnadd3631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3633_static.FOLLOW_TOKEN_in_nnadd3633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: 84, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:11: 'NN-MIXTURE' TOKEN
            {
            string_literal750=(Token)match(input,85,FOLLOW_85_in_nnmixture3646_static.FOLLOW_85_in_nnmixture3646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3648_static.FOLLOW_TOKEN_in_nnmixture3648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: 85, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:10: 'VB-DILUTE' TOKEN
            {
            string_literal752=(Token)match(input,86,FOLLOW_86_in_vbdilute3661_static.FOLLOW_86_in_vbdilute3661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3663_static.FOLLOW_TOKEN_in_vbdilute3663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:7: 'VB-ADD' TOKEN
            {
            string_literal754=(Token)match(input,87,FOLLOW_87_in_vbadd3676_static.FOLLOW_87_in_vbadd3676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3678_static.FOLLOW_TOKEN_in_vbadd3678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: 87, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:10: 'VB-CHARGE' TOKEN
            {
            string_literal756=(Token)match(input,88,FOLLOW_88_in_vbcharge3691_static.FOLLOW_88_in_vbcharge3691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3693_static.FOLLOW_TOKEN_in_vbcharge3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:11: 'VB-CONTAIN' TOKEN
            {
            string_literal758=(Token)match(input,89,FOLLOW_89_in_vbcontain3706_static.FOLLOW_89_in_vbcontain3706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3708_static.FOLLOW_TOKEN_in_vbcontain3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:8: 'VB-DROP' TOKEN
            {
            string_literal760=(Token)match(input,90,FOLLOW_90_in_vbdrop3721_static.FOLLOW_90_in_vbdrop3721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3723_static.FOLLOW_TOKEN_in_vbdrop3723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: 90, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:8: 'VB-FILL' TOKEN
            {
            string_literal762=(Token)match(input,91,FOLLOW_91_in_vbfill3736_static.FOLLOW_91_in_vbfill3736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3738_static.FOLLOW_TOKEN_in_vbfill3738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:11: 'VB-SUSPEND' TOKEN
            {
            string_literal764=(Token)match(input,92,FOLLOW_92_in_vbsuspend3751_static.FOLLOW_92_in_vbsuspend3751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3753_static.FOLLOW_TOKEN_in_vbsuspend3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:9: 'VB-TREAT' TOKEN
            {
            string_literal766=(Token)match(input,93,FOLLOW_93_in_vbtreat3766_static.FOLLOW_93_in_vbtreat3766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3768_static.FOLLOW_TOKEN_in_vbtreat3768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: TOKEN, 93
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:13: 'VB-APPARATUS' TOKEN
            {
            string_literal768=(Token)match(input,94,FOLLOW_94_in_vbapparatus3783_static.FOLLOW_94_in_vbapparatus3783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3785_static.FOLLOW_TOKEN_in_vbapparatus3785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:13: 'NN-APPARATUS' TOKEN
            {
            string_literal770=(Token)match(input,95,FOLLOW_95_in_nnapparatus3798_static.FOLLOW_95_in_nnapparatus3798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3800_static.FOLLOW_TOKEN_in_nnapparatus3800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal772=(Token)match(input,96,FOLLOW_96_in_vbconcentrate3815_static.FOLLOW_96_in_vbconcentrate3815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3817_static.FOLLOW_TOKEN_in_vbconcentrate3817); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal774=(Token)match(input,97,FOLLOW_97_in_nnconcentrate3830_static.FOLLOW_97_in_nnconcentrate3830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3832_static.FOLLOW_TOKEN_in_nnconcentrate3832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:8: 'VB-COOL' TOKEN
            {
            string_literal776=(Token)match(input,98,FOLLOW_98_in_vbcool3847_static.FOLLOW_98_in_vbcool3847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3849_static.FOLLOW_TOKEN_in_vbcool3849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:10: 'VB-DEGASS' TOKEN
            {
            string_literal778=(Token)match(input,99,FOLLOW_99_in_vbdegass3864_static.FOLLOW_99_in_vbdegass3864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass3866_static.FOLLOW_TOKEN_in_vbdegass3866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: TOKEN, 99
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal780=(Token)match(input,100,FOLLOW_100_in_vbdissolve3881_static.FOLLOW_100_in_vbdissolve3881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve3883_static.FOLLOW_TOKEN_in_vbdissolve3883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: 100, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:7: 'VB-DRY' TOKEN
            {
            string_literal782=(Token)match(input,101,FOLLOW_101_in_vbdry3898_static.FOLLOW_101_in_vbdry3898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry3900_static.FOLLOW_TOKEN_in_vbdry3900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:7: 'NN-DRY' TOKEN
            {
            string_literal784=(Token)match(input,102,FOLLOW_102_in_nndry3913_static.FOLLOW_102_in_nndry3913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry3915_static.FOLLOW_TOKEN_in_nndry3915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:11: 'VB-EXTRACT' TOKEN
            {
            string_literal786=(Token)match(input,103,FOLLOW_103_in_vbextract3930_static.FOLLOW_103_in_vbextract3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract3932_static.FOLLOW_TOKEN_in_vbextract3932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:11: 'NN-EXTRACT' TOKEN
            {
            string_literal788=(Token)match(input,104,FOLLOW_104_in_nnextract3945_static.FOLLOW_104_in_nnextract3945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract3947_static.FOLLOW_TOKEN_in_nnextract3947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:10: 'VB-FILTER' TOKEN
            {
            string_literal790=(Token)match(input,105,FOLLOW_105_in_vbfilter3962_static.FOLLOW_105_in_vbfilter3962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter3964_static.FOLLOW_TOKEN_in_vbfilter3964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: 105, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:10: 'NN-FILTER' TOKEN
            {
            string_literal792=(Token)match(input,106,FOLLOW_106_in_nnfilter3977_static.FOLLOW_106_in_nnfilter3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter3979_static.FOLLOW_TOKEN_in_nnfilter3979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: TOKEN, 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:8: 'VB-HEAT' TOKEN
            {
            string_literal794=(Token)match(input,107,FOLLOW_107_in_vbheat3994_static.FOLLOW_107_in_vbheat3994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat3996_static.FOLLOW_TOKEN_in_vbheat3996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:12: 'VB-INCREASE' TOKEN
            {
            string_literal796=(Token)match(input,108,FOLLOW_108_in_vbincrease4009_static.FOLLOW_108_in_vbincrease4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4011_static.FOLLOW_TOKEN_in_vbincrease4011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:11: 'VB-IMMERSE' TOKEN
            {
            string_literal798=(Token)match(input,109,FOLLOW_109_in_vbimmerse4026_static.FOLLOW_109_in_vbimmerse4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4028_static.FOLLOW_TOKEN_in_vbimmerse4028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:13: 'VB-PARTITION' TOKEN
            {
            string_literal800=(Token)match(input,110,FOLLOW_110_in_vbpartition4043_static.FOLLOW_110_in_vbpartition4043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4045_static.FOLLOW_TOKEN_in_vbpartition4045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal802=(Token)match(input,111,FOLLOW_111_in_vbprecipitate4060_static.FOLLOW_111_in_vbprecipitate4060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4062_static.FOLLOW_TOKEN_in_vbprecipitate4062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal804=(Token)match(input,112,FOLLOW_112_in_nnprecipitate4075_static.FOLLOW_112_in_nnprecipitate4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4077_static.FOLLOW_TOKEN_in_nnprecipitate4077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:10: 'VB-PURIFY' TOKEN
            {
            string_literal806=(Token)match(input,113,FOLLOW_113_in_vbpurify4092_static.FOLLOW_113_in_vbpurify4092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4094_static.FOLLOW_TOKEN_in_vbpurify4094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:10: 'NN-PURIFY' TOKEN
            {
            string_literal808=(Token)match(input,114,FOLLOW_114_in_nnpurify4107_static.FOLLOW_114_in_nnpurify4107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4109_static.FOLLOW_TOKEN_in_nnpurify4109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: TOKEN, 114
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:10: 'VB-QUENCH' TOKEN
            {
            string_literal810=(Token)match(input,115,FOLLOW_115_in_vbquench4124_static.FOLLOW_115_in_vbquench4124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4126_static.FOLLOW_TOKEN_in_vbquench4126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:11: 'VB-RECOVER' TOKEN
            {
            string_literal812=(Token)match(input,116,FOLLOW_116_in_vbrecover4141_static.FOLLOW_116_in_vbrecover4141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4143_static.FOLLOW_TOKEN_in_vbrecover4143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:10: 'VB-REMOVE' TOKEN
            {
            string_literal814=(Token)match(input,117,FOLLOW_117_in_vbremove4158_static.FOLLOW_117_in_vbremove4158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4160_static.FOLLOW_TOKEN_in_vbremove4160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: 117, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:10: 'NN-REMOVE' TOKEN
            {
            string_literal816=(Token)match(input,118,FOLLOW_118_in_nnremove4173_static.FOLLOW_118_in_nnremove4173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4175_static.FOLLOW_TOKEN_in_nnremove4175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:8: 'VB-STIR' TOKEN
            {
            string_literal818=(Token)match(input,119,FOLLOW_119_in_vbstir4190_static.FOLLOW_119_in_vbstir4190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4192_static.FOLLOW_TOKEN_in_vbstir4192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal820=(Token)match(input,120,FOLLOW_120_in_vbsynthesize4207_static.FOLLOW_120_in_vbsynthesize4207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4209_static.FOLLOW_TOKEN_in_vbsynthesize4209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal822=(Token)match(input,121,FOLLOW_121_in_nnsynthesize4222_static.FOLLOW_121_in_nnsynthesize4222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4224_static.FOLLOW_TOKEN_in_nnsynthesize4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 403:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:8: 'VB-WAIT' TOKEN
            {
            string_literal824=(Token)match(input,122,FOLLOW_122_in_vbwait4239_static.FOLLOW_122_in_vbwait4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4241_static.FOLLOW_TOKEN_in_vbwait4241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 406:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:8: 'VB-WASH' TOKEN
            {
            string_literal826=(Token)match(input,123,FOLLOW_123_in_vbwash4256_static.FOLLOW_123_in_vbwash4256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4258_static.FOLLOW_TOKEN_in_vbwash4258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:9: 'VB-YIELD' TOKEN
            {
            string_literal828=(Token)match(input,124,FOLLOW_124_in_vbyield4273_static.FOLLOW_124_in_vbyield4273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4275_static.FOLLOW_TOKEN_in_vbyield4275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: 124, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:9: 'NN-YIELD' TOKEN
            {
            string_literal830=(Token)match(input,125,FOLLOW_125_in_nnyield4290_static.FOLLOW_125_in_nnyield4290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4292_static.FOLLOW_TOKEN_in_nnyield4292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:8: 'RB-CONJ' TOKEN
            {
            string_literal832=(Token)match(input,126,FOLLOW_126_in_rbconj4308_static.FOLLOW_126_in_rbconj4308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4310_static.FOLLOW_TOKEN_in_rbconj4310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:7: 'COLON' TOKEN
            {
            string_literal834=(Token)match(input,127,FOLLOW_127_in_colon4323_static.FOLLOW_127_in_colon4323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4325_static.FOLLOW_TOKEN_in_colon4325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:7: 'COMMA' TOKEN
            {
            string_literal836=(Token)match(input,128,FOLLOW_128_in_comma4338_static.FOLLOW_128_in_comma4338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4340_static.FOLLOW_TOKEN_in_comma4340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:7: 'APOST' TOKEN
            {
            string_literal838=(Token)match(input,129,FOLLOW_129_in_apost4353_static.FOLLOW_129_in_apost4353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4355_static.FOLLOW_TOKEN_in_apost4355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:5: 'NEG' TOKEN
            {
            string_literal840=(Token)match(input,130,FOLLOW_130_in_neg4368_static.FOLLOW_130_in_neg4368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4370_static.FOLLOW_TOKEN_in_neg4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: TOKEN, 130
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:6: 'DASH' TOKEN
            {
            string_literal842=(Token)match(input,131,FOLLOW_131_in_dash4383_static.FOLLOW_131_in_dash4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4385_static.FOLLOW_TOKEN_in_dash4385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:6: 'STOP' TOKEN
            {
            string_literal844=(Token)match(input,132,FOLLOW_132_in_stop4398_static.FOLLOW_132_in_stop4398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4400_static.FOLLOW_TOKEN_in_stop4400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:11: 'NN-PERCENT' TOKEN
            {
            string_literal846=(Token)match(input,133,FOLLOW_133_in_nnpercent4413_static.FOLLOW_133_in_nnpercent4413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4415_static.FOLLOW_TOKEN_in_nnpercent4415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:6: 'LSQB' TOKEN
            {
            string_literal848=(Token)match(input,134,FOLLOW_134_in_lsqb4428_static.FOLLOW_134_in_lsqb4428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4430_static.FOLLOW_TOKEN_in_lsqb4430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:6: 'RSQB' TOKEN
            {
            string_literal850=(Token)match(input,135,FOLLOW_135_in_rsqb4443_static.FOLLOW_135_in_rsqb4443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4445_static.FOLLOW_TOKEN_in_rsqb4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: TOKEN, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:7: 'DT-THE' TOKEN
            {
            string_literal852=(Token)match(input,136,FOLLOW_136_in_dtTHE4460_static.FOLLOW_136_in_dtTHE4460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4462_static.FOLLOW_TOKEN_in_dtTHE4462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:5: '-LRB-' TOKEN
            {
            string_literal854=(Token)match(input,137,FOLLOW_137_in_lrb4476_static.FOLLOW_137_in_lrb4476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4478_static.FOLLOW_TOKEN_in_lrb4478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:5: '-RRB-' TOKEN
            {
            string_literal856=(Token)match(input,138,FOLLOW_138_in_rrb4491_static.FOLLOW_138_in_rrb4491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4493_static.FOLLOW_TOKEN_in_rrb4493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:4: 'CC' TOKEN
            {
            string_literal858=(Token)match(input,139,FOLLOW_139_in_cc4510_static.FOLLOW_139_in_cc4510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4512_static.FOLLOW_TOKEN_in_cc4512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:4: 'CD' TOKEN
            {
            string_literal860=(Token)match(input,140,FOLLOW_140_in_cd4527_static.FOLLOW_140_in_cd4527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4529_static.FOLLOW_TOKEN_in_cd4529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: 140, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:4: 'DT' TOKEN
            {
            string_literal862=(Token)match(input,141,FOLLOW_141_in_dt4544_static.FOLLOW_141_in_dt4544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4546_static.FOLLOW_TOKEN_in_dt4546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:4: 'EX' TOKEN
            {
            string_literal864=(Token)match(input,142,FOLLOW_142_in_ex4561_static.FOLLOW_142_in_ex4561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex4563_static.FOLLOW_TOKEN_in_ex4563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:4: 'FW' TOKEN
            {
            string_literal866=(Token)match(input,143,FOLLOW_143_in_fw4578_static.FOLLOW_143_in_fw4578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw4580_static.FOLLOW_TOKEN_in_fw4580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: TOKEN, 143
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:4: 'IN' TOKEN
            {
            string_literal868=(Token)match(input,144,FOLLOW_144_in_in4595_static.FOLLOW_144_in_in4595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in4597_static.FOLLOW_TOKEN_in_in4597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: 144, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:4: 'JJ' TOKEN
            {
            string_literal870=(Token)match(input,145,FOLLOW_145_in_jj4612_static.FOLLOW_145_in_jj4612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj4614_static.FOLLOW_TOKEN_in_jj4614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: 145, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:5: 'JJR' TOKEN
            {
            string_literal872=(Token)match(input,146,FOLLOW_146_in_jjr4629_static.FOLLOW_146_in_jjr4629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr4631_static.FOLLOW_TOKEN_in_jjr4631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:5: 'JJS' TOKEN
            {
            string_literal874=(Token)match(input,147,FOLLOW_147_in_jjs4646_static.FOLLOW_147_in_jjs4646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs4648_static.FOLLOW_TOKEN_in_jjs4648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: TOKEN, 147
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:4: 'LS' TOKEN
            {
            string_literal876=(Token)match(input,148,FOLLOW_148_in_ls4663_static.FOLLOW_148_in_ls4663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls4665_static.FOLLOW_TOKEN_in_ls4665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:4: 'MD' TOKEN
            {
            string_literal878=(Token)match(input,149,FOLLOW_149_in_md4680_static.FOLLOW_149_in_md4680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md4682_static.FOLLOW_TOKEN_in_md4682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:4: 'NN' TOKEN
            {
            string_literal880=(Token)match(input,150,FOLLOW_150_in_nn4697_static.FOLLOW_150_in_nn4697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn4699_static.FOLLOW_TOKEN_in_nn4699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: TOKEN, 150
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:5: 'NNS' TOKEN
            {
            string_literal882=(Token)match(input,151,FOLLOW_151_in_nns4714_static.FOLLOW_151_in_nns4714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns4716_static.FOLLOW_TOKEN_in_nns4716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:5: 'NNP' TOKEN
            {
            string_literal884=(Token)match(input,152,FOLLOW_152_in_nnp4731_static.FOLLOW_152_in_nnp4731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp4733_static.FOLLOW_TOKEN_in_nnp4733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:6: 'NNPS' TOKEN
            {
            string_literal886=(Token)match(input,153,FOLLOW_153_in_nnps4748_static.FOLLOW_153_in_nnps4748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps4750_static.FOLLOW_TOKEN_in_nnps4750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:5: 'PDT' TOKEN
            {
            string_literal888=(Token)match(input,154,FOLLOW_154_in_pdt4765_static.FOLLOW_154_in_pdt4765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4767_static.FOLLOW_TOKEN_in_pdt4767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:5: 'POS' TOKEN
            {
            string_literal890=(Token)match(input,155,FOLLOW_155_in_pos4782_static.FOLLOW_155_in_pos4782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos4784_static.FOLLOW_TOKEN_in_pos4784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:5: 'PRP' TOKEN
            {
            string_literal892=(Token)match(input,156,FOLLOW_156_in_prp4799_static.FOLLOW_156_in_prp4799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp4801_static.FOLLOW_TOKEN_in_prp4801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:10: 'PRP$' TOKEN
            {
            string_literal894=(Token)match(input,157,FOLLOW_157_in_prp_poss4816_static.FOLLOW_157_in_prp_poss4816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss4818_static.FOLLOW_TOKEN_in_prp_poss4818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:4: 'RB' TOKEN
            {
            string_literal896=(Token)match(input,158,FOLLOW_158_in_rb4833_static.FOLLOW_158_in_rb4833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb4835_static.FOLLOW_TOKEN_in_rb4835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:5: 'RBR' TOKEN
            {
            string_literal898=(Token)match(input,159,FOLLOW_159_in_rbr4850_static.FOLLOW_159_in_rbr4850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr4852_static.FOLLOW_TOKEN_in_rbr4852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: TOKEN, 159
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:5: 'RBS' TOKEN
            {
            string_literal900=(Token)match(input,160,FOLLOW_160_in_rbs4867_static.FOLLOW_160_in_rbs4867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs4869_static.FOLLOW_TOKEN_in_rbs4869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:4: 'RP' TOKEN
            {
            string_literal902=(Token)match(input,161,FOLLOW_161_in_rp4884_static.FOLLOW_161_in_rp4884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp4886_static.FOLLOW_TOKEN_in_rp4886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 505:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:5: 'SYM' TOKEN
            {
            string_literal904=(Token)match(input,162,FOLLOW_162_in_sym4901_static.FOLLOW_162_in_sym4901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym4903_static.FOLLOW_TOKEN_in_sym4903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: 162, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:4: 'TO' TOKEN
            {
            string_literal906=(Token)match(input,163,FOLLOW_163_in_to4918_static.FOLLOW_163_in_to4918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal906);

            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to4920_static.FOLLOW_TOKEN_in_to4920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN907);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:4: 'UH' TOKEN
            {
            string_literal908=(Token)match(input,164,FOLLOW_164_in_uh4935_static.FOLLOW_164_in_uh4935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal908);

            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh4937_static.FOLLOW_TOKEN_in_uh4937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN909);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:4: 'VB' TOKEN
            {
            string_literal910=(Token)match(input,165,FOLLOW_165_in_vb4952_static.FOLLOW_165_in_vb4952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal910);

            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb4954_static.FOLLOW_TOKEN_in_vb4954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN911);



            // AST REWRITE
            // elements: 165, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:5: 'VBD' TOKEN
            {
            string_literal912=(Token)match(input,166,FOLLOW_166_in_vbd4969_static.FOLLOW_166_in_vbd4969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal912);

            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd4971_static.FOLLOW_TOKEN_in_vbd4971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN913);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:5: 'VBG' TOKEN
            {
            string_literal914=(Token)match(input,167,FOLLOW_167_in_vbg4986_static.FOLLOW_167_in_vbg4986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal914);

            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg4988_static.FOLLOW_TOKEN_in_vbg4988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN915);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:5: 'VBN' TOKEN
            {
            string_literal916=(Token)match(input,168,FOLLOW_168_in_vbn5003_static.FOLLOW_168_in_vbn5003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal916);

            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5005_static.FOLLOW_TOKEN_in_vbn5005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN917);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:5: 'VBP' TOKEN
            {
            string_literal918=(Token)match(input,169,FOLLOW_169_in_vbp5020_static.FOLLOW_169_in_vbp5020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal918);

            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5022_static.FOLLOW_TOKEN_in_vbp5022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN919);



            // AST REWRITE
            // elements: 169, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:5: 'VBZ' TOKEN
            {
            string_literal920=(Token)match(input,170,FOLLOW_170_in_vbz5037_static.FOLLOW_170_in_vbz5037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal920);

            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5039_static.FOLLOW_TOKEN_in_vbz5039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN921);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:5: 'WDT' TOKEN
            {
            string_literal922=(Token)match(input,171,FOLLOW_171_in_wdt5054_static.FOLLOW_171_in_wdt5054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal922);

            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5056_static.FOLLOW_TOKEN_in_wdt5056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN923);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 535:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:4: 'WP' TOKEN
            {
            string_literal924=(Token)match(input,172,FOLLOW_172_in_wp5071_static.FOLLOW_172_in_wp5071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal924);

            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5073_static.FOLLOW_TOKEN_in_wp5073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN925);



            // AST REWRITE
            // elements: 172, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:9: 'WP$' TOKEN
            {
            string_literal926=(Token)match(input,173,FOLLOW_173_in_wp_poss5088_static.FOLLOW_173_in_wp_poss5088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal926);

            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5090_static.FOLLOW_TOKEN_in_wp_poss5090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN927);



            // AST REWRITE
            // elements: 173, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:5: 'WRB' TOKEN
            {
            string_literal928=(Token)match(input,174,FOLLOW_174_in_wrb5105_static.FOLLOW_174_in_wrb5105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal928);

            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5107_static.FOLLOW_TOKEN_in_wrb5107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN929);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker204_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker204);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker206_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker206);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker220_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker220);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker222_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker222);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker224_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker224);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker226_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker226);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker231_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker231);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker233_static.FOLLOW_colon_in_synpred10_ChemicalChunker233);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker238_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker238);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker240_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker240);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker242_static.FOLLOW_comma_in_synpred13_ChemicalChunker242);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred82_ChemicalChunker
    public final void synpred82_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker444_static.FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker444);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_ChemicalChunker

    // $ANTLR start synpred84_ChemicalChunker
    public final void synpred84_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred84_ChemicalChunker475_static.FOLLOW_dt_in_synpred84_ChemicalChunker475);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:15: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred85_ChemicalChunker478_static.FOLLOW_advAdj_in_synpred85_ChemicalChunker478);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:25: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker483_static.FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker483);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:40: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:40: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred87_ChemicalChunker485_static.FOLLOW_ratio_in_synpred87_ChemicalChunker485);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:46: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:46: noun
        {
        pushFollow(FOLLOW_noun_in_synpred88_ChemicalChunker487_static.FOLLOW_noun_in_synpred88_ChemicalChunker487);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:51: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:51: number
        {
        pushFollow(FOLLOW_number_in_synpred89_ChemicalChunker489_static.FOLLOW_number_in_synpred89_ChemicalChunker489);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred90_ChemicalChunker497_static.FOLLOW_conjunction_in_synpred90_ChemicalChunker497);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:77: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred91_ChemicalChunker500_static.FOLLOW_advAdj_in_synpred91_ChemicalChunker500);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:86: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker504_static.FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker504);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:101: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:101: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred93_ChemicalChunker506_static.FOLLOW_ratio_in_synpred93_ChemicalChunker506);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:107: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:107: noun
        {
        pushFollow(FOLLOW_noun_in_synpred94_ChemicalChunker508_static.FOLLOW_noun_in_synpred94_ChemicalChunker508);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number )
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:64: ( conjunction )*
        loop159:
        do {
            int alt159=2;
            alt159 = dfa159.predict(input);
            switch (alt159) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker497_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker497);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop159;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:77: ( advAdj )*
        loop160:
        do {
            int alt160=2;
            alt160 = dfa160.predict(input);
            switch (alt160) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred95_ChemicalChunker500_static.FOLLOW_advAdj_in_synpred95_ChemicalChunker500);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop160;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:85: ( dissolvePhrase | ratio | noun | number )
        int alt161=4;
        alt161 = dfa161.predict(input);
        switch (alt161) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker504_static.FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker504);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:101: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred95_ChemicalChunker506_static.FOLLOW_ratio_in_synpred95_ChemicalChunker506);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:107: noun
                {
                pushFollow(FOLLOW_noun_in_synpred95_ChemicalChunker508_static.FOLLOW_noun_in_synpred95_ChemicalChunker508);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:112: number
                {
                pushFollow(FOLLOW_number_in_synpred95_ChemicalChunker510_static.FOLLOW_number_in_synpred95_ChemicalChunker510);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:155: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker526_static.FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker526);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:126: ( prepphraseOf | prepphraseIN )
        int alt162=2;
        switch ( input.LA(1) ) {
        case 52:
            {
            alt162=1;
            }
            break;
        case 46:
            {
            alt162=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 162, 0, input);

            throw nvae;
        }

        switch (alt162) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker520_static.FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker520);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker523_static.FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker523);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:155: ( dissolvePhrase )?
        int alt163=2;
        switch ( input.LA(1) ) {
            case 34:
            case 35:
            case 36:
            case 41:
            case 42:
            case 79:
            case 128:
            case 137:
            case 140:
            case 145:
            case 146:
            case 147:
            case 152:
                {
                alt163=1;
                }
                break;
        }

        switch (alt163) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker526_static.FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker526);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker540_static.FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker540);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred100_ChemicalChunker571_static.FOLLOW_adj_in_synpred100_ChemicalChunker571);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:15: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred101_ChemicalChunker578_static.FOLLOW_molecule_in_synpred101_ChemicalChunker578);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:24: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:24: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker580_static.FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker580);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:57: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:57: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred104_ChemicalChunker588_static.FOLLOW_molecule_in_synpred104_ChemicalChunker588);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:97: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:97: adj
        {
        pushFollow(FOLLOW_adj_in_synpred106_ChemicalChunker600_static.FOLLOW_adj_in_synpred106_ChemicalChunker600);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:108: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:108: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker607_static.FOLLOW_molecule_in_synpred108_ChemicalChunker607);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:135: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:135: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker613_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker613);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker615_static.FOLLOW_molecule_in_synpred109_ChemicalChunker615);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:85: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:85: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred110_ChemicalChunker595_static.FOLLOW_inin_in_synpred110_ChemicalChunker595);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:90: ( dtTHE )?
        int alt165=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt165=1;
                }
                break;
        }

        switch (alt165) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred110_ChemicalChunker597_static.FOLLOW_dtTHE_in_synpred110_ChemicalChunker597);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:97: ( adj )?
        int alt166=2;
        alt166 = dfa166.predict(input);
        switch (alt166) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred110_ChemicalChunker600_static.FOLLOW_adj_in_synpred110_ChemicalChunker600);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:102: ( nnp )?
        int alt167=2;
        switch ( input.LA(1) ) {
            case 152:
                {
                alt167=1;
                }
                break;
        }

        switch (alt167) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred110_ChemicalChunker603_static.FOLLOW_nnp_in_synpred110_ChemicalChunker603);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:107: ( molecule | unnamedmolecule )
        int alt168=2;
        alt168 = dfa168.predict(input);
        switch (alt168) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:108: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker607_static.FOLLOW_molecule_in_synpred110_ChemicalChunker607);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:117: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker609_static.FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker609);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:134: ( conjunction molecule )*
        loop169:
        do {
            int alt169=2;
            switch ( input.LA(1) ) {
            case 128:
            case 139:
                {
                alt169=1;
                }
                break;

            }

            switch (alt169) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:135: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred110_ChemicalChunker613_static.FOLLOW_conjunction_in_synpred110_ChemicalChunker613);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker615_static.FOLLOW_molecule_in_synpred110_ChemicalChunker615);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop169;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:28: to
        {
        pushFollow(FOLLOW_to_in_synpred112_ChemicalChunker651_static.FOLLOW_to_in_synpred112_ChemicalChunker651);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred113_ChemicalChunker654_static.FOLLOW_inAll_in_synpred113_ChemicalChunker654);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred119_ChemicalChunker673_static.FOLLOW_verb_in_synpred119_ChemicalChunker673);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:77: md
        {
        pushFollow(FOLLOW_md_in_synpred120_ChemicalChunker676_static.FOLLOW_md_in_synpred120_ChemicalChunker676);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred121_ChemicalChunker679_static.FOLLOW_adv_in_synpred121_ChemicalChunker679);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred122_ChemicalChunker682_static.FOLLOW_adj_in_synpred122_ChemicalChunker682);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred123_ChemicalChunker685_static.FOLLOW_neg_in_synpred123_ChemicalChunker685);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:49: ( md )*
        loop170:
        do {
            int alt170=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt170=1;
                }
                break;

            }

            switch (alt170) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred124_ChemicalChunker661_static.FOLLOW_md_in_synpred124_ChemicalChunker661);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop170;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:53: ( rbconj )?
        int alt171=2;
        switch ( input.LA(1) ) {
            case 126:
                {
                alt171=1;
                }
                break;
        }

        switch (alt171) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred124_ChemicalChunker664_static.FOLLOW_rbconj_in_synpred124_ChemicalChunker664);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:61: ( adv )*
        loop172:
        do {
            int alt172=2;
            switch ( input.LA(1) ) {
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt172=1;
                }
                break;

            }

            switch (alt172) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred124_ChemicalChunker667_static.FOLLOW_adv_in_synpred124_ChemicalChunker667);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop172;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:66: ( adj )?
        int alt173=2;
        switch ( input.LA(1) ) {
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt173=1;
                }
                break;
        }

        switch (alt173) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred124_ChemicalChunker670_static.FOLLOW_adj_in_synpred124_ChemicalChunker670);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:71: ( verb )+
        int cnt174=0;
        loop174:
        do {
            int alt174=2;
            switch ( input.LA(1) ) {
            case 80:
            case 81:
            case 82:
            case 83:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
            case 98:
            case 99:
            case 100:
            case 101:
            case 103:
            case 105:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 113:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 122:
            case 123:
            case 124:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt174=1;
                }
                break;

            }

            switch (alt174) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred124_ChemicalChunker673_static.FOLLOW_verb_in_synpred124_ChemicalChunker673);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt174 >= 1 ) break loop174;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(174, input);
                    throw eee;
            }
            cnt174++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:77: ( md )*
        loop175:
        do {
            int alt175=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt175=1;
                }
                break;

            }

            switch (alt175) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred124_ChemicalChunker676_static.FOLLOW_md_in_synpred124_ChemicalChunker676);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop175;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:81: ( adv )*
        loop176:
        do {
            int alt176=2;
            switch ( input.LA(1) ) {
            case 158:
            case 159:
            case 160:
            case 161:
                {
                alt176=1;
                }
                break;

            }

            switch (alt176) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred124_ChemicalChunker679_static.FOLLOW_adv_in_synpred124_ChemicalChunker679);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop176;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:86: ( adj )?
        int alt177=2;
        switch ( input.LA(1) ) {
            case 35:
            case 36:
            case 41:
            case 145:
            case 146:
            case 147:
                {
                alt177=1;
                }
                break;
        }

        switch (alt177) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred124_ChemicalChunker682_static.FOLLOW_adj_in_synpred124_ChemicalChunker682);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:91: ( neg )?
        int alt178=2;
        switch ( input.LA(1) ) {
            case 130:
                {
                alt178=1;
                }
                break;
        }

        switch (alt178) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred124_ChemicalChunker685_static.FOLLOW_neg_in_synpred124_ChemicalChunker685);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred125_ChemicalChunker691_static.FOLLOW_inoff_in_synpred125_ChemicalChunker691);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:107: ( cc )?
        int alt179=2;
        switch ( input.LA(1) ) {
            case 139:
                {
                alt179=1;
                }
                break;
        }

        switch (alt179) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred128_ChemicalChunker695_static.FOLLOW_cc_in_synpred128_ChemicalChunker695);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:111: ( comma )?
        int alt180=2;
        switch ( input.LA(1) ) {
            case 128:
                {
                alt180=1;
                }
                break;
        }

        switch (alt180) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred128_ChemicalChunker698_static.FOLLOW_comma_in_synpred128_ChemicalChunker698);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred128_ChemicalChunker701_static.FOLLOW_prepphrase_in_synpred128_ChemicalChunker701);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred138_ChemicalChunker
    public final void synpred138_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker731_static.FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker731);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred151_ChemicalChunker757_static.FOLLOW_vbdegass_in_synpred151_ChemicalChunker757);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred169_ChemicalChunker819_static.FOLLOW_dash_in_synpred169_ChemicalChunker819);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred169_ChemicalChunker821_static.FOLLOW_nounStructure_in_synpred169_ChemicalChunker821);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred172_ChemicalChunker836_static.FOLLOW_citation_in_synpred172_ChemicalChunker836);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred173_ChemicalChunker838_static.FOLLOW_cycles_in_synpred173_ChemicalChunker838);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred174_ChemicalChunker840_static.FOLLOW_molecule_in_synpred174_ChemicalChunker840);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred175_ChemicalChunker842_static.FOLLOW_apparatus_in_synpred175_ChemicalChunker842);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred176_ChemicalChunker844_static.FOLLOW_mixture_in_synpred176_ChemicalChunker844);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker846_static.FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker846);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:98: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred179_ChemicalChunker850_static.FOLLOW_nnstate_in_synpred179_ChemicalChunker850);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:106: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:106: nn
        {
        pushFollow(FOLLOW_nn_in_synpred180_ChemicalChunker852_static.FOLLOW_nn_in_synpred180_ChemicalChunker852);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:117: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:117: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred183_ChemicalChunker858_static.FOLLOW_nnadd_in_synpred183_ChemicalChunker858);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:151: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:151: range
        {
        pushFollow(FOLLOW_range_in_synpred186_ChemicalChunker864_static.FOLLOW_range_in_synpred186_ChemicalChunker864);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:202: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:202: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred192_ChemicalChunker876_static.FOLLOW_quantity_in_synpred192_ChemicalChunker876);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:211: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:211: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred193_ChemicalChunker878_static.FOLLOW_nnchementity_in_synpred193_ChemicalChunker878);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:267: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:267: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred199_ChemicalChunker890_static.FOLLOW_nnpressure_in_synpred199_ChemicalChunker890);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:397: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:397: number
        {
        pushFollow(FOLLOW_number_in_synpred212_ChemicalChunker916_static.FOLLOW_number_in_synpred212_ChemicalChunker916);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:404: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:404: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred213_ChemicalChunker918_static.FOLLOW_oscarCompound_in_synpred213_ChemicalChunker918);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred225_ChemicalChunker
    public final void synpred225_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker956_static.FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker956);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker958_static.FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker958);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker960_static.FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker960);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker962_static.FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker962);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker964_static.FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker964);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred231_ChemicalChunker1004_static.FOLLOW_advAdj_in_synpred231_ChemicalChunker1004);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1009_static.FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1009);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred233_ChemicalChunker1037_static.FOLLOW_advAdj_in_synpred233_ChemicalChunker1037);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred238_ChemicalChunker1053_static.FOLLOW_nntime_in_synpred238_ChemicalChunker1053);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred239_ChemicalChunker1084_static.FOLLOW_advAdj_in_synpred239_ChemicalChunker1084);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred244_ChemicalChunker1099_static.FOLLOW_nntemp_in_synpred244_ChemicalChunker1099);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred250_ChemicalChunker1272_static.FOLLOW_conjunction_in_synpred250_ChemicalChunker1272);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:15: ( conjunction )*
        loop181:
        do {
            int alt181=2;
            alt181 = dfa181.predict(input);
            switch (alt181) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred251_ChemicalChunker1272_static.FOLLOW_conjunction_in_synpred251_ChemicalChunker1272);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop181;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred251_ChemicalChunker1275_static.FOLLOW_apparatus_in_synpred251_ChemicalChunker1275);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred254_ChemicalChunker1292_static.FOLLOW_nnApp_in_synpred254_ChemicalChunker1292);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1319_static.FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1319);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred256_ChemicalChunker1323_static.FOLLOW_dash_in_synpred256_ChemicalChunker1323);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1325_static.FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1325);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred257_ChemicalChunker1339_static.FOLLOW_quantity_in_synpred257_ChemicalChunker1339);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred258_ChemicalChunker1341_static.FOLLOW_adj_in_synpred258_ChemicalChunker1341);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred259_ChemicalChunker1343_static.FOLLOW_nnpressure_in_synpred259_ChemicalChunker1343);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred260_ChemicalChunker1345_static.FOLLOW_nnadd_in_synpred260_ChemicalChunker1345);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred261_ChemicalChunker1347_static.FOLLOW_molecule_in_synpred261_ChemicalChunker1347);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred262_ChemicalChunker1349_static.FOLLOW_nnchementity_in_synpred262_ChemicalChunker1349);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred263_ChemicalChunker1351_static.FOLLOW_nnstate_in_synpred263_ChemicalChunker1351);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred264_ChemicalChunker1353_static.FOLLOW_nn_in_synpred264_ChemicalChunker1353);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred265_ChemicalChunker1366_static.FOLLOW_oscaront_in_synpred265_ChemicalChunker1366);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:24: ( oscarCompound1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred267_ChemicalChunker1390_static.FOLLOW_oscarCompound1_in_synpred267_ChemicalChunker1390);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:54: ( oscarCompound3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred269_ChemicalChunker1394_static.FOLLOW_oscarCompound3_in_synpred269_ChemicalChunker1394);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:93: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:93: adj
        {
        pushFollow(FOLLOW_adj_in_synpred271_ChemicalChunker1401_static.FOLLOW_adj_in_synpred271_ChemicalChunker1401);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:98: ( reference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:98: reference
        {
        pushFollow(FOLLOW_reference_in_synpred272_ChemicalChunker1404_static.FOLLOW_reference_in_synpred272_ChemicalChunker1404);
        reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:26: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred273_ChemicalChunker1479_static.FOLLOW_oscarcm_in_synpred273_ChemicalChunker1479);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:14: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:14: dash
        {
        pushFollow(FOLLOW_dash_in_synpred274_ChemicalChunker1505_static.FOLLOW_dash_in_synpred274_ChemicalChunker1505);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:19: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:19: apost
        {
        pushFollow(FOLLOW_apost_in_synpred275_ChemicalChunker1507_static.FOLLOW_apost_in_synpred275_ChemicalChunker1507);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:14: ( dash oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:14: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred276_ChemicalChunker1521_static.FOLLOW_dash_in_synpred276_ChemicalChunker1521);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred276_ChemicalChunker1523_static.FOLLOW_oscarcm_in_synpred276_ChemicalChunker1523);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:30: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:30: dash
        {
        pushFollow(FOLLOW_dash_in_synpred277_ChemicalChunker1528_static.FOLLOW_dash_in_synpred277_ChemicalChunker1528);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:18: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:18: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred278_ChemicalChunker1556_static.FOLLOW_moleculeamount3_in_synpred278_ChemicalChunker1556);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:34: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:34: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred279_ChemicalChunker1558_static.FOLLOW_moleculeamount1_in_synpred279_ChemicalChunker1558);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred280_ChemicalChunker1572_static.FOLLOW_quantity_in_synpred280_ChemicalChunker1572);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred282_ChemicalChunker1594_static.FOLLOW_quantity_in_synpred282_ChemicalChunker1594);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred283_ChemicalChunker1596_static.FOLLOW_mixture_in_synpred283_ChemicalChunker1596);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:58: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred286_ChemicalChunker1610_static.FOLLOW_mixture_in_synpred286_ChemicalChunker1610);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred287_ChemicalChunker1620_static.FOLLOW_quantity_in_synpred287_ChemicalChunker1620);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred288_ChemicalChunker1622_static.FOLLOW_mixture_in_synpred288_ChemicalChunker1622);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1626_static.FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1626);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:63: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:63: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred291_ChemicalChunker1636_static.FOLLOW_quantity_in_synpred291_ChemicalChunker1636);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:40: ( ( cdAlphanumType | number ) ( quantity )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:40: ( cdAlphanumType | number ) ( quantity )+
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:40: ( cdAlphanumType | number )
        int alt182=2;
        switch ( input.LA(1) ) {
        case 137:
            {
            alt182=1;
            }
            break;
        case 34:
        case 140:
            {
            alt182=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 182, 0, input);

            throw nvae;
        }

        switch (alt182) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:41: cdAlphanumType
                {
                pushFollow(FOLLOW_cdAlphanumType_in_synpred292_ChemicalChunker1632_static.FOLLOW_cdAlphanumType_in_synpred292_ChemicalChunker1632);
                cdAlphanumType();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:56: number
                {
                pushFollow(FOLLOW_number_in_synpred292_ChemicalChunker1634_static.FOLLOW_number_in_synpred292_ChemicalChunker1634);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:63: ( quantity )+
        int cnt183=0;
        loop183:
        do {
            int alt183=2;
            switch ( input.LA(1) ) {
            case 34:
            case 137:
            case 140:
                {
                alt183=1;
                }
                break;

            }

            switch (alt183) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
        	    {
        	    pushFollow(FOLLOW_quantity_in_synpred292_ChemicalChunker1636_static.FOLLOW_quantity_in_synpred292_ChemicalChunker1636);
        	    quantity();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt183 >= 1 ) break loop183;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(183, input);
                    throw eee;
            }
            cnt183++;
        } while (true);


        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:75: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:75: citation
        {
        pushFollow(FOLLOW_citation_in_synpred293_ChemicalChunker1641_static.FOLLOW_citation_in_synpred293_ChemicalChunker1641);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:84: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:84: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred294_ChemicalChunker1643_static.FOLLOW_quantity_in_synpred294_ChemicalChunker1643);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:93: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:93: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred296_ChemicalChunker1645_static.FOLLOW_comma_in_synpred296_ChemicalChunker1645);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:99: ( quantity1Node | citationStructure )
        int alt184=2;
        alt184 = dfa184.predict(input);
        switch (alt184) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:100: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred296_ChemicalChunker1648_static.FOLLOW_quantity1Node_in_synpred296_ChemicalChunker1648);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:114: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred296_ChemicalChunker1650_static.FOLLOW_citationStructure_in_synpred296_ChemicalChunker1650);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:133: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:133: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred297_ChemicalChunker1653_static.FOLLOW_mixture_in_synpred297_ChemicalChunker1653);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:27: ( unnamedmoleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:27: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred299_ChemicalChunker1684_static.FOLLOW_unnamedmoleculeamount1_in_synpred299_ChemicalChunker1684);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:52: ( unnamedmoleculeamount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:52: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred300_ChemicalChunker1688_static.FOLLOW_unnamedmoleculeamount2_in_synpred300_ChemicalChunker1688);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:77: ( unnamedmoleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:77: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred301_ChemicalChunker1692_static.FOLLOW_unnamedmoleculeamount3_in_synpred301_ChemicalChunker1692);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:31: ( cdAlphanum )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:31: cdAlphanum
        {
        pushFollow(FOLLOW_cdAlphanum_in_synpred302_ChemicalChunker1718_static.FOLLOW_cdAlphanum_in_synpred302_ChemicalChunker1718);
        cdAlphanum();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred303_ChemicalChunker1722_static.FOLLOW_quantity_in_synpred303_ChemicalChunker1722);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred304_ChemicalChunker1724_static.FOLLOW_mixture_in_synpred304_ChemicalChunker1724);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:32: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:32: citation
        {
        pushFollow(FOLLOW_citation_in_synpred307_ChemicalChunker1759_static.FOLLOW_citation_in_synpred307_ChemicalChunker1759);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:41: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:41: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred308_ChemicalChunker1761_static.FOLLOW_quantity_in_synpred308_ChemicalChunker1761);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:50: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:50: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred309_ChemicalChunker1763_static.FOLLOW_mixture_in_synpred309_ChemicalChunker1763);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( jj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred310_ChemicalChunker1778_static.FOLLOW_jj_in_synpred310_ChemicalChunker1778);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( ( jj )? noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( jj )? noun
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( jj )?
        int alt185=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA185_3 = input.LA(3);

                        if ( (synpred310_ChemicalChunker()) ) {
                            alt185=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt185) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred311_ChemicalChunker1778_static.FOLLOW_jj_in_synpred311_ChemicalChunker1778);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred311_ChemicalChunker1781_static.FOLLOW_noun_in_synpred311_ChemicalChunker1781);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred312_ChemicalChunker1792_static.FOLLOW_quantity_in_synpred312_ChemicalChunker1792);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred317_ChemicalChunker1898_static.FOLLOW_comma_in_synpred317_ChemicalChunker1898);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred317_ChemicalChunker1901_static.FOLLOW_measurements_in_synpred317_ChemicalChunker1901);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:43: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred320_ChemicalChunker1929_static.FOLLOW_dt_in_synpred320_ChemicalChunker1929);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred321_ChemicalChunker1941_static.FOLLOW_measurementtypes_in_synpred321_ChemicalChunker1941);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:29: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:29: yield
        {
        pushFollow(FOLLOW_yield_in_synpred326_ChemicalChunker1974_static.FOLLOW_yield_in_synpred326_ChemicalChunker1974);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred336_ChemicalChunker2219_static.FOLLOW_fw_in_synpred336_ChemicalChunker2219);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred337_ChemicalChunker2221_static.FOLLOW_verb_in_synpred337_ChemicalChunker2221);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred338_ChemicalChunker2223_static.FOLLOW_nn_in_synpred338_ChemicalChunker2223);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:31: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:31: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred339_ChemicalChunker2225_static.FOLLOW_quantity2Node_in_synpred339_ChemicalChunker2225);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:58: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:58: stop
        {
        pushFollow(FOLLOW_stop_in_synpred342_ChemicalChunker2231_static.FOLLOW_stop_in_synpred342_ChemicalChunker2231);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred343_ChemicalChunker
    public final void synpred343_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:63: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:63: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred343_ChemicalChunker2233_static.FOLLOW_oscarCompound_in_synpred343_ChemicalChunker2233);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:77: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:77: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred344_ChemicalChunker2235_static.FOLLOW_molecule_in_synpred344_ChemicalChunker2235);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred345_ChemicalChunker
    public final void synpred345_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:86: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:86: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred345_ChemicalChunker2237_static.FOLLOW_unnamedmolecule_in_synpred345_ChemicalChunker2237);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_ChemicalChunker

    // $ANTLR start synpred347_ChemicalChunker
    public final void synpred347_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:107: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:107: sym
        {
        pushFollow(FOLLOW_sym_in_synpred347_ChemicalChunker2241_static.FOLLOW_sym_in_synpred347_ChemicalChunker2241);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:111: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:111: cd
        {
        pushFollow(FOLLOW_cd_in_synpred348_ChemicalChunker2243_static.FOLLOW_cd_in_synpred348_ChemicalChunker2243);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:114: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:114: noun
        {
        pushFollow(FOLLOW_noun_in_synpred349_ChemicalChunker2245_static.FOLLOW_noun_in_synpred349_ChemicalChunker2245);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred351_ChemicalChunker
    public final void synpred351_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:125: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:125: cd
        {
        pushFollow(FOLLOW_cd_in_synpred351_ChemicalChunker2249_static.FOLLOW_cd_in_synpred351_ChemicalChunker2249);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_ChemicalChunker

    // $ANTLR start synpred352_ChemicalChunker
    public final void synpred352_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:128: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:128: comma
        {
        pushFollow(FOLLOW_comma_in_synpred352_ChemicalChunker2251_static.FOLLOW_comma_in_synpred352_ChemicalChunker2251);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_ChemicalChunker

    // $ANTLR start synpred353_ChemicalChunker
    public final void synpred353_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:134: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:134: adj
        {
        pushFollow(FOLLOW_adj_in_synpred353_ChemicalChunker2253_static.FOLLOW_adj_in_synpred353_ChemicalChunker2253);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_ChemicalChunker

    // $ANTLR start synpred355_ChemicalChunker
    public final void synpred355_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:151: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:151: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred355_ChemicalChunker2261_static.FOLLOW_minimixture_in_synpred355_ChemicalChunker2261);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:163: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:163: fw
        {
        pushFollow(FOLLOW_fw_in_synpred356_ChemicalChunker2263_static.FOLLOW_fw_in_synpred356_ChemicalChunker2263);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:166: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:166: verb
        {
        pushFollow(FOLLOW_verb_in_synpred357_ChemicalChunker2265_static.FOLLOW_verb_in_synpred357_ChemicalChunker2265);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred358_ChemicalChunker
    public final void synpred358_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:171: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:171: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2267_static.FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2267);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_ChemicalChunker

    // $ANTLR start synpred359_ChemicalChunker
    public final void synpred359_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:185: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:185: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred359_ChemicalChunker2269_static.FOLLOW_nnyield_in_synpred359_ChemicalChunker2269);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:206: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:206: stop
        {
        pushFollow(FOLLOW_stop_in_synpred362_ChemicalChunker2275_static.FOLLOW_stop_in_synpred362_ChemicalChunker2275);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred363_ChemicalChunker
    public final void synpred363_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:211: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:211: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred363_ChemicalChunker2277_static.FOLLOW_oscarCompound_in_synpred363_ChemicalChunker2277);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:225: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:225: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred364_ChemicalChunker2279_static.FOLLOW_molecule_in_synpred364_ChemicalChunker2279);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred365_ChemicalChunker
    public final void synpred365_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:234: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:234: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred365_ChemicalChunker2281_static.FOLLOW_unnamedmolecule_in_synpred365_ChemicalChunker2281);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:255: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:255: sym
        {
        pushFollow(FOLLOW_sym_in_synpred367_ChemicalChunker2285_static.FOLLOW_sym_in_synpred367_ChemicalChunker2285);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:259: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:259: cd
        {
        pushFollow(FOLLOW_cd_in_synpred368_ChemicalChunker2287_static.FOLLOW_cd_in_synpred368_ChemicalChunker2287);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred369_ChemicalChunker
    public final void synpred369_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:262: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:262: noun
        {
        pushFollow(FOLLOW_noun_in_synpred369_ChemicalChunker2289_static.FOLLOW_noun_in_synpred369_ChemicalChunker2289);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred369_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:273: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:273: cd
        {
        pushFollow(FOLLOW_cd_in_synpred371_ChemicalChunker2293_static.FOLLOW_cd_in_synpred371_ChemicalChunker2293);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred372_ChemicalChunker
    public final void synpred372_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:276: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:276: comma
        {
        pushFollow(FOLLOW_comma_in_synpred372_ChemicalChunker2295_static.FOLLOW_comma_in_synpred372_ChemicalChunker2295);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_ChemicalChunker

    // $ANTLR start synpred373_ChemicalChunker
    public final void synpred373_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:282: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:282: adj
        {
        pushFollow(FOLLOW_adj_in_synpred373_ChemicalChunker2297_static.FOLLOW_adj_in_synpred373_ChemicalChunker2297);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:292: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:292: stop
        {
        pushFollow(FOLLOW_stop_in_synpred375_ChemicalChunker2301_static.FOLLOW_stop_in_synpred375_ChemicalChunker2301);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred377_ChemicalChunker
    public final void synpred377_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:24: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred377_ChemicalChunker2363_static.FOLLOW_fw_in_synpred377_ChemicalChunker2363);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_ChemicalChunker

    // $ANTLR start synpred378_ChemicalChunker
    public final void synpred378_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:27: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:27: nn
        {
        pushFollow(FOLLOW_nn_in_synpred378_ChemicalChunker2365_static.FOLLOW_nn_in_synpred378_ChemicalChunker2365);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:30: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:30: verb
        {
        pushFollow(FOLLOW_verb_in_synpred379_ChemicalChunker2367_static.FOLLOW_verb_in_synpred379_ChemicalChunker2367);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred380_ChemicalChunker
    public final void synpred380_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:35: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:35: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred380_ChemicalChunker2369_static.FOLLOW_quantity2Node_in_synpred380_ChemicalChunker2369);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:62: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:62: stop
        {
        pushFollow(FOLLOW_stop_in_synpred383_ChemicalChunker2375_static.FOLLOW_stop_in_synpred383_ChemicalChunker2375);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:67: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:67: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred384_ChemicalChunker2377_static.FOLLOW_oscarCompound_in_synpred384_ChemicalChunker2377);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:81: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:81: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred385_ChemicalChunker2379_static.FOLLOW_molecule_in_synpred385_ChemicalChunker2379);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:90: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:90: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred386_ChemicalChunker2381_static.FOLLOW_unnamedmolecule_in_synpred386_ChemicalChunker2381);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:111: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:111: sym
        {
        pushFollow(FOLLOW_sym_in_synpred388_ChemicalChunker2385_static.FOLLOW_sym_in_synpred388_ChemicalChunker2385);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:115: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:115: cd
        {
        pushFollow(FOLLOW_cd_in_synpred389_ChemicalChunker2387_static.FOLLOW_cd_in_synpred389_ChemicalChunker2387);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:118: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:118: noun
        {
        pushFollow(FOLLOW_noun_in_synpred390_ChemicalChunker2389_static.FOLLOW_noun_in_synpred390_ChemicalChunker2389);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:129: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:129: cd
        {
        pushFollow(FOLLOW_cd_in_synpred392_ChemicalChunker2393_static.FOLLOW_cd_in_synpred392_ChemicalChunker2393);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:132: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:132: comma
        {
        pushFollow(FOLLOW_comma_in_synpred393_ChemicalChunker2395_static.FOLLOW_comma_in_synpred393_ChemicalChunker2395);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:138: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:138: adj
        {
        pushFollow(FOLLOW_adj_in_synpred394_ChemicalChunker2397_static.FOLLOW_adj_in_synpred394_ChemicalChunker2397);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:155: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:155: fw
        {
        pushFollow(FOLLOW_fw_in_synpred396_ChemicalChunker2405_static.FOLLOW_fw_in_synpred396_ChemicalChunker2405);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:158: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:158: verb
        {
        pushFollow(FOLLOW_verb_in_synpred397_ChemicalChunker2407_static.FOLLOW_verb_in_synpred397_ChemicalChunker2407);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:163: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:163: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred398_ChemicalChunker2409_static.FOLLOW_quantity2Node_in_synpred398_ChemicalChunker2409);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:177: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:177: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred399_ChemicalChunker2411_static.FOLLOW_nnyield_in_synpred399_ChemicalChunker2411);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:198: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:198: stop
        {
        pushFollow(FOLLOW_stop_in_synpred402_ChemicalChunker2417_static.FOLLOW_stop_in_synpred402_ChemicalChunker2417);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:203: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:203: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2419_static.FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2419);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:217: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:217: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred404_ChemicalChunker2421_static.FOLLOW_molecule_in_synpred404_ChemicalChunker2421);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:226: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:226: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2423_static.FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2423);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:247: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:247: sym
        {
        pushFollow(FOLLOW_sym_in_synpred407_ChemicalChunker2427_static.FOLLOW_sym_in_synpred407_ChemicalChunker2427);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:251: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:251: cd
        {
        pushFollow(FOLLOW_cd_in_synpred408_ChemicalChunker2429_static.FOLLOW_cd_in_synpred408_ChemicalChunker2429);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:254: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:254: noun
        {
        pushFollow(FOLLOW_noun_in_synpred409_ChemicalChunker2431_static.FOLLOW_noun_in_synpred409_ChemicalChunker2431);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:265: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:265: cd
        {
        pushFollow(FOLLOW_cd_in_synpred411_ChemicalChunker2435_static.FOLLOW_cd_in_synpred411_ChemicalChunker2435);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:268: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:268: comma
        {
        pushFollow(FOLLOW_comma_in_synpred412_ChemicalChunker2437_static.FOLLOW_comma_in_synpred412_ChemicalChunker2437);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:274: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:274: adj
        {
        pushFollow(FOLLOW_adj_in_synpred413_ChemicalChunker2439_static.FOLLOW_adj_in_synpred413_ChemicalChunker2439);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:284: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:284: stop
        {
        pushFollow(FOLLOW_stop_in_synpred415_ChemicalChunker2443_static.FOLLOW_stop_in_synpred415_ChemicalChunker2443);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred432_ChemicalChunker
    public final void synpred432_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:10: ( numberratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred432_ChemicalChunker2590_static.FOLLOW_numberratio_in_synpred432_ChemicalChunker2590);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_ChemicalChunker

    // $ANTLR start synpred433_ChemicalChunker
    public final void synpred433_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:20: ( colon cdAlphanum )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:20: colon cdAlphanum
        {
        pushFollow(FOLLOW_colon_in_synpred433_ChemicalChunker2618_static.FOLLOW_colon_in_synpred433_ChemicalChunker2618);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cdAlphanum_in_synpred433_ChemicalChunker2620_static.FOLLOW_cdAlphanum_in_synpred433_ChemicalChunker2620);
        cdAlphanum();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_ChemicalChunker

    // $ANTLR start synpred434_ChemicalChunker
    public final void synpred434_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:37: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:37: cd
        {
        pushFollow(FOLLOW_cd_in_synpred434_ChemicalChunker2622_static.FOLLOW_cd_in_synpred434_ChemicalChunker2622);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred434_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred435_ChemicalChunker2638_static.FOLLOW_colon_in_synpred435_ChemicalChunker2638);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred435_ChemicalChunker2640_static.FOLLOW_noun_in_synpred435_ChemicalChunker2640);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred434_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred434_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA184 dfa184 = new DFA184(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0090\uffff";
    static final String DFA2_eofS =
        "\1\1\u008f\uffff";
    static final String DFA2_minS =
        "\1\42\1\uffff\u008c\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00ae\1\uffff\u008c\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008c\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\122\1\74\1\62\1\u008a\1\7\1\141\1\u0086\1\47\1\131\1"+
        "\53\1\76\1\106\1\137\1\26\1\54\1\43\1\u0082\1\25\1\101\1\60\1\114"+
        "\1\56\1\172\1\133\1\177\1\110\1\127\1\16\1\14\1\37\1\105\1\67\1"+
        "\1\1\50\1\42\1\72\1\136\1\167\1\115\1\132\1\113\1\17\1\2\1\64\1"+
        "\34\1\135\1\171\1\5\1\u0080\1\160\1\134\1\102\1\111\1\151\1\u0087"+
        "\1\140\1\77\1\10\1\166\1\170\1\125\1\120\1\73\1\147\1\152\1\126"+
        "\1\164\1\173\1\104\1\112\1\145\1\36\1\153\1\30\1\61\1\3\1\71\1\21"+
        "\1\154\1\u0084\1\161\1\155\1\174\1\175\1\130\1\u008b\1\6\1\117\1"+
        "\23\1\162\1\52\1\4\1\15\1\33\1\32\1\163\1\165\1\63\1\46\1\13\1\35"+
        "\1\57\1\70\1\u0081\1\u0088\1\150\1\156\1\142\1\116\1\65\1\45\1\31"+
        "\1\12\1\176\1\143\1\121\1\107\1\44\1\41\1\11\1\144\1\157\1\u0089"+
        "\1\123\1\51\1\66\1\103\1\u0085\1\u0083\1\146\1\27\1\22\1\124\1\100"+
        "\1\40\1\55\1\24\1\0\1\20\1\75\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\5\1\11\1\13\1\106\1\41\1\44\1\u0083\1\12\1\32\1\112\1\113"+
            "\1\111\1\117\1\120\1\127\1\130\1\114\1\126\1\121\1\123\1\115"+
            "\1\116\1\125\1\124\1\122\1\21\1\42\1\u0084\1\52\1\u0085\1\43"+
            "\1\45\1\61\1\20\1\46\1\47\1\50\1\51\1\14\1\53\1\54\1\55\1\56"+
            "\1\57\1\40\1\17\1\141\1\u0081\1\142\1\145\1\15\1\64\1\147\1"+
            "\146\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\23\1\157\1"+
            "\60\1\160\1\144\1\161\1\162\1\66\1\163\1\67\1\164\1\70\1\165"+
            "\1\166\1\143\1\167\1\170\1\71\1\171\1\62\1\172\1\173\1\174\1"+
            "\72\1\175\1\37\1\63\1\176\1\177\1\u0080\1\35\1\132\1\u0086\1"+
            "\16\1\u0087\1\u0082\1\u0088\1\1\1\u0089\1\65\1\u008a\1\24\1"+
            "\3\1\u008b\1\u008c\1\4\1\2\1\100\1\73\1\110\1\6\1\7\1\10\1\103"+
            "\1\131\1\22\1\36\1\31\1\104\1\101\1\105\1\33\1\34\1\25\1\26"+
            "\1\30\1\27\1\74\1\107\1\u008d\1\133\1\136\1\135\1\140\1\134"+
            "\1\137\1\75\1\102\1\76\1\77",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 53:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u0087\uffff";
    static final String DFA4_eofS =
        "\1\13\u0086\uffff";
    static final String DFA4_minS =
        "\1\42\12\0\1\uffff\167\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00ae\12\0\1\uffff\167\0\4\uffff";
    static final String DFA4_acceptS =
        "\13\uffff\1\5\167\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\122\1\104\1\111\1\165\1\162\1\41\1\52\1\0\1\155\1\114"+
        "\1\uffff\1\161\1\61\1\156\1\173\1\152\1\51\1\26\1\124\1\100\1\136"+
        "\1\45\1\13\1\7\1\141\1\35\1\120\1\160\1\175\1\50\1\150\1\147\1\112"+
        "\1\64\1\22\1\27\1\12\1\67\1\106\1\176\1\10\1\65\1\144\1\121\1\135"+
        "\1\u0080\1\33\1\14\1\133\1\113\1\17\1\126\1\53\1\151\1\170\1\125"+
        "\1\60\1\62\1\4\1\164\1\24\1\157\1\5\1\77\1\42\1\105\1\46\1\40\1"+
        "\71\1\30\1\47\1\123\1\1\1\70\1\6\1\101\1\167\1\103\1\36\1\43\1\32"+
        "\1\172\1\66\1\142\1\134\1\34\1\23\1\74\1\137\1\163\1\130\1\44\1"+
        "\55\1\115\1\20\1\31\1\116\1\11\1\73\1\171\1\25\1\117\1\132\1\145"+
        "\1\56\1\75\1\110\1\16\1\37\1\154\1\174\1\143\1\76\1\57\1\21\1\166"+
        "\1\146\1\131\1\107\1\63\1\3\1\177\1\153\1\140\1\127\1\72\1\54\1"+
        "\102\1\15\1\2\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\21\1\10\1\12\1\107\1\42\1\45\1\13\1\11\1\33\1\113\1\114"+
            "\1\112\1\120\1\121\1\130\1\131\1\115\1\127\1\122\1\124\1\116"+
            "\1\117\1\126\1\125\1\123\1\26\1\43\1\13\1\53\1\13\1\44\1\46"+
            "\1\62\1\25\1\47\1\50\1\51\1\52\1\22\1\54\1\55\1\56\1\57\1\60"+
            "\1\41\1\24\1\141\1\u0081\1\142\1\145\1\23\1\65\1\147\1\146\1"+
            "\150\1\151\1\152\1\153\1\154\1\155\1\156\1\30\1\157\1\61\1\160"+
            "\1\144\1\161\1\162\1\67\1\163\1\70\1\164\1\71\1\165\1\166\1"+
            "\143\1\167\1\170\1\72\1\171\1\63\1\172\1\173\1\174\1\73\1\175"+
            "\1\40\1\64\1\176\1\177\1\u0080\1\36\1\15\1\13\1\14\1\13\1\u0082"+
            "\3\13\1\66\1\13\1\31\1\17\2\13\1\20\1\16\1\101\1\74\1\111\1"+
            "\5\1\6\1\7\1\104\1\132\1\27\1\37\1\32\1\105\1\102\1\106\1\34"+
            "\1\35\1\1\1\2\1\4\1\3\1\75\1\110\1\13\1\133\1\136\1\135\1\140"+
            "\1\134\1\137\1\76\1\103\1\77\1\100",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 55:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\32\uffff";
    static final String DFA5_eofS =
        "\1\1\31\uffff";
    static final String DFA5_minS =
        "\1\42\1\uffff\13\41\13\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00ae\1\uffff\13\41\13\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\15\uffff\1\5\1\4\1\11\1\3\1\12\1\1\1\7\1\2\1\0\1\6\1\10\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\125\1\1\14\21\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\42\1\uffff\3\41\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00ae\1\uffff\3\41\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\0\1\2\1\1\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\134\1\1\3\1\1\1\2\12\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\107\uffff";
    static final String DFA8_eofS =
        "\107\uffff";
    static final String DFA8_minS =
        "\1\42\22\0\64\uffff";
    static final String DFA8_maxS =
        "\1\u00ae\22\0\64\uffff";
    static final String DFA8_acceptS =
        "\23\uffff\1\2\62\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\64\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\4\1\10\1\12\3\23\1\uffff\1\11\1\23\20\uffff\1\20\1\23\1"+
            "\uffff\1\23\1\uffff\3\23\1\17\4\23\1\13\6\23\1\16\4\uffff\1"+
            "\14\1\23\11\uffff\1\22\1\uffff\1\23\4\uffff\1\23\1\uffff\1\23"+
            "\1\uffff\1\23\5\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\2\23\3\uffff\1\23\2\uffff\1\15\5\uffff\1\23\1\uffff\1\23\1"+
            "\2\2\uffff\1\3\1\1\2\23\1\uffff\1\5\1\6\1\7\1\23\1\uffff\1\21"+
            "\14\23\10\uffff\4\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "69:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\42\6\41\2\uffff\6\0";
    static final String DFA11_maxS =
        "\1\u00ae\6\41\2\uffff\6\0";
    static final String DFA11_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA11_specialS =
        "\11\uffff\1\4\1\0\1\2\1\3\1\5\1\1}>";
    static final String[] DFA11_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\20\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7"+
            "\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10"+
            "\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 74:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\106\uffff";
    static final String DFA12_eofS =
        "\1\1\105\uffff";
    static final String DFA12_minS =
        "\1\42\1\uffff\100\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00ae\1\uffff\100\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\100\uffff\1\1\1\2\1\3\1\4";
    static final String DFA12_specialS =
        "\2\uffff\1\15\1\76\1\5\1\50\1\7\1\71\1\57\1\31\1\66\1\26\1\17\1"+
        "\56\1\2\1\27\1\12\1\46\1\70\1\47\1\53\1\37\1\16\1\24\1\74\1\32\1"+
        "\11\1\40\1\33\1\34\1\0\1\54\1\41\1\65\1\42\1\10\1\64\1\52\1\3\1"+
        "\61\1\51\1\1\1\72\1\67\1\77\1\55\1\75\1\25\1\14\1\21\1\35\1\30\1"+
        "\45\1\62\1\44\1\13\1\73\1\6\1\63\1\43\1\4\1\23\1\22\1\20\1\36\1"+
        "\60\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\14\1\6\1\10\1\101\1\34\1\37\1\1\1\7\1\16\20\1\1\25\1\35"+
            "\1\1\1\45\1\1\1\36\1\40\1\54\1\24\1\41\1\42\1\43\1\44\1\22\1"+
            "\46\1\47\1\50\1\51\1\52\1\33\1\15\4\1\1\23\1\57\11\1\1\27\1"+
            "\1\1\53\4\1\1\61\1\1\1\62\1\1\1\63\5\1\1\64\1\1\1\55\3\1\1\65"+
            "\1\1\1\32\1\56\3\1\1\30\2\1\1\2\5\1\1\60\2\1\1\12\2\1\1\13\1"+
            "\21\1\73\1\66\1\1\1\3\1\4\1\5\1\76\1\1\1\26\1\31\1\11\1\77\1"+
            "\74\1\100\1\17\1\20\4\1\1\67\10\1\1\70\1\75\1\71\1\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 74:24: ( dissolvePhrase | ratio | noun | number )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\110\uffff";
    static final String DFA16_eofS =
        "\1\1\107\uffff";
    static final String DFA16_minS =
        "\1\42\1\uffff\105\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00ae\1\uffff\105\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\71\1\22\1\7\1\64\1\32\1\66\1\50\1\46\1\57\1\2\1\62\1"+
        "\74\1\33\1\41\1\10\1\13\1\56\1\30\1\77\1\35\1\63\1\3\1\60\1\6\1"+
        "\43\1\72\1\44\1\37\1\65\1\47\1\11\1\75\1\4\1\53\1\17\1\100\1\15"+
        "\1\12\1\70\1\55\1\67\1\104\1\52\1\5\1\73\1\42\1\0\1\21\1\51\1\27"+
        "\1\40\1\20\1\16\1\24\1\45\1\26\1\34\1\61\1\102\1\23\1\76\1\36\1"+
        "\1\1\54\1\14\1\101\1\103\1\25\1\31\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\21\1\11\1\13\1\106\1\41\1\44\1\1\1\12\1\32\20\1\1\26\1\42"+
            "\1\1\1\52\1\1\1\43\1\45\1\61\1\25\1\46\1\47\1\50\1\51\1\22\1"+
            "\53\1\54\1\55\1\56\1\57\1\40\1\24\4\1\1\23\1\64\11\1\1\30\1"+
            "\1\1\60\4\1\1\66\1\1\1\67\1\1\1\70\5\1\1\71\1\1\1\62\3\1\1\72"+
            "\1\1\1\37\1\63\3\1\1\35\2\1\1\15\5\1\1\65\2\1\1\17\1\1\1\14"+
            "\1\20\1\16\1\100\1\73\1\1\1\6\1\7\1\10\1\103\1\1\1\27\1\36\1"+
            "\31\1\104\1\101\1\105\1\33\1\34\1\2\1\3\1\5\1\4\1\74\10\1\1"+
            "\75\1\102\1\76\1\77",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 74:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | number ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA13_static {
    static final String DFA13_eotS =
        "\106\uffff";
    static final String DFA13_eofS =
        "\106\uffff";
    static final String DFA13_minS =
        "\1\42\16\uffff\1\0\66\uffff";
    static final String DFA13_maxS =
        "\1\u00ae\16\uffff\1\0\66\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\103\uffff\1\1";
    static final String DFA13_specialS =
        "\17\uffff\1\0\66\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\20\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\17\5\uffff\1\1\2\uffff\1\1\1\uffff\1\105\4\1"+
            "\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_static.DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_static.DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_static.DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_static.DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_static.DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_static.DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 74:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA13_15 = input.LA(1);

                         
                        int index13_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\42\6\41\2\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00ae\6\41\2\uffff\6\0";
    static final String DFA14_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\2\1\0\1\5\1\4\1\3\1\1}>";
    static final String[] DFA14_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\20\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7"+
            "\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10"+
            "\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 74:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\105\uffff";
    static final String DFA15_eofS =
        "\105\uffff";
    static final String DFA15_minS =
        "\1\42\100\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00ae\100\0\4\uffff";
    static final String DFA15_acceptS =
        "\101\uffff\1\1\1\2\1\3\1\4";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\12\1\4\1\6\1\100\1\33\1\36\1\uffff\1\5\1\15\20\uffff\1\24"+
            "\1\34\1\uffff\1\44\1\uffff\1\35\1\37\1\53\1\23\1\40\1\41\1\42"+
            "\1\43\1\21\1\45\1\46\1\47\1\50\1\51\1\32\1\14\4\uffff\1\22\1"+
            "\56\11\uffff\1\26\1\uffff\1\52\4\uffff\1\60\1\uffff\1\61\1\uffff"+
            "\1\62\5\uffff\1\63\1\uffff\1\54\3\uffff\1\64\1\uffff\1\31\1"+
            "\55\3\uffff\1\27\2\uffff\1\13\5\uffff\1\57\2\uffff\1\10\2\uffff"+
            "\1\11\1\20\1\72\1\65\1\uffff\1\1\1\2\1\3\1\75\1\uffff\1\25\1"+
            "\30\1\7\1\76\1\73\1\77\1\16\1\17\4\uffff\1\66\10\uffff\1\67"+
            "\1\74\1\70\1\71",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "74:85: ( dissolvePhrase | ratio | noun | number )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\20\uffff";
    static final String DFA18_eofS =
        "\1\16\17\uffff";
    static final String DFA18_minS =
        "\1\42\15\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00ae\15\0\2\uffff";
    static final String DFA18_acceptS =
        "\16\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\12\1\7\1\4\1\5\1\3\1\0\1\10\1\1\1\13\1\2\1\6\1\11\1"+
        "\14\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\12\1\4\1\6\4\16\1\5\1\15\44\16\1\14\60\16\1\13\10\16\1\10"+
            "\2\16\1\11\4\16\1\1\1\2\1\3\4\16\1\7\26\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "74:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\42\7\uffff\1\0\6\uffff";
    static final String DFA20_maxS =
        "\1\u0098\7\uffff\1\0\6\uffff";
    static final String DFA20_acceptS =
        "\1\uffff\1\1\14\uffff\1\2";
    static final String DFA20_specialS =
        "\10\uffff\1\0\6\uffff}>";
    static final String[] DFA20_transitionS = {
            "\3\1\4\uffff\2\1\44\uffff\1\1\60\uffff\1\1\10\uffff\1\10\2"+
            "\uffff\1\1\4\uffff\3\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "76:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\17\uffff";
    static final String DFA21_eofS =
        "\17\uffff";
    static final String DFA21_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u0098\6\41\1\uffff\6\0\1\uffff";
    static final String DFA21_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA21_specialS =
        "\10\uffff\1\3\1\1\1\0\1\4\1\5\1\2\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\44\uffff\1\7\60\uffff\1\7\10\uffff"+
            "\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "79:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\16\uffff";
    static final String DFA22_eofS =
        "\16\uffff";
    static final String DFA22_minS =
        "\1\42\4\0\11\uffff";
    static final String DFA22_maxS =
        "\1\u0093\4\0\11\uffff";
    static final String DFA22_acceptS =
        "\5\uffff\1\1\6\uffff\1\2\1\3";
    static final String DFA22_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\11\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\3\2\5\4\uffff\1\5\1\14\30\uffff\1\15\13\uffff\1\5\60\uffff"+
            "\1\4\10\uffff\1\1\2\uffff\1\2\4\uffff\3\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "79:14: ( molecule | unnamedmolecule | nnchementity )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index22_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA22_3 = input.LA(1);

                         
                        int index22_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index22_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA22_4 = input.LA(1);

                         
                        int index22_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index22_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\15\uffff";
    static final String DFA23_eofS =
        "\15\uffff";
    static final String DFA23_minS =
        "\1\42\4\0\10\uffff";
    static final String DFA23_maxS =
        "\1\u0093\4\0\10\uffff";
    static final String DFA23_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\3\2\5\4\uffff\1\5\1\14\44\uffff\1\5\60\uffff\1\4\10\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\3\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "79:56: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA26_static {
    static final String DFA26_eotS =
        "\17\uffff";
    static final String DFA26_eofS =
        "\17\uffff";
    static final String DFA26_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u0098\6\41\1\uffff\6\0\1\uffff";
    static final String DFA26_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA26_specialS =
        "\10\uffff\1\3\1\2\1\1\1\0\1\4\1\5\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\44\uffff\1\7\60\uffff\1\7\10\uffff"+
            "\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_static.DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_static.DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_static.DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_static.DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_static.DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_static.DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "79:97: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA28_static {
    static final String DFA28_eotS =
        "\15\uffff";
    static final String DFA28_eofS =
        "\15\uffff";
    static final String DFA28_minS =
        "\1\42\4\0\10\uffff";
    static final String DFA28_maxS =
        "\1\u0093\4\0\10\uffff";
    static final String DFA28_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA28_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\3\2\5\4\uffff\1\5\1\14\44\uffff\1\5\60\uffff\1\4\10\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\3\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_static.DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_static.DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_static.DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_static.DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_static.DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_static.DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "79:107: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA28_1 = input.LA(1);

                         
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA28_2 = input.LA(1);

                         
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA28_3 = input.LA(1);

                         
                        int index28_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index28_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA28_4 = input.LA(1);

                         
                        int index28_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index28_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA44_static {
    static final String DFA44_eotS =
        "\67\uffff";
    static final String DFA44_eofS =
        "\1\1\66\uffff";
    static final String DFA44_minS =
        "\1\42\1\uffff\64\0\1\uffff";
    static final String DFA44_maxS =
        "\1\u00ae\1\uffff\64\0\1\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA44_specialS =
        "\2\uffff\1\0\1\44\1\31\1\6\1\2\1\32\1\61\1\22\1\41\1\16\1\30\1"+
        "\53\1\45\1\11\1\23\1\46\1\62\1\10\1\26\1\34\1\1\1\50\1\33\1\54\1"+
        "\55\1\3\1\35\1\52\1\7\1\21\1\40\1\57\1\5\1\37\1\4\1\36\1\56\1\17"+
        "\1\51\1\14\1\25\1\63\1\15\1\42\1\13\1\24\1\47\1\12\1\43\1\60\1\27"+
        "\1\20\1\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\46\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\22\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_static.DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_static.DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_static.DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_static.DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_static.DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_static.DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "()+ loopback of 84:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA44_22 = input.LA(1);

                         
                        int index44_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA44_27 = input.LA(1);

                         
                        int index44_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA44_36 = input.LA(1);

                         
                        int index44_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_36);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA44_34 = input.LA(1);

                         
                        int index44_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_34);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA44_30 = input.LA(1);

                         
                        int index44_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_30);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA44_19 = input.LA(1);

                         
                        int index44_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_19);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA44_15 = input.LA(1);

                         
                        int index44_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_15);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA44_49 = input.LA(1);

                         
                        int index44_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_49);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA44_46 = input.LA(1);

                         
                        int index44_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_46);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA44_41 = input.LA(1);

                         
                        int index44_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_41);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA44_44 = input.LA(1);

                         
                        int index44_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_44);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_11);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA44_39 = input.LA(1);

                         
                        int index44_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_39);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA44_53 = input.LA(1);

                         
                        int index44_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_53);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA44_31 = input.LA(1);

                         
                        int index44_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_31);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA44_16 = input.LA(1);

                         
                        int index44_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_16);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA44_47 = input.LA(1);

                         
                        int index44_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_47);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA44_42 = input.LA(1);

                         
                        int index44_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_42);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA44_20 = input.LA(1);

                         
                        int index44_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_20);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA44_52 = input.LA(1);

                         
                        int index44_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_52);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA44_24 = input.LA(1);

                         
                        int index44_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_24);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA44_21 = input.LA(1);

                         
                        int index44_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_21);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_28);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA44_37 = input.LA(1);

                         
                        int index44_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_37);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA44_35 = input.LA(1);

                         
                        int index44_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_35);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA44_32 = input.LA(1);

                         
                        int index44_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_32);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA44_45 = input.LA(1);

                         
                        int index44_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_45);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA44_50 = input.LA(1);

                         
                        int index44_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_50);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_14);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_17);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA44_48 = input.LA(1);

                         
                        int index44_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_48);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA44_23 = input.LA(1);

                         
                        int index44_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_23);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA44_40 = input.LA(1);

                         
                        int index44_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_40);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA44_29 = input.LA(1);

                         
                        int index44_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_29);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA44_25 = input.LA(1);

                         
                        int index44_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_25);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA44_26 = input.LA(1);

                         
                        int index44_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_26);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA44_38 = input.LA(1);

                         
                        int index44_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_38);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA44_33 = input.LA(1);

                         
                        int index44_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_33);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA44_51 = input.LA(1);

                         
                        int index44_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_51);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA44_18 = input.LA(1);

                         
                        int index44_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_18);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA44_43 = input.LA(1);

                         
                        int index44_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA39_static {
    static final String DFA39_eotS =
        "\53\uffff";
    static final String DFA39_eofS =
        "\1\1\52\uffff";
    static final String DFA39_minS =
        "\1\42\1\uffff\50\0\1\uffff";
    static final String DFA39_maxS =
        "\1\u00ae\1\uffff\50\0\1\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA39_specialS =
        "\2\uffff\1\40\1\10\1\4\1\2\1\35\1\7\1\30\1\37\1\12\1\3\1\41\1\31"+
        "\1\45\1\17\1\23\1\44\1\47\1\26\1\36\1\24\1\43\1\33\1\20\1\34\1\13"+
        "\1\11\1\25\1\1\1\32\1\27\1\5\1\6\1\0\1\46\1\21\1\14\1\22\1\42\1"+
        "\15\1\16\1\uffff}>";
    static final String[] DFA39_transitionS = {
            "\56\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\50\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_static.DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_static.DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_static.DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_static.DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_static.DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_static.DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()+ loopback of 84:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA39_34 = input.LA(1);

                         
                        int index39_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_34);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_32);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA39_33 = input.LA(1);

                         
                        int index39_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_33);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA39_37 = input.LA(1);

                         
                        int index39_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_37);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA39_40 = input.LA(1);

                         
                        int index39_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_40);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA39_41 = input.LA(1);

                         
                        int index39_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_41);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA39_36 = input.LA(1);

                         
                        int index39_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_36);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA39_38 = input.LA(1);

                         
                        int index39_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_38);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_31);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA39_39 = input.LA(1);

                         
                        int index39_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_39);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA39_35 = input.LA(1);

                         
                        int index39_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_35);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA41_static {
    static final String DFA41_eotS =
        "\13\uffff";
    static final String DFA41_eofS =
        "\1\1\12\uffff";
    static final String DFA41_minS =
        "\1\42\1\uffff\4\41\4\0\1\uffff";
    static final String DFA41_maxS =
        "\1\u00ae\1\uffff\4\41\4\0\1\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA41_specialS =
        "\6\uffff\1\1\1\2\1\0\1\3\1\uffff}>";
    static final String[] DFA41_transitionS = {
            "\174\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_static.DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_static.DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_static.DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_static.DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_static.DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_static.DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 84:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\17\uffff";
    static final String DFA42_eofS =
        "\1\7\16\uffff";
    static final String DFA42_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00ae\6\41\1\uffff\6\0\1\uffff";
    static final String DFA42_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA42_specialS =
        "\10\uffff\1\2\1\1\1\3\1\4\1\5\1\0\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\147\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "84:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA48_static {
    static final String DFA48_eotS =
        "\u0090\uffff";
    static final String DFA48_eofS =
        "\1\13\u008f\uffff";
    static final String DFA48_minS =
        "\1\42\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\22\uffff\1\0\3\uffff"+
        "\1\0\40\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA48_maxS =
        "\1\u00ae\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\22\uffff\1\0"+
        "\3\uffff\1\0\40\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA48_acceptS =
        "\13\uffff\1\2\u0083\uffff\1\1";
    static final String DFA48_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\3\uffff\1\14\1\uffff\1\15\22\uffff\1\16\3\uffff\1\17\40\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\116\1\117\1\115\1\123\1\124"+
            "\1\133\1\134\1\120\1\132\1\125\1\127\1\121\1\122\1\131\1\130"+
            "\1\126\1\13\1\46\7\13\1\52\73\13\1\15\1\13\1\u0085\10\13\1\14"+
            "\1\23\1\21\2\13\1\114\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\113\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_static.DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_static.DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_static.DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_static.DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_static.DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_static.DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 84:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA48_4 = input.LA(1);

                         
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA48_5 = input.LA(1);

                         
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA48_6 = input.LA(1);

                         
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA48_7 = input.LA(1);

                         
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA48_17 = input.LA(1);

                         
                        int index48_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA48_19 = input.LA(1);

                         
                        int index48_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA48_38 = input.LA(1);

                         
                        int index48_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_38);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA48_42 = input.LA(1);

                         
                        int index48_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_42);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA48_75 = input.LA(1);

                         
                        int index48_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_75);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA48_76 = input.LA(1);

                         
                        int index48_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_76);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA48_77 = input.LA(1);

                         
                        int index48_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_77);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA48_78 = input.LA(1);

                         
                        int index48_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_78);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA48_79 = input.LA(1);

                         
                        int index48_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_79);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA48_80 = input.LA(1);

                         
                        int index48_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_80);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA48_81 = input.LA(1);

                         
                        int index48_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_81);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA48_82 = input.LA(1);

                         
                        int index48_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_82);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA48_83 = input.LA(1);

                         
                        int index48_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_83);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA48_84 = input.LA(1);

                         
                        int index48_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_84);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA48_85 = input.LA(1);

                         
                        int index48_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_85);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA48_86 = input.LA(1);

                         
                        int index48_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_86);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA48_87 = input.LA(1);

                         
                        int index48_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_87);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA48_88 = input.LA(1);

                         
                        int index48_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_88);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA48_89 = input.LA(1);

                         
                        int index48_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_89);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA48_90 = input.LA(1);

                         
                        int index48_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_90);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA48_91 = input.LA(1);

                         
                        int index48_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_91);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA48_92 = input.LA(1);

                         
                        int index48_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_92);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA48_133 = input.LA(1);

                         
                        int index48_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_133);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\60\uffff";
    static final String DFA49_eofS =
        "\51\uffff\1\53\2\uffff\1\53\3\uffff";
    static final String DFA49_minS =
        "\1\120\11\uffff\1\41\36\uffff\1\42\1\41\1\uffff\1\42\1\41\1\0\1"+
        "\uffff";
    static final String DFA49_maxS =
        "\1\u00aa\11\uffff\1\41\36\uffff\1\u00ae\1\41\1\uffff\1\u00ae\1"+
        "\41\1\0\1\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\2\uffff\1\27\3\uffff\1\12";
    static final String DFA49_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\50\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\151\53\1\52\43\53",
            "\1\54",
            "",
            "\71\53\1\55\123\53",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "85:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA51_static {
    static final String DFA51_eotS =
        "\116\uffff";
    static final String DFA51_eofS =
        "\116\uffff";
    static final String DFA51_minS =
        "\1\42\2\uffff\13\0\1\uffff\5\0\72\uffff";
    static final String DFA51_maxS =
        "\1\u00ae\2\uffff\13\0\1\uffff\5\0\72\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\1\1\2\13\uffff\1\6\6\uffff\1\10\1\11\1\14\1\15\1\17"+
        "\1\20\1\22\1\23\1\24\1\25\1\26\1\31\1\32\1\33\1\34\1\35\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\55\1\56\1\57"+
        "\1\60\1\61\1\62\1\63\5\uffff\1\64\1\65\1\66\1\67\1\3\1\5\1\7\1\27"+
        "\1\54\1\4\1\21\1\53\1\36\1\16\1\30\1\12\1\13";
    static final String DFA51_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff"+
        "\1\13\1\14\1\15\1\16\1\17\72\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\6\1\12\1\14\1\100\1\33\1\36\1\uffff\1\13\1\25\20\uffff\1"+
            "\22\1\34\1\uffff\1\44\1\uffff\1\35\1\37\1\53\1\21\1\40\1\41"+
            "\1\42\1\43\1\17\1\45\1\46\1\47\1\50\1\51\1\32\1\15\4\uffff\1"+
            "\20\1\56\11\uffff\1\16\1\uffff\1\52\4\uffff\1\60\1\uffff\1\61"+
            "\1\uffff\1\62\5\uffff\1\63\1\uffff\1\54\3\uffff\1\64\1\uffff"+
            "\1\31\1\55\3\uffff\1\26\2\uffff\1\4\5\uffff\1\57\2\uffff\1\3"+
            "\2\uffff\1\5\1\16\1\67\1\65\1\uffff\1\7\1\10\1\11\1\75\1\uffff"+
            "\1\23\1\27\1\30\1\76\1\67\1\77\1\1\1\2\4\uffff\1\66\10\uffff"+
            "\4\67",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_static.DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_static.DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_static.DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_static.DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_static.DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_static.DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "92:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | reference | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA51_3 = input.LA(1);

                         
                        int index51_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA51_4 = input.LA(1);

                         
                        int index51_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index51_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA51_5 = input.LA(1);

                         
                        int index51_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index51_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA51_6 = input.LA(1);

                         
                        int index51_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index51_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA51_7 = input.LA(1);

                         
                        int index51_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA51_8 = input.LA(1);

                         
                        int index51_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA51_9 = input.LA(1);

                         
                        int index51_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA51_10 = input.LA(1);

                         
                        int index51_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA51_11 = input.LA(1);

                         
                        int index51_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA51_12 = input.LA(1);

                         
                        int index51_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA51_13 = input.LA(1);

                         
                        int index51_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index51_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA51_15 = input.LA(1);

                         
                        int index51_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index51_15);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA51_16 = input.LA(1);

                         
                        int index51_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index51_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA51_17 = input.LA(1);

                         
                        int index51_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index51_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA51_18 = input.LA(1);

                         
                        int index51_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index51_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA51_19 = input.LA(1);

                         
                        int index51_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 14;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index51_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA53_static {
    static final String DFA53_eotS =
        "\45\uffff";
    static final String DFA53_eofS =
        "\45\uffff";
    static final String DFA53_minS =
        "\1\43\36\0\6\uffff";
    static final String DFA53_maxS =
        "\1\u00a3\36\0\6\uffff";
    static final String DFA53_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA53_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\107\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_static.DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_static.DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_static.DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_static.DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_static.DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_static.DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "97:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA53_1 = input.LA(1);

                         
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA53_3 = input.LA(1);

                         
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA53_4 = input.LA(1);

                         
                        int index53_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA53_5 = input.LA(1);

                         
                        int index53_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA53_6 = input.LA(1);

                         
                        int index53_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA53_7 = input.LA(1);

                         
                        int index53_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA53_8 = input.LA(1);

                         
                        int index53_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA53_9 = input.LA(1);

                         
                        int index53_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA53_10 = input.LA(1);

                         
                        int index53_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA53_11 = input.LA(1);

                         
                        int index53_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA53_12 = input.LA(1);

                         
                        int index53_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA53_14 = input.LA(1);

                         
                        int index53_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA53_15 = input.LA(1);

                         
                        int index53_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA53_16 = input.LA(1);

                         
                        int index53_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA53_17 = input.LA(1);

                         
                        int index53_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA53_18 = input.LA(1);

                         
                        int index53_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA53_19 = input.LA(1);

                         
                        int index53_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA53_20 = input.LA(1);

                         
                        int index53_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA53_21 = input.LA(1);

                         
                        int index53_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA53_22 = input.LA(1);

                         
                        int index53_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA53_23 = input.LA(1);

                         
                        int index53_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA53_24 = input.LA(1);

                         
                        int index53_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA53_25 = input.LA(1);

                         
                        int index53_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA53_26 = input.LA(1);

                         
                        int index53_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA53_27 = input.LA(1);

                         
                        int index53_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA53_28 = input.LA(1);

                         
                        int index53_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA53_29 = input.LA(1);

                         
                        int index53_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA53_30 = input.LA(1);

                         
                        int index53_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA55_static {
    static final String DFA55_eotS =
        "\17\uffff";
    static final String DFA55_eofS =
        "\17\uffff";
    static final String DFA55_minS =
        "\1\42\1\uffff\6\41\1\uffff\6\0";
    static final String DFA55_maxS =
        "\1\u00a1\1\uffff\6\41\1\uffff\6\0";
    static final String DFA55_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA55_specialS =
        "\11\uffff\1\0\1\1\1\3\1\5\1\4\1\2}>";
    static final String[] DFA55_transitionS = {
            "\1\1\1\5\1\7\4\uffff\1\6\45\uffff\1\1\60\uffff\1\1\10\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_static.DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_static.DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_static.DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_static.DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_static.DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_static.DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_static.DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_static.DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "()* loopback of 103:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA55_9 = input.LA(1);

                         
                        int index55_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA55_10 = input.LA(1);

                         
                        int index55_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA55_14 = input.LA(1);

                         
                        int index55_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA55_11 = input.LA(1);

                         
                        int index55_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA55_13 = input.LA(1);

                         
                        int index55_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA55_12 = input.LA(1);

                         
                        int index55_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 55, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA57_static {
    static final String DFA57_eotS =
        "\27\uffff";
    static final String DFA57_eofS =
        "\27\uffff";
    static final String DFA57_minS =
        "\1\43\1\uffff\12\41\12\0\1\uffff";
    static final String DFA57_maxS =
        "\1\u00a3\1\uffff\12\41\12\0\1\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA57_specialS =
        "\14\uffff\1\1\1\7\1\11\1\5\1\3\1\4\1\6\1\2\1\0\1\10\1\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\117\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_static.DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_static.DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_static.DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_static.DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_static.DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_static.DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_static.DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_static.DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 109:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA57_20 = input.LA(1);

                         
                        int index57_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA57_12 = input.LA(1);

                         
                        int index57_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA57_19 = input.LA(1);

                         
                        int index57_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA57_16 = input.LA(1);

                         
                        int index57_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA57_17 = input.LA(1);

                         
                        int index57_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA57_15 = input.LA(1);

                         
                        int index57_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA57_18 = input.LA(1);

                         
                        int index57_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA57_13 = input.LA(1);

                         
                        int index57_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA57_21 = input.LA(1);

                         
                        int index57_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA57_14 = input.LA(1);

                         
                        int index57_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA63_static {
    static final String DFA63_eotS =
        "\27\uffff";
    static final String DFA63_eofS =
        "\27\uffff";
    static final String DFA63_minS =
        "\1\43\12\41\1\uffff\12\0\1\uffff";
    static final String DFA63_maxS =
        "\1\u00a3\12\41\1\uffff\12\0\1\uffff";
    static final String DFA63_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA63_specialS =
        "\14\uffff\1\5\1\1\1\4\1\11\1\3\1\7\1\10\1\2\1\6\1\0\1\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\107\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_static.DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_static.DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_static.DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_static.DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_static.DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_static.DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_static.DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_static.DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "114:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA63_21 = input.LA(1);

                         
                        int index63_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA63_13 = input.LA(1);

                         
                        int index63_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA63_19 = input.LA(1);

                         
                        int index63_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA63_16 = input.LA(1);

                         
                        int index63_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA63_14 = input.LA(1);

                         
                        int index63_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA63_12 = input.LA(1);

                         
                        int index63_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA63_20 = input.LA(1);

                         
                        int index63_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_20);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA63_17 = input.LA(1);

                         
                        int index63_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_17);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA63_18 = input.LA(1);

                         
                        int index63_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA63_15 = input.LA(1);

                         
                        int index63_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\u0090\uffff";
    static final String DFA75_eofS =
        "\1\1\u008f\uffff";
    static final String DFA75_minS =
        "\1\42\4\uffff\6\0\1\uffff\2\0\3\uffff\13\0\164\uffff";
    static final String DFA75_maxS =
        "\1\u00ae\4\uffff\6\0\1\uffff\2\0\3\uffff\13\0\164\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\u008d\uffff\1\1";
    static final String DFA75_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\164\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\24\1\10\1\12\4\1\1\11\21\1\1\31\7\1\1\30\4\1\1\25\6\1\1"+
            "\27\4\1\1\26\12\1\1\33\40\1\1\15\10\1\1\22\1\1\1\14\1\23\1\21"+
            "\3\1\1\5\1\6\1\7\2\1\1\32\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 135:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_5 = input.LA(1);

                         
                        int index75_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA75_7 = input.LA(1);

                         
                        int index75_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA75_9 = input.LA(1);

                         
                        int index75_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA75_12 = input.LA(1);

                         
                        int index75_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA75_13 = input.LA(1);

                         
                        int index75_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA75_17 = input.LA(1);

                         
                        int index75_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA75_18 = input.LA(1);

                         
                        int index75_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA75_19 = input.LA(1);

                         
                        int index75_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA75_20 = input.LA(1);

                         
                        int index75_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA75_21 = input.LA(1);

                         
                        int index75_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_21);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA75_22 = input.LA(1);

                         
                        int index75_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA75_23 = input.LA(1);

                         
                        int index75_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_23);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA75_24 = input.LA(1);

                         
                        int index75_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_24);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA75_25 = input.LA(1);

                         
                        int index75_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA75_26 = input.LA(1);

                         
                        int index75_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA75_27 = input.LA(1);

                         
                        int index75_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA74_static {
    static final String DFA74_eotS =
        "\24\uffff";
    static final String DFA74_eofS =
        "\24\uffff";
    static final String DFA74_minS =
        "\1\42\14\uffff\1\0\6\uffff";
    static final String DFA74_maxS =
        "\1\u0096\14\uffff\1\0\6\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA74_specialS =
        "\15\uffff\1\0\6\uffff}>";
    static final String[] DFA74_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\4\uffff\1\1\6\uffff"+
            "\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\15\10\uffff\1\1\1\uffff"+
            "\1\23\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_static.DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_static.DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_static.DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_static.DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_static.DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_static.DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_static.DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_static.DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "()* loopback of 135:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA74_13 = input.LA(1);

                         
                        int index74_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index74_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\32\uffff";
    static final String DFA81_eofS =
        "\1\1\31\uffff";
    static final String DFA81_minS =
        "\1\42\1\uffff\20\0\10\uffff";
    static final String DFA81_maxS =
        "\1\u0096\1\uffff\20\0\10\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\11\20\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA81_specialS =
        "\2\uffff\1\7\1\4\1\1\1\0\1\15\1\10\1\17\1\12\1\2\1\6\1\5\1\3\1"+
        "\14\1\11\1\16\1\13\10\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\4\1\10\1\12\4\uffff\1\11\21\uffff\1\20\7\uffff\1\17\4\uffff"+
            "\1\13\6\uffff\1\16\4\uffff\1\14\12\uffff\1\1\40\uffff\1\15\10"+
            "\uffff\1\2\2\uffff\1\3\4\uffff\1\5\1\6\1\7\2\uffff\1\21",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()+ loopback of 142:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_5 = input.LA(1);

                         
                        int index81_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_4 = input.LA(1);

                         
                        int index81_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_10 = input.LA(1);

                         
                        int index81_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_13 = input.LA(1);

                         
                        int index81_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_3 = input.LA(1);

                         
                        int index81_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_12 = input.LA(1);

                         
                        int index81_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_11 = input.LA(1);

                         
                        int index81_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_11);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA81_2 = input.LA(1);

                         
                        int index81_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_2);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA81_7 = input.LA(1);

                         
                        int index81_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_15);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA81_9 = input.LA(1);

                         
                        int index81_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_9);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_17);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA81_14 = input.LA(1);

                         
                        int index81_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA81_6 = input.LA(1);

                         
                        int index81_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_6);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA81_16 = input.LA(1);

                         
                        int index81_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_16);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA81_8 = input.LA(1);

                         
                        int index81_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred261_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA84_static {
    static final String DFA84_eotS =
        "\16\uffff";
    static final String DFA84_eofS =
        "\3\uffff\1\4\12\uffff";
    static final String DFA84_minS =
        "\1\117\1\41\1\uffff\1\42\1\uffff\3\41\1\117\2\0\3\uffff";
    static final String DFA84_maxS =
        "\1\u0089\1\41\1\uffff\1\u00ae\1\uffff\3\41\1\117\2\0\3\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\4\1\uffff\1\5\6\uffff\1\2\1\3\1\1";
    static final String DFA84_specialS =
        "\10\uffff\1\2\1\1\1\0\3\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\1\71\uffff\1\2",
            "\1\3",
            "",
            "\55\4\1\6\61\4\1\7\1\4\1\5\53\4",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_static.DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_static.DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_static.DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_static.DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_static.DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_static.DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "147:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA84_8==79) ) {s = 11;}

                        else if ( (synpred269_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\17\uffff";
    static final String DFA85_eofS =
        "\1\7\16\uffff";
    static final String DFA85_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA85_maxS =
        "\1\u00ae\6\41\1\uffff\6\0\1\uffff";
    static final String DFA85_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA85_specialS =
        "\10\uffff\1\0\1\1\1\3\1\2\1\4\1\5\1\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\147\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "147:93: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_8 = input.LA(1);

                         
                        int index85_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_9 = input.LA(1);

                         
                        int index85_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_11 = input.LA(1);

                         
                        int index85_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA85_10 = input.LA(1);

                         
                        int index85_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA85_12 = input.LA(1);

                         
                        int index85_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA85_13 = input.LA(1);

                         
                        int index85_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA91_static {
    static final String DFA91_eotS =
        "\16\uffff";
    static final String DFA91_eofS =
        "\16\uffff";
    static final String DFA91_minS =
        "\1\42\4\0\11\uffff";
    static final String DFA91_maxS =
        "\1\u0093\4\0\11\uffff";
    static final String DFA91_acceptS =
        "\5\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA91_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\11\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\3\2\5\4\uffff\1\5\45\uffff\1\5\60\uffff\1\4\10\uffff\1\1"+
            "\2\uffff\1\2\4\uffff\3\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_static.DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_static.DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_static.DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_static.DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_static.DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_static.DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_static.DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_static.DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "162:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA91_1 = input.LA(1);

                         
                        int index91_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index91_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA91_2 = input.LA(1);

                         
                        int index91_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index91_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA91_3 = input.LA(1);

                         
                        int index91_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index91_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA91_4 = input.LA(1);

                         
                        int index91_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index91_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA97_static {
    static final String DFA97_eotS =
        "\u0090\uffff";
    static final String DFA97_eofS =
        "\1\4\u008f\uffff";
    static final String DFA97_minS =
        "\1\42\3\0\u008c\uffff";
    static final String DFA97_maxS =
        "\1\u00ae\3\0\u008c\uffff";
    static final String DFA97_acceptS =
        "\4\uffff\1\2\u008a\uffff\1\1";
    static final String DFA97_specialS =
        "\1\uffff\1\0\1\1\1\2\u008c\uffff}>";
    static final String[] DFA97_transitionS = {
            "\136\4\1\3\10\4\1\2\2\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_static.DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_static.DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_static.DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_static.DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_static.DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_static.DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_static.DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_static.DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "168:58: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA97_1 = input.LA(1);

                         
                        int index97_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index97_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA97_2 = input.LA(1);

                         
                        int index97_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index97_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA97_3 = input.LA(1);

                         
                        int index97_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index97_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA98_static {
    static final String DFA98_eotS =
        "\14\uffff";
    static final String DFA98_eofS =
        "\14\uffff";
    static final String DFA98_minS =
        "\1\42\7\uffff\2\0\2\uffff";
    static final String DFA98_maxS =
        "\1\u0093\7\uffff\2\0\2\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\2";
    static final String DFA98_specialS =
        "\10\uffff\1\0\1\1\2\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\12\2\1\4\uffff\1\1\45\uffff\1\1\60\uffff\1\13\10\uffff\1"+
            "\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_static.DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_static.DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_static.DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_static.DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_static.DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_static.DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 171:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA98_8 = input.LA(1);

                         
                        int index98_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA98_9 = input.LA(1);

                         
                        int index98_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index98_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA99_static {
    static final String DFA99_eotS =
        "\13\uffff";
    static final String DFA99_eofS =
        "\1\2\12\uffff";
    static final String DFA99_minS =
        "\1\42\1\0\1\uffff\7\0\1\uffff";
    static final String DFA99_maxS =
        "\1\u00ae\1\0\1\uffff\7\0\1\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA99_specialS =
        "\1\uffff\1\3\1\uffff\1\1\1\0\1\2\1\4\1\7\1\6\1\5\1\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\45\2\1\11\71\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_static.DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_static.DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_static.DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_static.DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_static.DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_static.DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_static.DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_static.DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()+ loopback of 171:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA99_4 = input.LA(1);

                         
                        int index99_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA99_3 = input.LA(1);

                         
                        int index99_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA99_5 = input.LA(1);

                         
                        int index99_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA99_6 = input.LA(1);

                         
                        int index99_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA99_9 = input.LA(1);

                         
                        int index99_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_9);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA99_8 = input.LA(1);

                         
                        int index99_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA99_7 = input.LA(1);

                         
                        int index99_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA102_static {
    static final String DFA102_eotS =
        "\u0090\uffff";
    static final String DFA102_eofS =
        "\1\4\u008f\uffff";
    static final String DFA102_minS =
        "\1\42\3\0\u008c\uffff";
    static final String DFA102_maxS =
        "\1\u00ae\3\0\u008c\uffff";
    static final String DFA102_acceptS =
        "\4\uffff\1\2\u008a\uffff\1\1";
    static final String DFA102_specialS =
        "\1\uffff\1\0\1\1\1\2\u008c\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\3\146\4\1\1\2\4\1\2\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_static.DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_static.DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_static.DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_static.DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_static.DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_static.DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "171:39: ( ( cdAlphanumType | number ) ( quantity )+ )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA102_1 = input.LA(1);

                         
                        int index102_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA102_2 = input.LA(1);

                         
                        int index102_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA102_3 = input.LA(1);

                         
                        int index102_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA101_static {
    static final String DFA101_eotS =
        "\u0090\uffff";
    static final String DFA101_eofS =
        "\1\2\u008f\uffff";
    static final String DFA101_minS =
        "\1\42\1\0\1\uffff\2\0\u008b\uffff";
    static final String DFA101_maxS =
        "\1\u00ae\1\0\1\uffff\2\0\u008b\uffff";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\u008c\uffff\1\1";
    static final String DFA101_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\u008b\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\4\146\2\1\1\2\2\1\3\42\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_static.DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_static.DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_static.DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_static.DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_static.DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_static.DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "()+ loopback of 171:63: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA101_3 = input.LA(1);

                         
                        int index101_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA101_4 = input.LA(1);

                         
                        int index101_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\u0093\uffff";
    static final String DFA104_eofS =
        "\1\1\u0092\uffff";
    static final String DFA104_minS =
        "\1\42\2\uffff\1\0\13\uffff\3\0\u0081\uffff";
    static final String DFA104_maxS =
        "\1\u00ae\2\uffff\1\0\13\uffff\3\0\u0081\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\5\u008d\uffff\1\1\1\3\1\4\1\2";
    static final String DFA104_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\u0081\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\21\135\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()* loopback of 171:74: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_3 = input.LA(1);

                         
                        int index104_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred296_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA104_15 = input.LA(1);

                         
                        int index104_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA104_16 = input.LA(1);

                         
                        int index104_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA104_17 = input.LA(1);

                         
                        int index104_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA103_static {
    static final String DFA103_eotS =
        "\11\uffff";
    static final String DFA103_eofS =
        "\11\uffff";
    static final String DFA103_minS =
        "\1\u0089\1\41\1\42\1\uffff\1\41\1\uffff\1\50\1\41\1\75";
    static final String DFA103_maxS =
        "\1\u0089\1\41\1\u0098\1\uffff\1\41\1\uffff\1\u0098\1\41\1\u0098";
    static final String DFA103_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\3\uffff";
    static final String DFA103_specialS =
        "\11\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\1",
            "\1\2",
            "\1\5\135\uffff\1\3\12\uffff\1\3\1\4\2\uffff\1\3\10\uffff\1"+
            "\3",
            "",
            "\1\6",
            "",
            "\1\5\24\uffff\3\5\2\uffff\1\5\75\uffff\1\3\4\uffff\1\5\5\uffff"+
            "\1\3\1\7\2\uffff\1\3\6\uffff\1\5\1\uffff\1\3",
            "\1\10",
            "\3\5\2\uffff\1\5\75\uffff\1\3\11\uffff\2\3\1\7\2\uffff\1\3"+
            "\10\uffff\1\3"
    };
    }

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_static.DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_static.DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_static.DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_static.DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_static.DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_static.DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "171:99: ( quantity1Node | citationStructure )";
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\u0091\uffff";
    static final String DFA107_eofS =
        "\1\1\u0090\uffff";
    static final String DFA107_minS =
        "\1\42\2\uffff\1\0\13\uffff\3\0\177\uffff";
    static final String DFA107_maxS =
        "\1\u00ae\2\uffff\1\0\13\uffff\3\0\177\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\3\u008d\uffff\1\2\1\1";
    static final String DFA107_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\21\135\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_15 = input.LA(1);

                         
                        int index107_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred304_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index107_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA107_16 = input.LA(1);

                         
                        int index107_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred304_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index107_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA107_17 = input.LA(1);

                         
                        int index107_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index107_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0092\uffff";
    static final String DFA110_eofS =
        "\1\1\u0091\uffff";
    static final String DFA110_minS =
        "\1\42\2\uffff\1\0\13\uffff\3\0\u0080\uffff";
    static final String DFA110_maxS =
        "\1\u00ae\2\uffff\1\0\13\uffff\3\0\u0080\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\4\u008d\uffff\1\1\1\3\1\2";
    static final String DFA110_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\u0080\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\21\135\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 186:31: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_3 = input.LA(1);

                         
                        int index110_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_15 = input.LA(1);

                         
                        int index110_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_16 = input.LA(1);

                         
                        int index110_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_17 = input.LA(1);

                         
                        int index110_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\103\uffff";
    static final String DFA112_eofS =
        "\1\1\102\uffff";
    static final String DFA112_minS =
        "\1\42\1\uffff\100\0\1\uffff";
    static final String DFA112_maxS =
        "\1\u00ae\1\uffff\100\0\1\uffff";
    static final String DFA112_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA112_specialS =
        "\2\uffff\1\44\1\63\1\32\1\17\1\2\1\0\1\64\1\52\1\3\1\56\1\73\1"+
        "\1\1\15\1\77\1\26\1\66\1\47\1\11\1\51\1\55\1\14\1\10\1\54\1\33\1"+
        "\74\1\40\1\13\1\5\1\22\1\41\1\76\1\53\1\16\1\25\1\75\1\67\1\42\1"+
        "\72\1\20\1\45\1\70\1\65\1\35\1\6\1\36\1\57\1\37\1\71\1\50\1\21\1"+
        "\62\1\31\1\27\1\24\1\34\1\60\1\61\1\43\1\46\1\30\1\12\1\7\1\4\1"+
        "\23\1\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\14\1\6\1\10\1\101\1\34\1\37\1\1\1\7\1\16\20\1\1\25\1\35"+
            "\1\1\1\45\1\1\1\36\1\40\1\54\1\24\1\41\1\42\1\43\1\44\1\22\1"+
            "\46\1\47\1\50\1\51\1\52\1\33\1\15\4\1\1\23\1\57\11\1\1\27\1"+
            "\1\1\53\4\1\1\61\1\1\1\62\1\1\1\63\5\1\1\64\1\1\1\55\3\1\1\65"+
            "\1\1\1\32\1\56\3\1\1\30\2\1\1\2\5\1\1\60\2\1\1\12\2\1\1\13\1"+
            "\21\1\73\1\66\1\1\1\3\1\4\1\5\1\76\1\1\1\26\1\31\1\11\1\77\1"+
            "\74\1\100\1\17\1\20\4\1\1\67\10\1\1\70\1\75\1\71\1\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()+ loopback of 189:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_13 = input.LA(1);

                         
                        int index112_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA112_64 = input.LA(1);

                         
                        int index112_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_64);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA112_29 = input.LA(1);

                         
                        int index112_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_29);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA112_45 = input.LA(1);

                         
                        int index112_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_45);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA112_63 = input.LA(1);

                         
                        int index112_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_63);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA112_23 = input.LA(1);

                         
                        int index112_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_23);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA112_19 = input.LA(1);

                         
                        int index112_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_19);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA112_62 = input.LA(1);

                         
                        int index112_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_62);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA112_28 = input.LA(1);

                         
                        int index112_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_28);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA112_22 = input.LA(1);

                         
                        int index112_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_22);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA112_14 = input.LA(1);

                         
                        int index112_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA112_34 = input.LA(1);

                         
                        int index112_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_34);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA112_40 = input.LA(1);

                         
                        int index112_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_40);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA112_51 = input.LA(1);

                         
                        int index112_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_51);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA112_30 = input.LA(1);

                         
                        int index112_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_30);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA112_65 = input.LA(1);

                         
                        int index112_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_65);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA112_55 = input.LA(1);

                         
                        int index112_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_55);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA112_35 = input.LA(1);

                         
                        int index112_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_35);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA112_16 = input.LA(1);

                         
                        int index112_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_16);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA112_54 = input.LA(1);

                         
                        int index112_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_54);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA112_61 = input.LA(1);

                         
                        int index112_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_61);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA112_53 = input.LA(1);

                         
                        int index112_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_53);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA112_25 = input.LA(1);

                         
                        int index112_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_25);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA112_56 = input.LA(1);

                         
                        int index112_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_56);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA112_44 = input.LA(1);

                         
                        int index112_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_44);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA112_46 = input.LA(1);

                         
                        int index112_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_46);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA112_48 = input.LA(1);

                         
                        int index112_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_48);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA112_27 = input.LA(1);

                         
                        int index112_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_27);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA112_31 = input.LA(1);

                         
                        int index112_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_31);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA112_38 = input.LA(1);

                         
                        int index112_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_38);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA112_59 = input.LA(1);

                         
                        int index112_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_59);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA112_2 = input.LA(1);

                         
                        int index112_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_2);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA112_41 = input.LA(1);

                         
                        int index112_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_41);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA112_60 = input.LA(1);

                         
                        int index112_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_60);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA112_18 = input.LA(1);

                         
                        int index112_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_18);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA112_50 = input.LA(1);

                         
                        int index112_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_50);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA112_20 = input.LA(1);

                         
                        int index112_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_20);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA112_33 = input.LA(1);

                         
                        int index112_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_33);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA112_24 = input.LA(1);

                         
                        int index112_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_24);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA112_21 = input.LA(1);

                         
                        int index112_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_21);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA112_11 = input.LA(1);

                         
                        int index112_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_11);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA112_47 = input.LA(1);

                         
                        int index112_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_47);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA112_57 = input.LA(1);

                         
                        int index112_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_57);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA112_58 = input.LA(1);

                         
                        int index112_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_58);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA112_52 = input.LA(1);

                         
                        int index112_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_52);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA112_43 = input.LA(1);

                         
                        int index112_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_43);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA112_17 = input.LA(1);

                         
                        int index112_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_17);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA112_37 = input.LA(1);

                         
                        int index112_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_37);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA112_42 = input.LA(1);

                         
                        int index112_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_42);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA112_49 = input.LA(1);

                         
                        int index112_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_49);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA112_39 = input.LA(1);

                         
                        int index112_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_39);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA112_12 = input.LA(1);

                         
                        int index112_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_12);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA112_26 = input.LA(1);

                         
                        int index112_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_26);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA112_36 = input.LA(1);

                         
                        int index112_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_36);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA112_32 = input.LA(1);

                         
                        int index112_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_32);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\u0090\uffff";
    static final String DFA118_eofS =
        "\1\1\u008f\uffff";
    static final String DFA118_minS =
        "\1\42\2\uffff\1\0\u008c\uffff";
    static final String DFA118_maxS =
        "\1\u00ae\2\uffff\1\0\u008c\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\2\u008d\uffff\1\1";
    static final String DFA118_specialS =
        "\3\uffff\1\0\u008c\uffff}>";
    static final String[] DFA118_transitionS = {
            "\136\1\1\3\56\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()* loopback of 204:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_3 = input.LA(1);

                         
                        int index118_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA122_static {
    static final String DFA122_eotS =
        "\u0090\uffff";
    static final String DFA122_eofS =
        "\1\3\u008f\uffff";
    static final String DFA122_minS =
        "\1\42\2\0\u008d\uffff";
    static final String DFA122_maxS =
        "\1\u00ae\2\0\u008d\uffff";
    static final String DFA122_acceptS =
        "\3\uffff\1\2\u008b\uffff\1\1";
    static final String DFA122_specialS =
        "\1\uffff\1\0\1\1\u008d\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\2\151\3\1\1\42\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_static.DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_static.DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_static.DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_static.DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_static.DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_static.DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "208:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA122_2 = input.LA(1);

                         
                        int index122_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 143;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index122_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\23\uffff";
    static final String DFA123_eofS =
        "\16\uffff\1\17\4\uffff";
    static final String DFA123_minS =
        "\1\42\2\41\1\75\1\u0085\1\uffff\3\41\3\uffff\1\75\1\u0085\1\42"+
        "\1\uffff\1\41\1\0\1\uffff";
    static final String DFA123_maxS =
        "\1\u008c\2\41\2\u0096\1\uffff\3\41\3\uffff\1\u008c\1\u0085\1\u00ae"+
        "\1\uffff\1\41\1\0\1\uffff";
    static final String DFA123_acceptS =
        "\5\uffff\1\4\3\uffff\1\3\1\2\1\1\3\uffff\1\6\2\uffff\1\5";
    static final String DFA123_specialS =
        "\21\uffff\1\0\1\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\2\151\uffff\1\1",
            "\1\3",
            "\1\4",
            "\1\11\1\12\1\13\2\uffff\1\5\102\uffff\1\10\6\uffff\1\6\11"+
            "\uffff\1\7",
            "\1\10\20\uffff\1\7",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "",
            "\1\11\1\12\1\13\2\uffff\1\5\111\uffff\1\6",
            "\1\10",
            "\133\17\1\20\61\17",
            "",
            "\1\21",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "209:1: measurementtypes : ( molar | amount | mass | volume | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_17 = input.LA(1);

                         
                        int index123_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index123_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u008c\uffff";
    static final String DFA132_eofS =
        "\u008c\uffff";
    static final String DFA132_minS =
        "\1\42\1\0\43\uffff\1\0\4\uffff\3\0\2\uffff\13\0\1\uffff\1\0\120"+
        "\uffff";
    static final String DFA132_maxS =
        "\1\u00ae\1\0\43\uffff\1\0\4\uffff\3\0\2\uffff\13\0\1\uffff\1\0"+
        "\120\uffff";
    static final String DFA132_acceptS =
        "\2\uffff\1\2\52\uffff\1\5\1\6\13\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\17\21\uffff\1\23\1\1\1\3\1\4\1\11\1\12\1\15\1\20\1\7\1\24\1\10"+
        "\1\22\1\21\1\14";
    static final String DFA132_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\120\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\54\1\63\1\65\3\74\1\uffff\1\64\1\71\20\154\2\74\1\uffff"+
            "\1\74\1\uffff\17\74\1\66\4\2\2\74\11\2\1\74\1\2\1\74\4\2\1\74"+
            "\1\2\1\74\1\2\1\74\5\2\1\74\1\2\1\74\3\2\1\74\1\2\1\45\1\74"+
            "\3\2\1\74\1\uffff\1\176\1\70\2\uffff\1\72\1\57\1\56\1\74\2\uffff"+
            "\1\67\2\uffff\1\53\2\74\1\1\1\154\1\60\1\61\1\62\1\74\1\55\1"+
            "\52\7\74\4\uffff\1\73\1\154\1\uffff\6\2\4\74",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "227:19: ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_37 = input.LA(1);

                         
                        int index132_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA132_42 = input.LA(1);

                         
                        int index132_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA132_43 = input.LA(1);

                         
                        int index132_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred351_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index132_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA132_44 = input.LA(1);

                         
                        int index132_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA132_47 = input.LA(1);

                         
                        int index132_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 135;}

                         
                        input.seek(index132_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA132_48 = input.LA(1);

                         
                        int index132_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index132_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA132_49 = input.LA(1);

                         
                        int index132_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index132_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA132_50 = input.LA(1);

                         
                        int index132_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index132_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA132_51 = input.LA(1);

                         
                        int index132_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index132_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA132_52 = input.LA(1);

                         
                        int index132_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index132_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA132_53 = input.LA(1);

                         
                        int index132_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index132_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA132_54 = input.LA(1);

                         
                        int index132_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA132_55 = input.LA(1);

                         
                        int index132_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA132_56 = input.LA(1);

                         
                        int index132_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred352_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index132_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA132_57 = input.LA(1);

                         
                        int index132_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA132_59 = input.LA(1);

                         
                        int index132_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index132_59);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\u008e\uffff";
    static final String DFA133_eofS =
        "\u008e\uffff";
    static final String DFA133_minS =
        "\1\42\1\uffff\3\0\43\uffff\1\0\4\uffff\3\0\2\uffff\11\0\1\uffff"+
        "\1\0\121\uffff";
    static final String DFA133_maxS =
        "\1\u00ae\1\uffff\3\0\43\uffff\1\0\4\uffff\3\0\2\uffff\11\0\1\uffff"+
        "\1\0\121\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\26\3\uffff\1\3\52\uffff\1\6\1\7\11\uffff\1\14\1\uffff"+
        "\1\17\57\uffff\1\20\21\uffff\1\24\1\1\1\12\1\13\1\22\1\11\1\2\1"+
        "\4\1\16\1\21\1\5\1\10\1\25\1\23\1\15";
    static final String DFA133_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\121\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\56\1\66\1\70\3\75\1\uffff\1\67\1\72\20\155\2\75\1\uffff"+
            "\1\75\1\uffff\17\75\1\71\4\5\2\75\11\5\1\75\1\5\1\75\4\5\1\75"+
            "\1\5\1\75\1\5\1\75\5\5\1\75\1\5\1\75\3\5\1\75\1\5\1\50\1\75"+
            "\3\5\1\57\1\uffff\1\177\1\2\2\uffff\1\73\1\62\1\61\1\75\2\uffff"+
            "\1\3\1\1\1\uffff\1\55\2\75\1\4\1\155\1\63\1\64\1\65\1\75\1\60"+
            "\10\75\4\uffff\1\74\1\155\1\uffff\6\5\4\75",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()+ loopback of 227:150: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_2 = input.LA(1);

                         
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred365_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred365_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA133_4 = input.LA(1);

                         
                        int index133_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA133_40 = input.LA(1);

                         
                        int index133_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA133_45 = input.LA(1);

                         
                        int index133_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred365_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index133_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA133_46 = input.LA(1);

                         
                        int index133_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred365_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA133_47 = input.LA(1);

                         
                        int index133_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA133_50 = input.LA(1);

                         
                        int index133_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index133_50);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA133_51 = input.LA(1);

                         
                        int index133_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred373_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index133_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA133_52 = input.LA(1);

                         
                        int index133_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred373_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index133_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA133_53 = input.LA(1);

                         
                        int index133_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred373_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index133_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA133_54 = input.LA(1);

                         
                        int index133_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred373_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index133_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA133_55 = input.LA(1);

                         
                        int index133_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred373_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index133_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA133_56 = input.LA(1);

                         
                        int index133_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred373_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index133_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA133_57 = input.LA(1);

                         
                        int index133_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA133_58 = input.LA(1);

                         
                        int index133_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA133_60 = input.LA(1);

                         
                        int index133_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred369_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index133_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA135_static {
    static final String DFA135_eotS =
        "\u008c\uffff";
    static final String DFA135_eofS =
        "\u008c\uffff";
    static final String DFA135_minS =
        "\1\42\2\0\43\uffff\1\0\4\uffff\2\0\2\uffff\13\0\1\uffff\1\0\120"+
        "\uffff";
    static final String DFA135_maxS =
        "\1\u00ae\2\0\43\uffff\1\0\4\uffff\2\0\2\uffff\13\0\1\uffff\1\0"+
        "\120\uffff";
    static final String DFA135_acceptS =
        "\3\uffff\1\3\51\uffff\1\5\1\6\13\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\17\21\uffff\1\23\1\1\1\2\1\4\1\11\1\12\1\15\1\20\1\7\1\24\1\10"+
        "\1\22\1\21\1\14";
    static final String DFA135_specialS =
        "\1\uffff\1\0\1\1\43\uffff\1\2\4\uffff\1\3\1\4\2\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\120\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\54\1\63\1\65\3\74\1\uffff\1\64\1\71\20\154\2\74\1\uffff"+
            "\1\74\1\uffff\17\74\1\66\4\3\2\74\11\3\1\74\1\3\1\74\4\3\1\74"+
            "\1\3\1\74\1\3\1\74\5\3\1\74\1\3\1\74\3\3\1\74\1\3\1\46\1\74"+
            "\3\3\1\74\1\uffff\1\176\1\70\2\uffff\1\72\1\57\1\55\1\74\2\uffff"+
            "\1\67\2\uffff\1\53\2\74\1\1\1\154\1\60\1\61\1\62\1\74\1\56\1"+
            "\2\7\74\4\uffff\1\73\1\154\1\uffff\6\3\4\74",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_static.DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_static.DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_static.DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_static.DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_static.DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_static.DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "233:23: ( fw | nn | verb | quantity2Node | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA135_2 = input.LA(1);

                         
                        int index135_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA135_38 = input.LA(1);

                         
                        int index135_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_38);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA135_43 = input.LA(1);

                         
                        int index135_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred389_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index135_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA135_44 = input.LA(1);

                         
                        int index135_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA135_47 = input.LA(1);

                         
                        int index135_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred383_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 135;}

                         
                        input.seek(index135_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA135_48 = input.LA(1);

                         
                        int index135_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index135_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA135_49 = input.LA(1);

                         
                        int index135_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index135_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA135_50 = input.LA(1);

                         
                        int index135_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index135_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA135_51 = input.LA(1);

                         
                        int index135_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index135_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA135_52 = input.LA(1);

                         
                        int index135_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index135_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA135_53 = input.LA(1);

                         
                        int index135_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index135_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA135_54 = input.LA(1);

                         
                        int index135_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA135_55 = input.LA(1);

                         
                        int index135_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA135_56 = input.LA(1);

                         
                        int index135_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index135_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA135_57 = input.LA(1);

                         
                        int index135_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA135_59 = input.LA(1);

                         
                        int index135_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index135_59);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA136_static {
    static final String DFA136_eotS =
        "\u008d\uffff";
    static final String DFA136_eofS =
        "\1\1\u008c\uffff";
    static final String DFA136_minS =
        "\1\42\1\uffff\1\0\43\uffff\1\0\4\uffff\3\0\2\uffff\13\0\1\uffff"+
        "\1\0\120\uffff";
    static final String DFA136_maxS =
        "\1\u00ae\1\uffff\1\0\43\uffff\1\0\4\uffff\3\0\2\uffff\13\0\1\uffff"+
        "\1\0\120\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\25\1\uffff\1\2\52\uffff\1\5\1\6\13\uffff\1\13\1\uffff"+
        "\1\16\57\uffff\1\17\21\uffff\1\23\1\1\1\3\1\11\1\12\1\15\1\20\1"+
        "\4\1\7\1\24\1\10\1\22\1\21\1\14";
    static final String DFA136_specialS =
        "\2\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\uffff\1\20\120\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\54\1\64\1\66\3\75\1\uffff\1\65\1\72\20\155\2\75\1\uffff"+
            "\1\75\1\uffff\17\75\1\67\4\3\2\75\11\3\1\75\1\3\1\75\4\3\1\75"+
            "\1\3\1\75\1\3\1\75\5\3\1\75\1\3\1\75\3\3\1\75\1\3\1\46\1\75"+
            "\3\3\1\55\1\uffff\1\177\1\71\2\uffff\1\73\1\60\1\56\1\75\2\uffff"+
            "\1\70\2\uffff\1\53\2\75\1\2\1\155\1\61\1\62\1\63\1\75\1\57\10"+
            "\75\4\uffff\1\74\1\155\1\uffff\6\3\4\75",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_static.DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_static.DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_static.DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_static.DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_static.DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_static.DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_static.DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_static.DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()+ loopback of 233:154: ( fw | verb | quantity2Node | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA136_2 = input.LA(1);

                         
                        int index136_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA136_38 = input.LA(1);

                         
                        int index136_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_38);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA136_43 = input.LA(1);

                         
                        int index136_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index136_43);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA136_44 = input.LA(1);

                         
                        int index136_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_44);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA136_45 = input.LA(1);

                         
                        int index136_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA136_48 = input.LA(1);

                         
                        int index136_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred415_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index136_48);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA136_49 = input.LA(1);

                         
                        int index136_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index136_49);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA136_50 = input.LA(1);

                         
                        int index136_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index136_50);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA136_51 = input.LA(1);

                         
                        int index136_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index136_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA136_52 = input.LA(1);

                         
                        int index136_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index136_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA136_53 = input.LA(1);

                         
                        int index136_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index136_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA136_54 = input.LA(1);

                         
                        int index136_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index136_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA136_55 = input.LA(1);

                         
                        int index136_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA136_56 = input.LA(1);

                         
                        int index136_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA136_57 = input.LA(1);

                         
                        int index136_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index136_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA136_58 = input.LA(1);

                         
                        int index136_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA136_60 = input.LA(1);

                         
                        int index136_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 61;}

                         
                        input.seek(index136_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA146_static {
    static final String DFA146_eotS =
        "\13\uffff";
    static final String DFA146_eofS =
        "\13\uffff";
    static final String DFA146_minS =
        "\1\42\1\41\1\uffff\1\43\2\41\1\0\1\42\1\uffff\1\41\1\0";
    static final String DFA146_maxS =
        "\1\u00ae\1\41\1\uffff\1\u0096\2\41\1\0\1\u00ae\1\uffff\1\41\1\0";
    static final String DFA146_acceptS =
        "\2\uffff\1\2\5\uffff\1\1\2\uffff";
    static final String DFA146_specialS =
        "\6\uffff\1\1\3\uffff\1\0}>";
    static final String[] DFA146_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\20\2\4\uffff"+
            "\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\1\3\2\1\uffff"+
            "\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\3",
            "",
            "\2\2\3\uffff\2\2\23\uffff\3\2\2\uffff\1\2\11\uffff\1\2\62"+
            "\uffff\1\5\3\uffff\1\2\1\uffff\1\2\6\uffff\1\4\4\uffff\3\2\2"+
            "\uffff\1\2",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\11\5\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\20"+
            "\2\4\uffff\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff"+
            "\2\2\3\uffff\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\4\2\1\uffff\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "",
            "\1\12",
            "\1\uffff"
    };
    }

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_static.DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_static.DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_static.DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_static.DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_static.DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_static.DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "249:9: ( numberratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred432_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred432_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA147_static {
    static final String DFA147_eotS =
        "\12\uffff";
    static final String DFA147_eofS =
        "\1\1\4\uffff\1\1\4\uffff";
    static final String DFA147_minS =
        "\1\42\1\uffff\2\41\1\0\1\42\1\uffff\1\41\1\0\1\uffff";
    static final String DFA147_maxS =
        "\1\u00ae\1\uffff\2\41\1\0\1\u00ae\1\uffff\1\41\1\0\1\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\3\4\uffff\1\2\2\uffff\1\1";
    static final String DFA147_specialS =
        "\4\uffff\1\1\3\uffff\1\0\1\uffff}>";
    static final String[] DFA147_transitionS = {
            "\135\1\1\3\14\1\1\2\42\1",
            "",
            "\1\4",
            "\1\5",
            "\1\uffff",
            "\1\7\u008c\1",
            "",
            "\1\10",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_static.DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_static.DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_static.DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_static.DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_static.DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_static.DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_static.DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_static.DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "()+ loopback of 250:19: ( colon cdAlphanum | cd )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA147_8 = input.LA(1);

                         
                        int index147_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index147_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA147_4 = input.LA(1);

                         
                        int index147_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred434_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index147_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA159_static {
    static final String DFA159_eotS =
        "\106\uffff";
    static final String DFA159_eofS =
        "\106\uffff";
    static final String DFA159_minS =
        "\1\42\16\uffff\1\0\66\uffff";
    static final String DFA159_maxS =
        "\1\u00ae\16\uffff\1\0\66\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\2\103\uffff\1\1";
    static final String DFA159_specialS =
        "\17\uffff\1\0\66\uffff}>";
    static final String[] DFA159_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\20\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\17\5\uffff\1\1\2\uffff\1\1\1\uffff\1\105\4\1"+
            "\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_static.DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_static.DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_static.DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_static.DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_static.DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_static.DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_static.DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_static.DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "()* loopback of 74:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA159_15 = input.LA(1);

                         
                        int index159_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index159_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA160_static {
    static final String DFA160_eotS =
        "\17\uffff";
    static final String DFA160_eofS =
        "\17\uffff";
    static final String DFA160_minS =
        "\1\42\6\41\2\uffff\6\0";
    static final String DFA160_maxS =
        "\1\u00ae\6\41\2\uffff\6\0";
    static final String DFA160_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA160_specialS =
        "\11\uffff\1\1\1\3\1\0\1\2\1\5\1\4}>";
    static final String[] DFA160_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\20\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7"+
            "\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10"+
            "\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_static.DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_static.DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_static.DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_static.DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_static.DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_static.DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "()* loopback of 74:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA160_11 = input.LA(1);

                         
                        int index160_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA160_9 = input.LA(1);

                         
                        int index160_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA160_12 = input.LA(1);

                         
                        int index160_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA160_10 = input.LA(1);

                         
                        int index160_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA160_14 = input.LA(1);

                         
                        int index160_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA160_13 = input.LA(1);

                         
                        int index160_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index160_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA161_static {
    static final String DFA161_eotS =
        "\105\uffff";
    static final String DFA161_eofS =
        "\105\uffff";
    static final String DFA161_minS =
        "\1\42\100\0\4\uffff";
    static final String DFA161_maxS =
        "\1\u00ae\100\0\4\uffff";
    static final String DFA161_acceptS =
        "\101\uffff\1\1\1\2\1\3\1\4";
    static final String DFA161_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\4\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\12\1\4\1\6\1\100\1\33\1\36\1\uffff\1\5\1\15\20\uffff\1\24"+
            "\1\34\1\uffff\1\44\1\uffff\1\35\1\37\1\53\1\23\1\40\1\41\1\42"+
            "\1\43\1\21\1\45\1\46\1\47\1\50\1\51\1\32\1\14\4\uffff\1\22\1"+
            "\56\11\uffff\1\26\1\uffff\1\52\4\uffff\1\60\1\uffff\1\61\1\uffff"+
            "\1\62\5\uffff\1\63\1\uffff\1\54\3\uffff\1\64\1\uffff\1\31\1"+
            "\55\3\uffff\1\27\2\uffff\1\13\5\uffff\1\57\2\uffff\1\10\2\uffff"+
            "\1\11\1\20\1\72\1\65\1\uffff\1\1\1\2\1\3\1\75\1\uffff\1\25\1"+
            "\30\1\7\1\76\1\73\1\77\1\16\1\17\4\uffff\1\66\10\uffff\1\67"+
            "\1\74\1\70\1\71",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_static.DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_static.DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_static.DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_static.DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_static.DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_static.DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_static.DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_static.DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "74:85: ( dissolvePhrase | ratio | noun | number )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA161_2 = input.LA(1);

                         
                        int index161_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA161_3 = input.LA(1);

                         
                        int index161_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA161_4 = input.LA(1);

                         
                        int index161_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA161_5 = input.LA(1);

                         
                        int index161_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA161_6 = input.LA(1);

                         
                        int index161_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA161_7 = input.LA(1);

                         
                        int index161_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA161_8 = input.LA(1);

                         
                        int index161_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA161_9 = input.LA(1);

                         
                        int index161_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index161_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA161_10 = input.LA(1);

                         
                        int index161_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index161_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA161_11 = input.LA(1);

                         
                        int index161_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA161_12 = input.LA(1);

                         
                        int index161_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA161_13 = input.LA(1);

                         
                        int index161_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA161_14 = input.LA(1);

                         
                        int index161_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA161_15 = input.LA(1);

                         
                        int index161_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA161_16 = input.LA(1);

                         
                        int index161_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA161_17 = input.LA(1);

                         
                        int index161_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA161_18 = input.LA(1);

                         
                        int index161_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA161_19 = input.LA(1);

                         
                        int index161_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA161_20 = input.LA(1);

                         
                        int index161_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA161_21 = input.LA(1);

                         
                        int index161_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA161_22 = input.LA(1);

                         
                        int index161_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA161_23 = input.LA(1);

                         
                        int index161_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA161_24 = input.LA(1);

                         
                        int index161_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA161_25 = input.LA(1);

                         
                        int index161_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA161_26 = input.LA(1);

                         
                        int index161_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA161_27 = input.LA(1);

                         
                        int index161_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA161_28 = input.LA(1);

                         
                        int index161_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA161_29 = input.LA(1);

                         
                        int index161_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA161_30 = input.LA(1);

                         
                        int index161_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA161_31 = input.LA(1);

                         
                        int index161_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA161_32 = input.LA(1);

                         
                        int index161_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA161_33 = input.LA(1);

                         
                        int index161_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA161_34 = input.LA(1);

                         
                        int index161_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA161_35 = input.LA(1);

                         
                        int index161_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA161_36 = input.LA(1);

                         
                        int index161_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA161_37 = input.LA(1);

                         
                        int index161_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA161_38 = input.LA(1);

                         
                        int index161_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA161_39 = input.LA(1);

                         
                        int index161_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA161_40 = input.LA(1);

                         
                        int index161_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA161_41 = input.LA(1);

                         
                        int index161_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA161_42 = input.LA(1);

                         
                        int index161_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA161_43 = input.LA(1);

                         
                        int index161_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA161_44 = input.LA(1);

                         
                        int index161_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA161_45 = input.LA(1);

                         
                        int index161_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA161_46 = input.LA(1);

                         
                        int index161_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA161_47 = input.LA(1);

                         
                        int index161_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA161_48 = input.LA(1);

                         
                        int index161_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA161_49 = input.LA(1);

                         
                        int index161_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA161_50 = input.LA(1);

                         
                        int index161_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA161_51 = input.LA(1);

                         
                        int index161_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA161_52 = input.LA(1);

                         
                        int index161_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA161_53 = input.LA(1);

                         
                        int index161_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA161_54 = input.LA(1);

                         
                        int index161_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA161_55 = input.LA(1);

                         
                        int index161_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA161_56 = input.LA(1);

                         
                        int index161_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA161_57 = input.LA(1);

                         
                        int index161_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA161_58 = input.LA(1);

                         
                        int index161_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA161_59 = input.LA(1);

                         
                        int index161_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA161_60 = input.LA(1);

                         
                        int index161_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA161_61 = input.LA(1);

                         
                        int index161_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA161_62 = input.LA(1);

                         
                        int index161_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA161_63 = input.LA(1);

                         
                        int index161_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA161_64 = input.LA(1);

                         
                        int index161_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                         
                        input.seek(index161_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA166_static {
    static final String DFA166_eotS =
        "\17\uffff";
    static final String DFA166_eofS =
        "\17\uffff";
    static final String DFA166_minS =
        "\1\42\6\41\1\uffff\6\0\1\uffff";
    static final String DFA166_maxS =
        "\1\u0098\6\41\1\uffff\6\0\1\uffff";
    static final String DFA166_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA166_specialS =
        "\10\uffff\1\2\1\3\1\0\1\1\1\5\1\4\1\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\44\uffff\1\7\60\uffff\1\7\10\uffff"+
            "\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_static.DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_static.DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_static.DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_static.DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_static.DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_static.DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "79:97: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA166_10 = input.LA(1);

                         
                        int index166_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index166_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA166_11 = input.LA(1);

                         
                        int index166_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index166_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA166_8 = input.LA(1);

                         
                        int index166_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index166_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA166_9 = input.LA(1);

                         
                        int index166_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index166_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA166_13 = input.LA(1);

                         
                        int index166_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index166_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA166_12 = input.LA(1);

                         
                        int index166_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index166_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA168_static {
    static final String DFA168_eotS =
        "\15\uffff";
    static final String DFA168_eofS =
        "\15\uffff";
    static final String DFA168_minS =
        "\1\42\4\0\10\uffff";
    static final String DFA168_maxS =
        "\1\u0093\4\0\10\uffff";
    static final String DFA168_acceptS =
        "\5\uffff\1\1\6\uffff\1\2";
    static final String DFA168_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\10\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\3\2\5\4\uffff\1\5\1\14\44\uffff\1\5\60\uffff\1\4\10\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\3\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_static.DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_static.DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_static.DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_static.DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_static.DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_static.DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "79:107: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA168_1 = input.LA(1);

                         
                        int index168_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index168_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA168_2 = input.LA(1);

                         
                        int index168_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index168_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA168_3 = input.LA(1);

                         
                        int index168_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index168_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA168_4 = input.LA(1);

                         
                        int index168_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index168_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA181_static {
    static final String DFA181_eotS =
        "\24\uffff";
    static final String DFA181_eofS =
        "\24\uffff";
    static final String DFA181_minS =
        "\1\42\14\uffff\1\0\6\uffff";
    static final String DFA181_maxS =
        "\1\u0096\14\uffff\1\0\6\uffff";
    static final String DFA181_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA181_specialS =
        "\15\uffff\1\0\6\uffff}>";
    static final String[] DFA181_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\4\uffff\1\1\6\uffff"+
            "\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\15\10\uffff\1\1\1\uffff"+
            "\1\23\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_static.DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_static.DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_static.DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_static.DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_static.DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_static.DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_static.DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_static.DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "()* loopback of 135:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA181_13 = input.LA(1);

                         
                        int index181_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index181_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA184_static {
    static final String DFA184_eotS =
        "\11\uffff";
    static final String DFA184_eofS =
        "\11\uffff";
    static final String DFA184_minS =
        "\1\u0089\1\41\1\42\1\41\2\uffff\1\50\1\41\1\75";
    static final String DFA184_maxS =
        "\1\u0089\1\41\1\u0098\1\41\2\uffff\1\u0098\1\41\1\u0098";
    static final String DFA184_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA184_specialS =
        "\11\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\1",
            "\1\2",
            "\1\4\135\uffff\1\5\12\uffff\1\5\1\3\2\uffff\1\5\10\uffff\1"+
            "\5",
            "\1\6",
            "",
            "",
            "\1\4\24\uffff\3\4\2\uffff\1\4\75\uffff\1\5\4\uffff\1\4\5\uffff"+
            "\1\5\1\7\2\uffff\1\5\6\uffff\1\4\1\uffff\1\5",
            "\1\10",
            "\3\4\2\uffff\1\4\75\uffff\1\5\11\uffff\2\5\1\7\2\uffff\1\5"+
            "\10\uffff\1\5"
    };
    }

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_static.DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_static.DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_static.DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_static.DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_static.DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_static.DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_static.DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_static.DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "171:99: ( quantity1Node | citationStructure )";
        }
    }
 

    static class FOLLOW_sentences_in_document183_static {
    public static final BitSet FOLLOW_sentences_in_document183 = new BitSet(new long[]{0xFFFFFFFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FFFFFFFFFEFL});

    }static class FOLLOW_sentenceStructure_in_sentences204_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences204 = new BitSet(new long[]{0xFFFFFFFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences206_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences206 = new BitSet(new long[]{0xFFFFFFFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentences210_static {
    public static final BitSet FOLLOW_stop_in_sentences210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_nounphrase_in_sentenceStructure220_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure220 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_verbphrase_in_sentenceStructure222_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure222 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_prepphrase_in_sentenceStructure224_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure224 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure226_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure226 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFFB45L});

    }static class FOLLOW_advAdj_in_sentenceStructure231_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure231 = new BitSet(new long[]{0x0000021800000002L,0xC000000000000000L,0x00000003C00E0801L});

    }static class FOLLOW_colon_in_sentenceStructure233_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure233 = new BitSet(new long[]{0x0000021800000002L,0xC000000000000000L,0x00000003C00E0801L});

    }static class FOLLOW_conjunction_in_sentenceStructure238_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure238 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000801L});

    }static class FOLLOW_rbconj_in_sentenceStructure240_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure240 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000801L});

    }static class FOLLOW_comma_in_sentenceStructure242_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure242 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000801L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase254_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_unmatchedToken273_static {
    public static final BitSet FOLLOW_number_in_unmatchedToken273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken275_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken277_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken279_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken279 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken281_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken283_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken283 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken287_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken289_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken291_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken293_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken295_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken297_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken299_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken301_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken303_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken305_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken307_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken309_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken309 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken311_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken311 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken313_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken315_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken317_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken319_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken321_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken323_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken325_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken329_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken331_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken333_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken335_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken337_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken339_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken341_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken343_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken345_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken347_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken349_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken351_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken353_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken355_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken357_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken359_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken361_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken363_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken365_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken367_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken369_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken371_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken373_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken375_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken377_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken381_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken383_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken385_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken387_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken389_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken391_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken393_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken395_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken397_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken399_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken401_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken403_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken405_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken407_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken409_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken411_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken413_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken415_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase425_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure444_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure444 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure446_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1455_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1455 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2472_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2472 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF241L});

    }static class FOLLOW_dt_in_nounphraseStructure2475_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2475 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF241L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2478_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2478 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF241L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2483_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2483 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_ratio_in_nounphraseStructure2485_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2485 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_noun_in_nounphraseStructure2487_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2487 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_number_in_nounphraseStructure2489_static {
    public static final BitSet FOLLOW_number_in_nounphraseStructure2489 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2497_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2497 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2500_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2500 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF241L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2504_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2504 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_ratio_in_nounphraseStructure2506_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2506 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_noun_in_nounphraseStructure2508_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2508 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_number_in_nounphraseStructure2510_static {
    public static final BitSet FOLLOW_number_in_nounphraseStructure2510 = new BitSet(new long[]{0x581046FC00000002L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2520_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2520 = new BitSet(new long[]{0x0010461C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2523_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2523 = new BitSet(new long[]{0x0010461C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2526_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2526 = new BitSet(new long[]{0x0010400000000002L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase540_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase542_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase542 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase544_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_dissolvePhrase546_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase546 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure571_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure571 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_nnp_in_dissolveStructure575_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure575 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008008L,0x00000000010E1201L});

    }static class FOLLOW_molecule_in_dissolveStructure578_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure578 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure580_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure580 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_nnchementity_in_dissolveStructure582_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure582 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_molecule_in_dissolveStructure588_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure588 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure590_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure590 = new BitSet(new long[]{0x0000400000000000L});

    }static class FOLLOW_inin_in_dissolveStructure595_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure595 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1301L});

    }static class FOLLOW_dtTHE_in_dissolveStructure597_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure597 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_adj_in_dissolveStructure600_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure600 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_nnp_in_dissolveStructure603_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure603 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_molecule_in_dissolveStructure607_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure607 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure609_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure609 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_conjunction_in_dissolveStructure613_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure613 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_dissolveStructure615_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure615 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase630_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure648_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure648 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_to_in_verbphraseStructure651_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure651 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_inAll_in_verbphraseStructure654_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure654 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_inafter_in_verbphraseStructure657_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure657 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_md_in_verbphraseStructure661_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure661 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_rbconj_in_verbphraseStructure664_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure664 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adv_in_verbphraseStructure667_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure667 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adj_in_verbphraseStructure670_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure670 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_verb_in_verbphraseStructure673_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure673 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_md_in_verbphraseStructure676_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure676 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_adv_in_verbphraseStructure679_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure679 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_adj_in_verbphraseStructure682_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure682 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_neg_in_verbphraseStructure685_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure685 = new BitSet(new long[]{0x17FFFA1800000002L,0x5DBAFABD7FCF0010L,0x000007EBC02F3805L});

    }static class FOLLOW_inoff_in_verbphraseStructure691_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure691 = new BitSet(new long[]{0x17FFFA1800000002L,0x0000000000000010L,0x0000000BC00F3805L});

    }static class FOLLOW_cc_in_verbphraseStructure695_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure695 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3005L});

    }static class FOLLOW_comma_in_verbphraseStructure698_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure698 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure701_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure701 = new BitSet(new long[]{0x17FFFA1800000002L,0x0000000000000010L,0x0000000BC00F3805L});

    }static class FOLLOW_vb_in_verb713_static {
    public static final BitSet FOLLOW_vb_in_verb713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb715_static {
    public static final BitSet FOLLOW_vbp_in_verb715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb717_static {
    public static final BitSet FOLLOW_vbg_in_verb717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb719_static {
    public static final BitSet FOLLOW_vbd_in_verb719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb721_static {
    public static final BitSet FOLLOW_vbz_in_verb721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb723_static {
    public static final BitSet FOLLOW_vbn_in_verb723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb725_static {
    public static final BitSet FOLLOW_vbuse_in_verb725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb727_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb729_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb731_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb733_static {
    public static final BitSet FOLLOW_vbsubject_in_verb733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb735_static {
    public static final BitSet FOLLOW_vbadd_in_verb735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb737_static {
    public static final BitSet FOLLOW_vbdilute_in_verb737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb739_static {
    public static final BitSet FOLLOW_vbcharge_in_verb739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb741_static {
    public static final BitSet FOLLOW_vbcontain_in_verb741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb743_static {
    public static final BitSet FOLLOW_vbdrop_in_verb743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb745_static {
    public static final BitSet FOLLOW_vbfill_in_verb745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb747_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb749_static {
    public static final BitSet FOLLOW_vbtreat_in_verb749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb751_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb753_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb755_static {
    public static final BitSet FOLLOW_vbcool_in_verb755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb757_static {
    public static final BitSet FOLLOW_vbdegass_in_verb757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb759_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb761_static {
    public static final BitSet FOLLOW_vbdry_in_verb761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb763_static {
    public static final BitSet FOLLOW_vbextract_in_verb763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb765_static {
    public static final BitSet FOLLOW_vbfilter_in_verb765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb768_static {
    public static final BitSet FOLLOW_vbheat_in_verb768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb770_static {
    public static final BitSet FOLLOW_vbincrease_in_verb770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb772_static {
    public static final BitSet FOLLOW_vbpartition_in_verb772 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb774_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb774 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb776_static {
    public static final BitSet FOLLOW_vbpurify_in_verb776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb778_static {
    public static final BitSet FOLLOW_vbquench_in_verb778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb780_static {
    public static final BitSet FOLLOW_vbrecover_in_verb780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb782_static {
    public static final BitSet FOLLOW_vbremove_in_verb782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb784_static {
    public static final BitSet FOLLOW_vbstir_in_verb784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb786_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb788_static {
    public static final BitSet FOLLOW_vbwait_in_verb788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb790_static {
    public static final BitSet FOLLOW_vbwash_in_verb790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb792_static {
    public static final BitSet FOLLOW_vbyield_in_verb792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb794_static {
    public static final BitSet FOLLOW_vbchange_in_verb794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb803_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_cc_in_degassMultiVerb805_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb805 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb807_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb807 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun816_static {
    public static final BitSet FOLLOW_nounStructure_in_noun816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_noun819_static {
    public static final BitSet FOLLOW_dash_in_noun819 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_nounStructure_in_noun821_static {
    public static final BitSet FOLLOW_nounStructure_in_noun821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_prp_in_nounStructure832_static {
    public static final BitSet FOLLOW_prp_in_nounStructure832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure834_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure834 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure836_static {
    public static final BitSet FOLLOW_citation_in_nounStructure836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure838_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure840_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure842_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure844_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure846_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure848_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure850_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure852_static {
    public static final BitSet FOLLOW_nn_in_nounStructure852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure854_static {
    public static final BitSet FOLLOW_nns_in_nounStructure854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure856_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure858_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure860_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure862_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure864_static {
    public static final BitSet FOLLOW_range_in_nounStructure864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure866_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure868_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure870_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure872_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure874_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure876_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure878_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure880_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure882_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure884_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_nounStructure886_static {
    public static final BitSet FOLLOW_nnmethod_in_nounStructure886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure888_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure890_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure892_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure894_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure896_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure898_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure900_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure902_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure904_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure906_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure908_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure910_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_reference_in_nounStructure912_static {
    public static final BitSet FOLLOW_reference_in_nounStructure912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure914_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_nounStructure916_static {
    public static final BitSet FOLLOW_number_in_nounStructure916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_nounStructure918_static {
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure920_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure922_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure924_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure926_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure928_static {
    public static final BitSet FOLLOW_fw_in_nounStructure928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure930_static {
    public static final BitSet FOLLOW_sym_in_nounStructure930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure932_static {
    public static final BitSet FOLLOW_clause_in_nounStructure932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure934_static {
    public static final BitSet FOLLOW_ls_in_nounStructure934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure936_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure938_static {
    public static final BitSet FOLLOW_pos_in_nounStructure938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure940_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase952_static {
    public static final BitSet FOLLOW_neg_in_prepphrase952 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase956_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase958_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase960_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase962_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase964_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase966_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere978_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent998_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent998 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000003C00E3201L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1001_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1001 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000003C00E1201L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1004_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1004 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000003C00E1201L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1007_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1009_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1019_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1037_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1037 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000000L,0x0000000BC00F3000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1040_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1040 = new BitSet(new long[]{0x1000021800000000L,0x0000000000000000L,0x00000003C00E3000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1044_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1044 = new BitSet(new long[]{0x1000021800000000L,0x0000000000000000L,0x00000003C00E1000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1047_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1047 = new BitSet(new long[]{0x1000021800000000L,0x0000000000000000L,0x00000003C00E1000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1050_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1050 = new BitSet(new long[]{0x1000000000000000L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1053_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1053 = new BitSet(new long[]{0x1000000000000002L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1063_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1084_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1084 = new BitSet(new long[]{0x07FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1087_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1087 = new BitSet(new long[]{0x0000021800000000L,0x0000000000000010L,0x00000003C00E3000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1090_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1090 = new BitSet(new long[]{0x0000021800000000L,0x0000000000000010L,0x00000003C00E1000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1093_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000001000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1096_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1099_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_inin_in_prepphraseIN1108_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1108 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_prepphraseIN1110_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1131_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000002000L});

    }static class FOLLOW_dt_in_prepphraseRole1133_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1136_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1159_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1159 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_inMost_in_prepphraseOther1162_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1162 = new BitSet(new long[]{0x5FFFFEFC00000000L,0x234505428030FFFFL,0x0000780FFFDFF345L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1166_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1166 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1192_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1192 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1195_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1195 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1217_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1217 = new BitSet(new long[]{0x0000200000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1220_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1220 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF341L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1223_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1248_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1248 = new BitSet(new long[]{0x0000080000000000L});

    }static class FOLLOW_inas_in_preparationphrase1250_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1250 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000004010L,0x0000000BC00F3004L});

    }static class FOLLOW_nnexample_in_preparationphrase1253_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_preparationphrase1255_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1258_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1269_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1269 = new BitSet(new long[]{0x0800021C00000002L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_conjunction_in_multiApparatus1272_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1272 = new BitSet(new long[]{0x0800021C00000000L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_apparatus_in_multiApparatus1275_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1275 = new BitSet(new long[]{0x0800021C00000002L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_dt_in_apparatus1286_static {
    public static final BitSet FOLLOW_dt_in_apparatus1286 = new BitSet(new long[]{0x0800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_preapparatus_in_apparatus1289_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1289 = new BitSet(new long[]{0x0800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnApp_in_apparatus1292_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1292 = new BitSet(new long[]{0x0800021C00000002L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnapparatus_in_nnApp1319_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1319 = new BitSet(new long[]{0x0800021C00000002L,0x0000000080108108L,0x00000000004E3209L});

    }static class FOLLOW_dash_in_nnApp1323_static {
    public static final BitSet FOLLOW_dash_in_nnApp1323 = new BitSet(new long[]{0x0800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnapparatus_in_nnApp1325_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_quantity_in_preapparatus1339_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1339 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_adj_in_preapparatus1341_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1341 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnpressure_in_preapparatus1343_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1343 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnadd_in_preapparatus1345_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1345 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_molecule_in_preapparatus1347_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1347 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnchementity_in_preapparatus1349_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1349 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nnstate_in_preapparatus1351_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1351 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nn_in_preapparatus1353_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1353 = new BitSet(new long[]{0x0800021C00000002L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_oscaront_in_oscaronts1366_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1366 = new BitSet(new long[]{0x0000004000000002L});

    }static class FOLLOW_adj_in_oscarCompound1386_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1386 = new BitSet(new long[]{0x0000021800000000L,0x0000000000008000L,0x00000000000E0200L});

    }static class FOLLOW_oscarCompound1_in_oscarCompound1390_static {
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1390 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarCompound2_in_oscarCompound1392_static {
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1392 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarCompound3_in_oscarCompound1394_static {
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1394 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarCompound4_in_oscarCompound1396_static {
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound1396 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_oscarcm_in_oscarCompound1398_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1398 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000000000E0040L});

    }static class FOLLOW_adj_in_oscarCompound1401_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_reference_in_oscarCompound1404_static {
    public static final BitSet FOLLOW_reference_in_oscarCompound1404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_oscarCompound41413_static {
    public static final BitSet FOLLOW_lrb_in_oscarCompound41413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound41416_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound41416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_oscarCompound41418_static {
    public static final BitSet FOLLOW_rrb_in_oscarCompound41418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound3Structure_in_oscarCompound31441_static {
    public static final BitSet FOLLOW_oscarCompound3Structure_in_oscarCompound31441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound2Structure_in_oscarCompound21459_static {
    public static final BitSet FOLLOW_oscarCompound2Structure_in_oscarCompound21459 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompound11477_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound11479_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound3Structure1502_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound3Structure1502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000AL});

    }static class FOLLOW_dash_in_oscarCompound3Structure1505_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound3Structure1505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});

    }static class FOLLOW_apost_in_oscarCompound3Structure1507_static {
    public static final BitSet FOLLOW_apost_in_oscarCompound3Structure1507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});

    }static class FOLLOW_oscarcm_in_oscarCompound2Structure1518_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure1518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_oscarCompound2Structure1521_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure1521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_oscarCompound2Structure1523_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure1523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_oscarCompound2Structure1528_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure1528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1539_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1556_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1558_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1562_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31572_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31572 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_mixture_in_moleculeamount31574_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31574 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_inof_in_moleculeamount31577_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_mixtureRatio_in_moleculeamount31579_static {
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount31579 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_mixture_in_moleculeamount31581_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31581 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31584_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount11594_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11594 = new BitSet(new long[]{0x0010000400000000L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_moleculeamount11596_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11596 = new BitSet(new long[]{0x0010000400000000L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_inof_in_moleculeamount11600_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11600 = new BitSet(new long[]{0x0010021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_quantity_in_moleculeamount11602_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11602 = new BitSet(new long[]{0x0010021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_inof_in_moleculeamount11605_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11605 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11608_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11608 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_moleculeamount11610_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21620_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21620 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_mixture_in_moleculeamount21622_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21622 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21626_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21626 = new BitSet(new long[]{0x0000021C00000002L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_cdAlphanumType_in_moleculeamount21632_static {
    public static final BitSet FOLLOW_cdAlphanumType_in_moleculeamount21632 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_number_in_moleculeamount21634_static {
    public static final BitSet FOLLOW_number_in_moleculeamount21634 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_quantity_in_moleculeamount21636_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21636 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_citation_in_moleculeamount21641_static {
    public static final BitSet FOLLOW_citation_in_moleculeamount21641 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_moleculeamount21643_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21643 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_comma_in_moleculeamount21645_static {
    public static final BitSet FOLLOW_comma_in_moleculeamount21645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_quantity1Node_in_moleculeamount21648_static {
    public static final BitSet FOLLOW_quantity1Node_in_moleculeamount21648 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_citationStructure_in_moleculeamount21650_static {
    public static final BitSet FOLLOW_citationStructure_in_moleculeamount21650 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_moleculeamount21653_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21653 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1665_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1682_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1684_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1688_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1692_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1694_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount51714_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount51714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount51716_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount51716 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount51718_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount51718 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51722_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51722 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount51724_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount51724 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount11736_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11736 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount11738_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11738 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount11741_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount11741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_unnamedmoleculeamount11743_static {
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount21753_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount21753 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_cdAlphanumType_in_unnamedmoleculeamount21755_static {
    public static final BitSet FOLLOW_cdAlphanumType_in_unnamedmoleculeamount21755 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount21759_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount21759 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount21761_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount21761 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount21763_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount21763 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount31773_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount31773 = new BitSet(new long[]{0x0010000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount31775_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount31775 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount31778_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount31778 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_unnamedmoleculeamount31781_static {
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount31781 = new BitSet(new long[]{0x580006FC00000002L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41792_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount41794_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount41794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount41797_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount41797 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity1808_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity1808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity1810_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity1810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node1819_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node1819 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity11839_static {
    public static final BitSet FOLLOW_lrb_in_quantity11839 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_quantity11841_static {
    public static final BitSet FOLLOW_measurements_in_quantity11841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000411L});

    }static class FOLLOW_comma_in_quantity11844_static {
    public static final BitSet FOLLOW_comma_in_quantity11844 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_quantity11847_static {
    public static final BitSet FOLLOW_measurements_in_quantity11847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000411L});

    }static class FOLLOW_comma_in_quantity11852_static {
    public static final BitSet FOLLOW_comma_in_quantity11852 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity11854_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity11854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000411L});

    }static class FOLLOW_stop_in_quantity11859_static {
    public static final BitSet FOLLOW_stop_in_quantity11859 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity11861_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity11861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000410L});

    }static class FOLLOW_rrb_in_quantity11866_static {
    public static final BitSet FOLLOW_rrb_in_quantity11866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node1874_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node1874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity21895_static {
    public static final BitSet FOLLOW_measurements_in_quantity21895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_quantity21898_static {
    public static final BitSet FOLLOW_comma_in_quantity21898 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_quantity21901_static {
    public static final BitSet FOLLOW_measurements_in_quantity21901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_cd_in_measurements1914_static {
    public static final BitSet FOLLOW_cd_in_measurements1914 = new BitSet(new long[]{0x0800021C00000000L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_nn_in_measurements1916_static {
    public static final BitSet FOLLOW_nn_in_measurements1916 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_multiple_in_measurements1921_static {
    public static final BitSet FOLLOW_multiple_in_measurements1921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_measurementtypes_in_measurements1923_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements1923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_dt_in_measurements1929_static {
    public static final BitSet FOLLOW_dt_in_measurements1929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple1937_static {
    public static final BitSet FOLLOW_cd_in_multiple1937 = new BitSet(new long[]{0x0000010000000000L});

    }static class FOLLOW_cdunicode_in_multiple1939_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple1939 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurementtypes_in_multiple1941_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple1941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes1966_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes1966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes1968_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes1968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes1970_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes1970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes1972_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes1972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes1974_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes1974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes1976_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes1976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar1984_static {
    public static final BitSet FOLLOW_cd_in_molar1984 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nnmolar_in_molar1987_static {
    public static final BitSet FOLLOW_nnmolar_in_molar1987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2008_static {
    public static final BitSet FOLLOW_cd_in_amount2008 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nnamount_in_amount2011_static {
    public static final BitSet FOLLOW_nnamount_in_amount2011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2032_static {
    public static final BitSet FOLLOW_cd_in_mass2032 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nnmass_in_mass2035_static {
    public static final BitSet FOLLOW_nnmass_in_mass2035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2055_static {
    public static final BitSet FOLLOW_cd_in_volume2055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000001000L});

    }static class FOLLOW_nnvol_in_volume2058_static {
    public static final BitSet FOLLOW_nnvol_in_volume2058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield2078_static {
    public static final BitSet FOLLOW_percent_in_yield2078 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_nnyield_in_yield2080_static {
    public static final BitSet FOLLOW_nnyield_in_yield2080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_percent2098_static {
    public static final BitSet FOLLOW_number_in_percent2098 = new BitSet(new long[]{0x0800021C00000000L,0x0000000000108108L,0x00000000004E1221L});

    }static class FOLLOW_nn_in_percent2100_static {
    public static final BitSet FOLLOW_nn_in_percent2100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnpercent_in_percent2103_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2103 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureRatio_in_mixture2126_static {
    public static final BitSet FOLLOW_mixtureRatio_in_mixture2126 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001201L});

    }static class FOLLOW_mixtureStructure3_in_mixture2131_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2131 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2133_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2133 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture2135_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2135 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22162_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_lrb_in_mixtureStructure22164_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22164 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22166_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_mixtureStructure22168_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_mixtureStructure22170_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22170 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12176_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12176 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_mixtureStructure12178_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure12178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_mixtureStructure12180_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32188_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nnpercent_in_mixtureStructure32191_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure32191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_mixtureStructure32193_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32193 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mixtureRatio2202_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio2202 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});

    }static class FOLLOW_colon_in_mixtureRatio2204_static {
    public static final BitSet FOLLOW_colon_in_mixtureRatio2204 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_mixtureRatio2207_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio2207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_mixtureRatio2209_static {
    public static final BitSet FOLLOW_cdAlphanum_in_mixtureRatio2209 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent2219_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2219 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_mixtureContent2221_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2221 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nn_in_mixtureContent2223_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent2223 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_quantity2Node_in_mixtureContent2225_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2225 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_mixtureContent2227_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2227 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_mixtureContent2229_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2229 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent2231_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2231 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_mixtureContent2233_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2233 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_mixtureContent2235_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2235 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2237_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2237 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_mixtureContent2239_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2239 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_mixtureContent2241_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2241 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent2243_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2243 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_mixtureContent2245_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2245 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_mixtureContent2247_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2247 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent2249_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2249 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_mixtureContent2251_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2251 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_mixtureContent2253_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2253 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_mixtureContent2255_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2255 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent2257_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2257 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_minimixture_in_mixtureContent2261_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent2261 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_fw_in_mixtureContent2263_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2263 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_mixtureContent2265_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2265 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_quantity2Node_in_mixtureContent2267_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2267 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnyield_in_mixtureContent2269_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent2269 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_mixtureContent2271_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2271 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_mixtureContent2273_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2273 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent2275_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2275 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_mixtureContent2277_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2277 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_mixtureContent2279_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2279 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2281_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2281 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_mixtureContent2283_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2283 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_mixtureContent2285_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2285 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent2287_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2287 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_mixtureContent2289_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2289 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_mixtureContent2291_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2291 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_mixtureContent2293_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2293 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_mixtureContent2295_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2295 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_mixtureContent2297_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2297 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_mixtureContent2299_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2299 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_mixtureContent2301_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2301 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureStructure2_in_minimixture2312_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture2312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture2314_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture2314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_minimixtureStructure22335_static {
    public static final BitSet FOLLOW_comma_in_minimixtureStructure22335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_lrb_in_minimixtureStructure22337_static {
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure22337 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_minimixtureStructure22339_static {
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure22339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_minimixtureStructure22341_static {
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure22341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_minimixtureStructure22343_static {
    public static final BitSet FOLLOW_comma_in_minimixtureStructure22343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_minimixtureStructure12350_static {
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure12350 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_mixtureContent_in_minimixtureStructure12352_static {
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure12352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_minimixtureStructure12354_static {
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure12354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_minimixtureContent2363_static {
    public static final BitSet FOLLOW_fw_in_minimixtureContent2363 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nn_in_minimixtureContent2365_static {
    public static final BitSet FOLLOW_nn_in_minimixtureContent2365 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_minimixtureContent2367_static {
    public static final BitSet FOLLOW_verb_in_minimixtureContent2367 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_quantity2Node_in_minimixtureContent2369_static {
    public static final BitSet FOLLOW_quantity2Node_in_minimixtureContent2369 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_minimixtureContent2371_static {
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent2371 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_minimixtureContent2373_static {
    public static final BitSet FOLLOW_md_in_minimixtureContent2373 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent2375_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent2375 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_minimixtureContent2377_static {
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent2377 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_minimixtureContent2379_static {
    public static final BitSet FOLLOW_molecule_in_minimixtureContent2379 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_minimixtureContent2381_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent2381 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_minimixtureContent2383_static {
    public static final BitSet FOLLOW_dash_in_minimixtureContent2383 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_minimixtureContent2385_static {
    public static final BitSet FOLLOW_sym_in_minimixtureContent2385 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent2387_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent2387 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_minimixtureContent2389_static {
    public static final BitSet FOLLOW_noun_in_minimixtureContent2389 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_minimixtureContent2391_static {
    public static final BitSet FOLLOW_inAll_in_minimixtureContent2391 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent2393_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent2393 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_minimixtureContent2395_static {
    public static final BitSet FOLLOW_comma_in_minimixtureContent2395 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_minimixtureContent2397_static {
    public static final BitSet FOLLOW_adj_in_minimixtureContent2397 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_minimixtureContent2399_static {
    public static final BitSet FOLLOW_colon_in_minimixtureContent2399 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent2401_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent2401 = new BitSet(new long[]{0x5FFFFEFC00000000L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_fw_in_minimixtureContent2405_static {
    public static final BitSet FOLLOW_fw_in_minimixtureContent2405 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_verb_in_minimixtureContent2407_static {
    public static final BitSet FOLLOW_verb_in_minimixtureContent2407 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_quantity2Node_in_minimixtureContent2409_static {
    public static final BitSet FOLLOW_quantity2Node_in_minimixtureContent2409 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnyield_in_minimixtureContent2411_static {
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent2411 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nnpercent_in_minimixtureContent2413_static {
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent2413 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_md_in_minimixtureContent2415_static {
    public static final BitSet FOLLOW_md_in_minimixtureContent2415 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent2417_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent2417 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_oscarCompound_in_minimixtureContent2419_static {
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent2419 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_molecule_in_minimixtureContent2421_static {
    public static final BitSet FOLLOW_molecule_in_minimixtureContent2421 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_unnamedmolecule_in_minimixtureContent2423_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent2423 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_dash_in_minimixtureContent2425_static {
    public static final BitSet FOLLOW_dash_in_minimixtureContent2425 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_sym_in_minimixtureContent2427_static {
    public static final BitSet FOLLOW_sym_in_minimixtureContent2427 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent2429_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent2429 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_noun_in_minimixtureContent2431_static {
    public static final BitSet FOLLOW_noun_in_minimixtureContent2431 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_inAll_in_minimixtureContent2433_static {
    public static final BitSet FOLLOW_inAll_in_minimixtureContent2433 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_cd_in_minimixtureContent2435_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent2435 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_comma_in_minimixtureContent2437_static {
    public static final BitSet FOLLOW_comma_in_minimixtureContent2437 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_adj_in_minimixtureContent2439_static {
    public static final BitSet FOLLOW_adj_in_minimixtureContent2439 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_colon_in_minimixtureContent2441_static {
    public static final BitSet FOLLOW_colon_in_minimixtureContent2441 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_stop_in_minimixtureContent2443_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent2443 = new BitSet(new long[]{0x5FFFFEFC00000002L,0xFFFFFFFFFFFFFFFFL,0x00007FEFFFFFF279L});

    }static class FOLLOW_nngeneral_in_method2458_static {
    public static final BitSet FOLLOW_nngeneral_in_method2458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nn_in_method2460_static {
    public static final BitSet FOLLOW_nn_in_method2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnmethod_in_method2464_static {
    public static final BitSet FOLLOW_nnmethod_in_method2464 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_method2467_static {
    public static final BitSet FOLLOW_cdAlphanum_in_method2467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_method2469_static {
    public static final BitSet FOLLOW_cd_in_method2469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_brackets2481_static {
    public static final BitSet FOLLOW_lrb_in_brackets2481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_rrb_in_brackets2483_static {
    public static final BitSet FOLLOW_rrb_in_brackets2483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_lsqb_in_brackets2485_static {
    public static final BitSet FOLLOW_lsqb_in_brackets2485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_rsqb_in_brackets2487_static {
    public static final BitSet FOLLOW_rsqb_in_brackets2487 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000006C0L});

    }static class FOLLOW_lrb_in_cdAlphanumType2498_static {
    public static final BitSet FOLLOW_lrb_in_cdAlphanumType2498 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_cdAlphanumType2501_static {
    public static final BitSet FOLLOW_cdAlphanum_in_cdAlphanumType2501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_cd_in_cdAlphanumType2503_static {
    public static final BitSet FOLLOW_cd_in_cdAlphanumType2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_rrb_in_cdAlphanumType2506_static {
    public static final BitSet FOLLOW_rrb_in_cdAlphanumType2506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2514_static {
    public static final BitSet FOLLOW_adv_in_advAdj2514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2516_static {
    public static final BitSet FOLLOW_adj_in_advAdj2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_range2523_static {
    public static final BitSet FOLLOW_number_in_range2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_range2525_static {
    public static final BitSet FOLLOW_dash_in_range2525 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_number_in_range2527_static {
    public static final BitSet FOLLOW_number_in_range2527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2534_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2551_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2551 = new BitSet(new long[]{0x0800021C00000000L,0x0000000000109108L,0x00000000004E1201L});

    }static class FOLLOW_dashNN_in_cycleStructure2553_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_nncycle_in_cycleStructure2556_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2564_static {
    public static final BitSet FOLLOW_adj_in_dashNN2564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nn_in_dashNN2566_static {
    public static final BitSet FOLLOW_nn_in_dashNN2566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_cd_in_dashNN2568_static {
    public static final BitSet FOLLOW_cd_in_dashNN2568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_dash_in_dashNN2572_static {
    public static final BitSet FOLLOW_dash_in_dashNN2572 = new BitSet(new long[]{0x0800021C00000000L,0x0000000000108108L,0x00000000004E1201L});

    }static class FOLLOW_adj_in_dashNN2575_static {
    public static final BitSet FOLLOW_adj_in_dashNN2575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nn_in_dashNN2577_static {
    public static final BitSet FOLLOW_nn_in_dashNN2577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_cd_in_dashNN2579_static {
    public static final BitSet FOLLOW_cd_in_dashNN2579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_numberratio_in_ratio2590_static {
    public static final BitSet FOLLOW_numberratio_in_ratio2590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio2592_static {
    public static final BitSet FOLLOW_nounratio_in_ratio2592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberratio2615_static {
    public static final BitSet FOLLOW_cd_in_numberratio2615 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000001000L});

    }static class FOLLOW_colon_in_numberratio2618_static {
    public static final BitSet FOLLOW_colon_in_numberratio2618 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_numberratio2620_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numberratio2620 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_numberratio2622_static {
    public static final BitSet FOLLOW_cd_in_numberratio2622 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000001000L});

    }static class FOLLOW_noun_in_nounratio2634_static {
    public static final BitSet FOLLOW_noun_in_nounratio2634 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});

    }static class FOLLOW_colon_in_nounratio2638_static {
    public static final BitSet FOLLOW_colon_in_nounratio2638 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_nounratio2640_static {
    public static final BitSet FOLLOW_noun_in_nounratio2640 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});

    }static class FOLLOW_lsqb_in_reference2653_static {
    public static final BitSet FOLLOW_lsqb_in_reference2653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cd_in_reference2655_static {
    public static final BitSet FOLLOW_cd_in_reference2655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_rsqb_in_reference2657_static {
    public static final BitSet FOLLOW_rsqb_in_reference2657 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_citation2664_static {
    public static final BitSet FOLLOW_citationStructure_in_citation2664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation2666_static {
    public static final BitSet FOLLOW_comma_in_citation2666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_citationContent_in_citation2668_static {
    public static final BitSet FOLLOW_citationContent_in_citation2668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_comma_in_citation2670_static {
    public static final BitSet FOLLOW_comma_in_citation2670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure2678_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure2678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent2694_static {
    public static final BitSet FOLLOW_lrb_in_citationContent2694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_nnp_in_citationContent2697_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_fw_in_citationContent2699_static {
    public static final BitSet FOLLOW_fw_in_citationContent2699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_cd_in_citationContent2701_static {
    public static final BitSet FOLLOW_cd_in_citationContent2701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_conjunction_in_citationContent2703_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009801L});

    }static class FOLLOW_nnp_in_citationContent2707_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009C01L});

    }static class FOLLOW_fw_in_citationContent2709_static {
    public static final BitSet FOLLOW_fw_in_citationContent2709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009C01L});

    }static class FOLLOW_cd_in_citationContent2711_static {
    public static final BitSet FOLLOW_cd_in_citationContent2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009C01L});

    }static class FOLLOW_conjunction_in_citationContent2713_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001009C01L});

    }static class FOLLOW_rrb_in_citationContent2717_static {
    public static final BitSet FOLLOW_rrb_in_citationContent2717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj2726_static {
    public static final BitSet FOLLOW_jj_in_adj2726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj2728_static {
    public static final BitSet FOLLOW_jjr_in_adj2728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj2730_static {
    public static final BitSet FOLLOW_jjs_in_adj2730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj2732_static {
    public static final BitSet FOLLOW_oscarcj_in_adj2732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj2734_static {
    public static final BitSet FOLLOW_jjchem_in_adj2734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj2736_static {
    public static final BitSet FOLLOW_oscarrn_in_adj2736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv2743_static {
    public static final BitSet FOLLOW_rb_in_adv2743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv2745_static {
    public static final BitSet FOLLOW_rbr_in_adv2745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv2747_static {
    public static final BitSet FOLLOW_rp_in_adv2747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv2749_static {
    public static final BitSet FOLLOW_rbs_in_adv2749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause2756_static {
    public static final BitSet FOLLOW_wdt_in_clause2756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause2758_static {
    public static final BitSet FOLLOW_wp_poss_in_clause2758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause2760_static {
    public static final BitSet FOLLOW_wrb_in_clause2760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause2762_static {
    public static final BitSet FOLLOW_ex_in_clause2762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause2764_static {
    public static final BitSet FOLLOW_pdt_in_clause2764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause2766_static {
    public static final BitSet FOLLOW_wp_in_clause2766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction2773_static {
    public static final BitSet FOLLOW_cc_in_conjunction2773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction2775_static {
    public static final BitSet FOLLOW_comma_in_conjunction2775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll2782_static {
    public static final BitSet FOLLOW_in_in_inAll2782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll2784_static {
    public static final BitSet FOLLOW_inafter_in_inAll2784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll2786_static {
    public static final BitSet FOLLOW_inas_in_inAll2786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll2788_static {
    public static final BitSet FOLLOW_inbefore_in_inAll2788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll2790_static {
    public static final BitSet FOLLOW_inby_in_inAll2790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll2792_static {
    public static final BitSet FOLLOW_infor_in_inAll2792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll2794_static {
    public static final BitSet FOLLOW_infrom_in_inAll2794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll2796_static {
    public static final BitSet FOLLOW_inin_in_inAll2796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll2798_static {
    public static final BitSet FOLLOW_ininto_in_inAll2798 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll2800_static {
    public static final BitSet FOLLOW_inof_in_inAll2800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll2802_static {
    public static final BitSet FOLLOW_inoff_in_inAll2802 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll2804_static {
    public static final BitSet FOLLOW_inon_in_inAll2804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll2806_static {
    public static final BitSet FOLLOW_inover_in_inAll2806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll2808_static {
    public static final BitSet FOLLOW_inunder_in_inAll2808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll2810_static {
    public static final BitSet FOLLOW_invia_in_inAll2810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll2812_static {
    public static final BitSet FOLLOW_inwith_in_inAll2812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll2814_static {
    public static final BitSet FOLLOW_inwithout_in_inAll2814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll2816_static {
    public static final BitSet FOLLOW_to_in_inAll2816 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost2823_static {
    public static final BitSet FOLLOW_in_in_inMost2823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost2825_static {
    public static final BitSet FOLLOW_inas_in_inMost2825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost2827_static {
    public static final BitSet FOLLOW_inbefore_in_inMost2827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost2829_static {
    public static final BitSet FOLLOW_inby_in_inMost2829 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost2831_static {
    public static final BitSet FOLLOW_infor_in_inMost2831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost2833_static {
    public static final BitSet FOLLOW_infrom_in_inMost2833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost2835_static {
    public static final BitSet FOLLOW_inin_in_inMost2835 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost2837_static {
    public static final BitSet FOLLOW_ininto_in_inMost2837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost2839_static {
    public static final BitSet FOLLOW_inof_in_inMost2839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost2841_static {
    public static final BitSet FOLLOW_inoff_in_inMost2841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost2843_static {
    public static final BitSet FOLLOW_inon_in_inMost2843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost2845_static {
    public static final BitSet FOLLOW_inover_in_inMost2845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost2847_static {
    public static final BitSet FOLLOW_inunder_in_inMost2847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost2849_static {
    public static final BitSet FOLLOW_invia_in_inMost2849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost2851_static {
    public static final BitSet FOLLOW_inwith_in_inMost2851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost2853_static {
    public static final BitSet FOLLOW_inwithout_in_inMost2853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost2855_static {
    public static final BitSet FOLLOW_to_in_inMost2855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_number2862_static {
    public static final BitSet FOLLOW_cd_in_number2862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_number2864_static {
    public static final BitSet FOLLOW_cdAlphanum_in_number2864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_34_in_cdAlphanum2872_static {
    public static final BitSet FOLLOW_34_in_cdAlphanum2872 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum2874_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum2874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_35_in_oscarcj2887_static {
    public static final BitSet FOLLOW_35_in_oscarcj2887 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarcj2889_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_36_in_oscarrn2902_static {
    public static final BitSet FOLLOW_36_in_oscarrn2902 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarrn2904_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_37_in_oscarase2917_static {
    public static final BitSet FOLLOW_37_in_oscarase2917 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarase2919_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase2919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_oscaront2932_static {
    public static final BitSet FOLLOW_38_in_oscaront2932 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscaront2934_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront2934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_tmunicode2947_static {
    public static final BitSet FOLLOW_39_in_tmunicode2947 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_tmunicode2949_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_cdunicode2962_static {
    public static final BitSet FOLLOW_40_in_cdunicode2962 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cdunicode2964_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_jjchem2977_static {
    public static final BitSet FOLLOW_41_in_jjchem2977 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjchem2979_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem2979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_jjcomp2992_static {
    public static final BitSet FOLLOW_42_in_jjcomp2992 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjcomp2994_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp2994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_inas3008_static {
    public static final BitSet FOLLOW_43_in_inas3008 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inas3010_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_inbefore3023_static {
    public static final BitSet FOLLOW_44_in_inbefore3023 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inbefore3025_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_inafter3038_static {
    public static final BitSet FOLLOW_45_in_inafter3038 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inafter3040_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_inin3053_static {
    public static final BitSet FOLLOW_46_in_inin3053 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inin3055_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3055 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_ininto3068_static {
    public static final BitSet FOLLOW_47_in_ininto3068 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_ininto3070_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inwith3083_static {
    public static final BitSet FOLLOW_48_in_inwith3083 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inwith3085_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inwithout3098_static {
    public static final BitSet FOLLOW_49_in_inwithout3098 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inwithout3100_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inby3113_static {
    public static final BitSet FOLLOW_50_in_inby3113 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inby3115_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3115 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_invia3128_static {
    public static final BitSet FOLLOW_51_in_invia3128 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_invia3130_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inof3143_static {
    public static final BitSet FOLLOW_52_in_inof3143 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inof3145_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3145 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inon3158_static {
    public static final BitSet FOLLOW_53_in_inon3158 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inon3160_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3160 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_infor3173_static {
    public static final BitSet FOLLOW_54_in_infor3173 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_infor3175_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3175 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_infrom3188_static {
    public static final BitSet FOLLOW_55_in_infrom3188 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_infrom3190_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3190 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inunder3203_static {
    public static final BitSet FOLLOW_56_in_inunder3203 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inunder3205_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3205 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inover3218_static {
    public static final BitSet FOLLOW_57_in_inover3218 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inover3220_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_inoff3233_static {
    public static final BitSet FOLLOW_58_in_inoff3233 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_inoff3235_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_nnstate3250_static {
    public static final BitSet FOLLOW_59_in_nnstate3250 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnstate3252_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_nntime3265_static {
    public static final BitSet FOLLOW_60_in_nntime3265 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nntime3267_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_nnmass3280_static {
    public static final BitSet FOLLOW_61_in_nnmass3280 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmass3282_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_nnamount3295_static {
    public static final BitSet FOLLOW_62_in_nnamount3295 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnamount3297_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnmolar3310_static {
    public static final BitSet FOLLOW_63_in_nnmolar3310 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3312_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nnatmosphere3325_static {
    public static final BitSet FOLLOW_64_in_nnatmosphere3325 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3327_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nneq3340_static {
    public static final BitSet FOLLOW_65_in_nneq3340 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nneq3342_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnvol3355_static {
    public static final BitSet FOLLOW_66_in_nnvol3355 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnvol3357_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnchementity3370_static {
    public static final BitSet FOLLOW_67_in_nnchementity3370 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3372_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nntemp3385_static {
    public static final BitSet FOLLOW_68_in_nntemp3385 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nntemp3387_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nnflash3400_static {
    public static final BitSet FOLLOW_69_in_nnflash3400 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnflash3402_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nngeneral3415_static {
    public static final BitSet FOLLOW_70_in_nngeneral3415 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3417_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnmethod3430_static {
    public static final BitSet FOLLOW_71_in_nnmethod3430 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3432_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nnpressure3445_static {
    public static final BitSet FOLLOW_72_in_nnpressure3445 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3447_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nncolumn3460_static {
    public static final BitSet FOLLOW_73_in_nncolumn3460 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3462_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnchromatography3475_static {
    public static final BitSet FOLLOW_74_in_nnchromatography3475 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3477_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nnvacuum3490_static {
    public static final BitSet FOLLOW_75_in_nnvacuum3490 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3492_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nncycle3505_static {
    public static final BitSet FOLLOW_76_in_nncycle3505 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nncycle3507_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3507 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nntimes3520_static {
    public static final BitSet FOLLOW_77_in_nntimes3520 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nntimes3522_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nnexample3535_static {
    public static final BitSet FOLLOW_78_in_nnexample3535 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnexample3537_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_oscarcm3552_static {
    public static final BitSet FOLLOW_79_in_oscarcm3552 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3554_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_vbuse3569_static {
    public static final BitSet FOLLOW_80_in_vbuse3569 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbuse3571_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3571 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_vbchange3584_static {
    public static final BitSet FOLLOW_81_in_vbchange3584 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbchange3586_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_vbsubmerge3599_static {
    public static final BitSet FOLLOW_82_in_vbsubmerge3599 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3601_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_vbsubject3614_static {
    public static final BitSet FOLLOW_83_in_vbsubject3614 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3616_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_nnadd3631_static {
    public static final BitSet FOLLOW_84_in_nnadd3631 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnadd3633_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_nnmixture3646_static {
    public static final BitSet FOLLOW_85_in_nnmixture3646 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3648_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbdilute3661_static {
    public static final BitSet FOLLOW_86_in_vbdilute3661 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3663_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbadd3676_static {
    public static final BitSet FOLLOW_87_in_vbadd3676 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbadd3678_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd3678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbcharge3691_static {
    public static final BitSet FOLLOW_88_in_vbcharge3691 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbcharge3693_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_vbcontain3706_static {
    public static final BitSet FOLLOW_89_in_vbcontain3706 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbcontain3708_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3708 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_vbdrop3721_static {
    public static final BitSet FOLLOW_90_in_vbdrop3721 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdrop3723_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbfill3736_static {
    public static final BitSet FOLLOW_91_in_vbfill3736 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbfill3738_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill3738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbsuspend3751_static {
    public static final BitSet FOLLOW_92_in_vbsuspend3751 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend3753_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbtreat3766_static {
    public static final BitSet FOLLOW_93_in_vbtreat3766 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbtreat3768_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbapparatus3783_static {
    public static final BitSet FOLLOW_94_in_vbapparatus3783 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus3785_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_nnapparatus3798_static {
    public static final BitSet FOLLOW_95_in_nnapparatus3798 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus3800_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbconcentrate3815_static {
    public static final BitSet FOLLOW_96_in_vbconcentrate3815 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate3817_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_nnconcentrate3830_static {
    public static final BitSet FOLLOW_97_in_nnconcentrate3830 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate3832_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbcool3847_static {
    public static final BitSet FOLLOW_98_in_vbcool3847 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbcool3849_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool3849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbdegass3864_static {
    public static final BitSet FOLLOW_99_in_vbdegass3864 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdegass3866_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass3866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_vbdissolve3881_static {
    public static final BitSet FOLLOW_100_in_vbdissolve3881 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve3883_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve3883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbdry3898_static {
    public static final BitSet FOLLOW_101_in_vbdry3898 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbdry3900_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry3900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nndry3913_static {
    public static final BitSet FOLLOW_102_in_nndry3913 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nndry3915_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry3915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbextract3930_static {
    public static final BitSet FOLLOW_103_in_vbextract3930 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbextract3932_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract3932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_nnextract3945_static {
    public static final BitSet FOLLOW_104_in_nnextract3945 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnextract3947_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract3947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbfilter3962_static {
    public static final BitSet FOLLOW_105_in_vbfilter3962 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbfilter3964_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter3964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_nnfilter3977_static {
    public static final BitSet FOLLOW_106_in_nnfilter3977 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnfilter3979_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter3979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_vbheat3994_static {
    public static final BitSet FOLLOW_107_in_vbheat3994 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbheat3996_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat3996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbincrease4009_static {
    public static final BitSet FOLLOW_108_in_vbincrease4009 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4011_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_vbimmerse4026_static {
    public static final BitSet FOLLOW_109_in_vbimmerse4026 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4028_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbpartition4043_static {
    public static final BitSet FOLLOW_110_in_vbpartition4043 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4045_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_vbprecipitate4060_static {
    public static final BitSet FOLLOW_111_in_vbprecipitate4060 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4062_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_nnprecipitate4075_static {
    public static final BitSet FOLLOW_112_in_nnprecipitate4075 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4077_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbpurify4092_static {
    public static final BitSet FOLLOW_113_in_vbpurify4092 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4094_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_nnpurify4107_static {
    public static final BitSet FOLLOW_114_in_nnpurify4107 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4109_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4109 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbquench4124_static {
    public static final BitSet FOLLOW_115_in_vbquench4124 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbquench4126_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbrecover4141_static {
    public static final BitSet FOLLOW_116_in_vbrecover4141 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4143_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_vbremove4158_static {
    public static final BitSet FOLLOW_117_in_vbremove4158 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbremove4160_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4160 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_nnremove4173_static {
    public static final BitSet FOLLOW_118_in_nnremove4173 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnremove4175_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4175 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_vbstir4190_static {
    public static final BitSet FOLLOW_119_in_vbstir4190 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbstir4192_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4192 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbsynthesize4207_static {
    public static final BitSet FOLLOW_120_in_vbsynthesize4207 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4209_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4209 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_nnsynthesize4222_static {
    public static final BitSet FOLLOW_121_in_nnsynthesize4222 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4224_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbwait4239_static {
    public static final BitSet FOLLOW_122_in_vbwait4239 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbwait4241_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_vbwash4256_static {
    public static final BitSet FOLLOW_123_in_vbwash4256 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbwash4258_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbyield4273_static {
    public static final BitSet FOLLOW_124_in_vbyield4273 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbyield4275_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_nnyield4290_static {
    public static final BitSet FOLLOW_125_in_nnyield4290 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnyield4292_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_rbconj4308_static {
    public static final BitSet FOLLOW_126_in_rbconj4308 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rbconj4310_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_colon4323_static {
    public static final BitSet FOLLOW_127_in_colon4323 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_colon4325_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_comma4338_static {
    public static final BitSet FOLLOW_128_in_comma4338 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_comma4340_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_apost4353_static {
    public static final BitSet FOLLOW_129_in_apost4353 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_apost4355_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_neg4368_static {
    public static final BitSet FOLLOW_130_in_neg4368 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_neg4370_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_dash4383_static {
    public static final BitSet FOLLOW_131_in_dash4383 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_dash4385_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_stop4398_static {
    public static final BitSet FOLLOW_132_in_stop4398 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_stop4400_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_nnpercent4413_static {
    public static final BitSet FOLLOW_133_in_nnpercent4413 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4415_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_lsqb4428_static {
    public static final BitSet FOLLOW_134_in_lsqb4428 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_lsqb4430_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_rsqb4443_static {
    public static final BitSet FOLLOW_135_in_rsqb4443 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rsqb4445_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dtTHE4460_static {
    public static final BitSet FOLLOW_136_in_dtTHE4460 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4462_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_lrb4476_static {
    public static final BitSet FOLLOW_137_in_lrb4476 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_lrb4478_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_rrb4491_static {
    public static final BitSet FOLLOW_138_in_rrb4491 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rrb4493_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_cc4510_static {
    public static final BitSet FOLLOW_139_in_cc4510 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cc4512_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_cd4527_static {
    public static final BitSet FOLLOW_140_in_cd4527 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_cd4529_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_dt4544_static {
    public static final BitSet FOLLOW_141_in_dt4544 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_dt4546_static {
    public static final BitSet FOLLOW_TOKEN_in_dt4546 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_ex4561_static {
    public static final BitSet FOLLOW_142_in_ex4561 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_ex4563_static {
    public static final BitSet FOLLOW_TOKEN_in_ex4563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_fw4578_static {
    public static final BitSet FOLLOW_143_in_fw4578 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_fw4580_static {
    public static final BitSet FOLLOW_TOKEN_in_fw4580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_in4595_static {
    public static final BitSet FOLLOW_144_in_in4595 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_in4597_static {
    public static final BitSet FOLLOW_TOKEN_in_in4597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_jj4612_static {
    public static final BitSet FOLLOW_145_in_jj4612 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jj4614_static {
    public static final BitSet FOLLOW_TOKEN_in_jj4614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_jjr4629_static {
    public static final BitSet FOLLOW_146_in_jjr4629 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjr4631_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr4631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_jjs4646_static {
    public static final BitSet FOLLOW_147_in_jjs4646 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_jjs4648_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs4648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ls4663_static {
    public static final BitSet FOLLOW_148_in_ls4663 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_ls4665_static {
    public static final BitSet FOLLOW_TOKEN_in_ls4665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_md4680_static {
    public static final BitSet FOLLOW_149_in_md4680 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_md4682_static {
    public static final BitSet FOLLOW_TOKEN_in_md4682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_nn4697_static {
    public static final BitSet FOLLOW_150_in_nn4697 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nn4699_static {
    public static final BitSet FOLLOW_TOKEN_in_nn4699 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_nns4714_static {
    public static final BitSet FOLLOW_151_in_nns4714 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nns4716_static {
    public static final BitSet FOLLOW_TOKEN_in_nns4716 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_nnp4731_static {
    public static final BitSet FOLLOW_152_in_nnp4731 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnp4733_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp4733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_nnps4748_static {
    public static final BitSet FOLLOW_153_in_nnps4748 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_nnps4750_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps4750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_pdt4765_static {
    public static final BitSet FOLLOW_154_in_pdt4765 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_pdt4767_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt4767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_pos4782_static {
    public static final BitSet FOLLOW_155_in_pos4782 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_pos4784_static {
    public static final BitSet FOLLOW_TOKEN_in_pos4784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_prp4799_static {
    public static final BitSet FOLLOW_156_in_prp4799 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_prp4801_static {
    public static final BitSet FOLLOW_TOKEN_in_prp4801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_prp_poss4816_static {
    public static final BitSet FOLLOW_157_in_prp_poss4816 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_prp_poss4818_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss4818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_rb4833_static {
    public static final BitSet FOLLOW_158_in_rb4833 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rb4835_static {
    public static final BitSet FOLLOW_TOKEN_in_rb4835 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_rbr4850_static {
    public static final BitSet FOLLOW_159_in_rbr4850 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rbr4852_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr4852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_rbs4867_static {
    public static final BitSet FOLLOW_160_in_rbs4867 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rbs4869_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs4869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_rp4884_static {
    public static final BitSet FOLLOW_161_in_rp4884 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_rp4886_static {
    public static final BitSet FOLLOW_TOKEN_in_rp4886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_sym4901_static {
    public static final BitSet FOLLOW_162_in_sym4901 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_sym4903_static {
    public static final BitSet FOLLOW_TOKEN_in_sym4903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_to4918_static {
    public static final BitSet FOLLOW_163_in_to4918 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_to4920_static {
    public static final BitSet FOLLOW_TOKEN_in_to4920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_uh4935_static {
    public static final BitSet FOLLOW_164_in_uh4935 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_uh4937_static {
    public static final BitSet FOLLOW_TOKEN_in_uh4937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_vb4952_static {
    public static final BitSet FOLLOW_165_in_vb4952 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vb4954_static {
    public static final BitSet FOLLOW_TOKEN_in_vb4954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_vbd4969_static {
    public static final BitSet FOLLOW_166_in_vbd4969 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbd4971_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd4971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_vbg4986_static {
    public static final BitSet FOLLOW_167_in_vbg4986 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbg4988_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg4988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_vbn5003_static {
    public static final BitSet FOLLOW_168_in_vbn5003 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbn5005_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5005 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_vbp5020_static {
    public static final BitSet FOLLOW_169_in_vbp5020 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbp5022_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_vbz5037_static {
    public static final BitSet FOLLOW_170_in_vbz5037 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_vbz5039_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5039 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_wdt5054_static {
    public static final BitSet FOLLOW_171_in_wdt5054 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wdt5056_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_wp5071_static {
    public static final BitSet FOLLOW_172_in_wp5071 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wp5073_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_wp_poss5088_static {
    public static final BitSet FOLLOW_173_in_wp_poss5088 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5090_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_wrb5105_static {
    public static final BitSet FOLLOW_174_in_wrb5105 = new BitSet(new long[]{0x0000000200000000L});

    }static class FOLLOW_TOKEN_in_wrb5107_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5107 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker204_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker204 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker206_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker220_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker222_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker224_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker226_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker231_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker231 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker233_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker238_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker240_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker242_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker242 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker444_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred82_ChemicalChunker444 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred84_ChemicalChunker475_static {
    public static final BitSet FOLLOW_dt_in_synpred84_ChemicalChunker475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred85_ChemicalChunker478_static {
    public static final BitSet FOLLOW_advAdj_in_synpred85_ChemicalChunker478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker483_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred86_ChemicalChunker483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred87_ChemicalChunker485_static {
    public static final BitSet FOLLOW_ratio_in_synpred87_ChemicalChunker485 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred88_ChemicalChunker487_static {
    public static final BitSet FOLLOW_noun_in_synpred88_ChemicalChunker487 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred89_ChemicalChunker489_static {
    public static final BitSet FOLLOW_number_in_synpred89_ChemicalChunker489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred90_ChemicalChunker497_static {
    public static final BitSet FOLLOW_conjunction_in_synpred90_ChemicalChunker497 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred91_ChemicalChunker500_static {
    public static final BitSet FOLLOW_advAdj_in_synpred91_ChemicalChunker500 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker504_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred93_ChemicalChunker506_static {
    public static final BitSet FOLLOW_ratio_in_synpred93_ChemicalChunker506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred94_ChemicalChunker508_static {
    public static final BitSet FOLLOW_noun_in_synpred94_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker497_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker497 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEFA41L});

    }static class FOLLOW_advAdj_in_synpred95_ChemicalChunker500_static {
    public static final BitSet FOLLOW_advAdj_in_synpred95_ChemicalChunker500 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x00007807FFDEF241L});

    }static class FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker504_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred95_ChemicalChunker504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred95_ChemicalChunker506_static {
    public static final BitSet FOLLOW_ratio_in_synpred95_ChemicalChunker506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred95_ChemicalChunker508_static {
    public static final BitSet FOLLOW_noun_in_synpred95_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred95_ChemicalChunker510_static {
    public static final BitSet FOLLOW_number_in_synpred95_ChemicalChunker510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker526_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker520_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred98_ChemicalChunker520 = new BitSet(new long[]{0x0000061C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker523_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker523 = new BitSet(new long[]{0x0000061C00000002L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker526_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker540_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred99_ChemicalChunker540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred100_ChemicalChunker571_static {
    public static final BitSet FOLLOW_adj_in_synpred100_ChemicalChunker571 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred101_ChemicalChunker578_static {
    public static final BitSet FOLLOW_molecule_in_synpred101_ChemicalChunker578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker580_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred102_ChemicalChunker580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred104_ChemicalChunker588_static {
    public static final BitSet FOLLOW_molecule_in_synpred104_ChemicalChunker588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred106_ChemicalChunker600_static {
    public static final BitSet FOLLOW_adj_in_synpred106_ChemicalChunker600 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker607_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker613_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker613 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker615_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred110_ChemicalChunker595_static {
    public static final BitSet FOLLOW_inin_in_synpred110_ChemicalChunker595 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1301L});

    }static class FOLLOW_dtTHE_in_synpred110_ChemicalChunker597_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred110_ChemicalChunker597 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_adj_in_synpred110_ChemicalChunker600_static {
    public static final BitSet FOLLOW_adj_in_synpred110_ChemicalChunker600 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_nnp_in_synpred110_ChemicalChunker603_static {
    public static final BitSet FOLLOW_nnp_in_synpred110_ChemicalChunker603 = new BitSet(new long[]{0x0000061C00000000L,0x0000000000008000L,0x00000000010E1201L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker607_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker609_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_conjunction_in_synpred110_ChemicalChunker613_static {
    public static final BitSet FOLLOW_conjunction_in_synpred110_ChemicalChunker613 = new BitSet(new long[]{0x0000021C00000000L,0x0000000000008000L,0x00000000000E1201L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker615_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000801L});

    }static class FOLLOW_to_in_synpred112_ChemicalChunker651_static {
    public static final BitSet FOLLOW_to_in_synpred112_ChemicalChunker651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred113_ChemicalChunker654_static {
    public static final BitSet FOLLOW_inAll_in_synpred113_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred119_ChemicalChunker673_static {
    public static final BitSet FOLLOW_verb_in_synpred119_ChemicalChunker673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred120_ChemicalChunker676_static {
    public static final BitSet FOLLOW_md_in_synpred120_ChemicalChunker676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred121_ChemicalChunker679_static {
    public static final BitSet FOLLOW_adv_in_synpred121_ChemicalChunker679 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred122_ChemicalChunker682_static {
    public static final BitSet FOLLOW_adj_in_synpred122_ChemicalChunker682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred123_ChemicalChunker685_static {
    public static final BitSet FOLLOW_neg_in_synpred123_ChemicalChunker685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred124_ChemicalChunker661_static {
    public static final BitSet FOLLOW_md_in_synpred124_ChemicalChunker661 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_rbconj_in_synpred124_ChemicalChunker664_static {
    public static final BitSet FOLLOW_rbconj_in_synpred124_ChemicalChunker664 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adv_in_synpred124_ChemicalChunker667_static {
    public static final BitSet FOLLOW_adv_in_synpred124_ChemicalChunker667 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_adj_in_synpred124_ChemicalChunker670_static {
    public static final BitSet FOLLOW_adj_in_synpred124_ChemicalChunker670 = new BitSet(new long[]{0x07FFFA1800000000L,0x5DBAFABD7FCF0000L,0x000007EBC02F2000L});

    }static class FOLLOW_verb_in_synpred124_ChemicalChunker673_static {
    public static final BitSet FOLLOW_verb_in_synpred124_ChemicalChunker673 = new BitSet(new long[]{0x07FFFA1800000002L,0x5DBAFABD7FCF0000L,0x000007EBC02F2004L});

    }static class FOLLOW_md_in_synpred124_ChemicalChunker676_static {
    public static final BitSet FOLLOW_md_in_synpred124_ChemicalChunker676 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000003C02E0004L});

    }static class FOLLOW_adv_in_synpred124_ChemicalChunker679_static {
    public static final BitSet FOLLOW_adv_in_synpred124_ChemicalChunker679 = new BitSet(new long[]{0x0000021800000002L,0x0000000000000000L,0x00000003C00E0004L});

    }static class FOLLOW_adj_in_synpred124_ChemicalChunker682_static {
    public static final BitSet FOLLOW_adj_in_synpred124_ChemicalChunker682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_neg_in_synpred124_ChemicalChunker685_static {
    public static final BitSet FOLLOW_neg_in_synpred124_ChemicalChunker685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred125_ChemicalChunker691_static {
    public static final BitSet FOLLOW_inoff_in_synpred125_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred128_ChemicalChunker695_static {
    public static final BitSet FOLLOW_cc_in_synpred128_ChemicalChunker695 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3005L});

    }static class FOLLOW_comma_in_synpred128_ChemicalChunker698_static {
    public static final BitSet FOLLOW_comma_in_synpred128_ChemicalChunker698 = new BitSet(new long[]{0x17FFFA1800000000L,0x0000000000000010L,0x0000000BC00F3004L});

    }static class FOLLOW_prepphrase_in_synpred128_ChemicalChunker701_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred128_ChemicalChunker701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker731_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred151_ChemicalChunker757_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred151_ChemicalChunker757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred169_ChemicalChunker819_static {
    public static final BitSet FOLLOW_dash_in_synpred169_ChemicalChunker819 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_nounStructure_in_synpred169_ChemicalChunker821_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred169_ChemicalChunker821 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred172_ChemicalChunker836_static {
    public static final BitSet FOLLOW_citation_in_synpred172_ChemicalChunker836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred173_ChemicalChunker838_static {
    public static final BitSet FOLLOW_cycles_in_synpred173_ChemicalChunker838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred174_ChemicalChunker840_static {
    public static final BitSet FOLLOW_molecule_in_synpred174_ChemicalChunker840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred175_ChemicalChunker842_static {
    public static final BitSet FOLLOW_apparatus_in_synpred175_ChemicalChunker842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred176_ChemicalChunker844_static {
    public static final BitSet FOLLOW_mixture_in_synpred176_ChemicalChunker844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker846_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred179_ChemicalChunker850_static {
    public static final BitSet FOLLOW_nnstate_in_synpred179_ChemicalChunker850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred180_ChemicalChunker852_static {
    public static final BitSet FOLLOW_nn_in_synpred180_ChemicalChunker852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred183_ChemicalChunker858_static {
    public static final BitSet FOLLOW_nnadd_in_synpred183_ChemicalChunker858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred186_ChemicalChunker864_static {
    public static final BitSet FOLLOW_range_in_synpred186_ChemicalChunker864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred192_ChemicalChunker876_static {
    public static final BitSet FOLLOW_quantity_in_synpred192_ChemicalChunker876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred193_ChemicalChunker878_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred193_ChemicalChunker878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred199_ChemicalChunker890_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred199_ChemicalChunker890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred212_ChemicalChunker916_static {
    public static final BitSet FOLLOW_number_in_synpred212_ChemicalChunker916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred213_ChemicalChunker918_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred213_ChemicalChunker918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker956_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred225_ChemicalChunker956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker958_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred226_ChemicalChunker958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker960_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred227_ChemicalChunker960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker962_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred228_ChemicalChunker962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker964_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred229_ChemicalChunker964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred231_ChemicalChunker1004_static {
    public static final BitSet FOLLOW_advAdj_in_synpred231_ChemicalChunker1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1009_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred232_ChemicalChunker1009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred233_ChemicalChunker1037_static {
    public static final BitSet FOLLOW_advAdj_in_synpred233_ChemicalChunker1037 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred238_ChemicalChunker1053_static {
    public static final BitSet FOLLOW_nntime_in_synpred238_ChemicalChunker1053 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred239_ChemicalChunker1084_static {
    public static final BitSet FOLLOW_advAdj_in_synpred239_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred244_ChemicalChunker1099_static {
    public static final BitSet FOLLOW_nntemp_in_synpred244_ChemicalChunker1099 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred250_ChemicalChunker1272_static {
    public static final BitSet FOLLOW_conjunction_in_synpred250_ChemicalChunker1272 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred251_ChemicalChunker1272_static {
    public static final BitSet FOLLOW_conjunction_in_synpred251_ChemicalChunker1272 = new BitSet(new long[]{0x0800021C00000000L,0x0000000080108108L,0x00000000004E3A01L});

    }static class FOLLOW_apparatus_in_synpred251_ChemicalChunker1275_static {
    public static final BitSet FOLLOW_apparatus_in_synpred251_ChemicalChunker1275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred254_ChemicalChunker1292_static {
    public static final BitSet FOLLOW_nnApp_in_synpred254_ChemicalChunker1292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1319_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred255_ChemicalChunker1319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred256_ChemicalChunker1323_static {
    public static final BitSet FOLLOW_dash_in_synpred256_ChemicalChunker1323 = new BitSet(new long[]{0x0800021C00000000L,0x0000000080108108L,0x00000000004E3201L});

    }static class FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1325_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred257_ChemicalChunker1339_static {
    public static final BitSet FOLLOW_quantity_in_synpred257_ChemicalChunker1339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred258_ChemicalChunker1341_static {
    public static final BitSet FOLLOW_adj_in_synpred258_ChemicalChunker1341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred259_ChemicalChunker1343_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred259_ChemicalChunker1343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred260_ChemicalChunker1345_static {
    public static final BitSet FOLLOW_nnadd_in_synpred260_ChemicalChunker1345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred261_ChemicalChunker1347_static {
    public static final BitSet FOLLOW_molecule_in_synpred261_ChemicalChunker1347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred262_ChemicalChunker1349_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred262_ChemicalChunker1349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred263_ChemicalChunker1351_static {
    public static final BitSet FOLLOW_nnstate_in_synpred263_ChemicalChunker1351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred264_ChemicalChunker1353_static {
    public static final BitSet FOLLOW_nn_in_synpred264_ChemicalChunker1353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred265_ChemicalChunker1366_static {
    public static final BitSet FOLLOW_oscaront_in_synpred265_ChemicalChunker1366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound1_in_synpred267_ChemicalChunker1390_static {
    public static final BitSet FOLLOW_oscarCompound1_in_synpred267_ChemicalChunker1390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound3_in_synpred269_ChemicalChunker1394_static {
    public static final BitSet FOLLOW_oscarCompound3_in_synpred269_ChemicalChunker1394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred271_ChemicalChunker1401_static {
    public static final BitSet FOLLOW_adj_in_synpred271_ChemicalChunker1401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_reference_in_synpred272_ChemicalChunker1404_static {
    public static final BitSet FOLLOW_reference_in_synpred272_ChemicalChunker1404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred273_ChemicalChunker1479_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred273_ChemicalChunker1479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred274_ChemicalChunker1505_static {
    public static final BitSet FOLLOW_dash_in_synpred274_ChemicalChunker1505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred275_ChemicalChunker1507_static {
    public static final BitSet FOLLOW_apost_in_synpred275_ChemicalChunker1507 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred276_ChemicalChunker1521_static {
    public static final BitSet FOLLOW_dash_in_synpred276_ChemicalChunker1521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_oscarcm_in_synpred276_ChemicalChunker1523_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred276_ChemicalChunker1523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred277_ChemicalChunker1528_static {
    public static final BitSet FOLLOW_dash_in_synpred277_ChemicalChunker1528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred278_ChemicalChunker1556_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred278_ChemicalChunker1556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred279_ChemicalChunker1558_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred279_ChemicalChunker1558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred280_ChemicalChunker1572_static {
    public static final BitSet FOLLOW_quantity_in_synpred280_ChemicalChunker1572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred282_ChemicalChunker1594_static {
    public static final BitSet FOLLOW_quantity_in_synpred282_ChemicalChunker1594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred283_ChemicalChunker1596_static {
    public static final BitSet FOLLOW_mixture_in_synpred283_ChemicalChunker1596 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred286_ChemicalChunker1610_static {
    public static final BitSet FOLLOW_mixture_in_synpred286_ChemicalChunker1610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred287_ChemicalChunker1620_static {
    public static final BitSet FOLLOW_quantity_in_synpred287_ChemicalChunker1620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred288_ChemicalChunker1622_static {
    public static final BitSet FOLLOW_mixture_in_synpred288_ChemicalChunker1622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1626_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1626 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred291_ChemicalChunker1636_static {
    public static final BitSet FOLLOW_quantity_in_synpred291_ChemicalChunker1636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanumType_in_synpred292_ChemicalChunker1632_static {
    public static final BitSet FOLLOW_cdAlphanumType_in_synpred292_ChemicalChunker1632 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_number_in_synpred292_ChemicalChunker1634_static {
    public static final BitSet FOLLOW_number_in_synpred292_ChemicalChunker1634 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_quantity_in_synpred292_ChemicalChunker1636_static {
    public static final BitSet FOLLOW_quantity_in_synpred292_ChemicalChunker1636 = new BitSet(new long[]{0x0000000400000002L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_citation_in_synpred293_ChemicalChunker1641_static {
    public static final BitSet FOLLOW_citation_in_synpred293_ChemicalChunker1641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred294_ChemicalChunker1643_static {
    public static final BitSet FOLLOW_quantity_in_synpred294_ChemicalChunker1643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred296_ChemicalChunker1645_static {
    public static final BitSet FOLLOW_comma_in_synpred296_ChemicalChunker1645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_quantity1Node_in_synpred296_ChemicalChunker1648_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred296_ChemicalChunker1648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred296_ChemicalChunker1650_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred296_ChemicalChunker1650 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred297_ChemicalChunker1653_static {
    public static final BitSet FOLLOW_mixture_in_synpred297_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_synpred299_ChemicalChunker1684_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred299_ChemicalChunker1684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred300_ChemicalChunker1688_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred300_ChemicalChunker1688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_synpred301_ChemicalChunker1692_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred301_ChemicalChunker1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_synpred302_ChemicalChunker1718_static {
    public static final BitSet FOLLOW_cdAlphanum_in_synpred302_ChemicalChunker1718 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred303_ChemicalChunker1722_static {
    public static final BitSet FOLLOW_quantity_in_synpred303_ChemicalChunker1722 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred304_ChemicalChunker1724_static {
    public static final BitSet FOLLOW_mixture_in_synpred304_ChemicalChunker1724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred307_ChemicalChunker1759_static {
    public static final BitSet FOLLOW_citation_in_synpred307_ChemicalChunker1759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred308_ChemicalChunker1761_static {
    public static final BitSet FOLLOW_quantity_in_synpred308_ChemicalChunker1761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred309_ChemicalChunker1763_static {
    public static final BitSet FOLLOW_mixture_in_synpred309_ChemicalChunker1763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred310_ChemicalChunker1778_static {
    public static final BitSet FOLLOW_jj_in_synpred310_ChemicalChunker1778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred311_ChemicalChunker1778_static {
    public static final BitSet FOLLOW_jj_in_synpred311_ChemicalChunker1778 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_synpred311_ChemicalChunker1781_static {
    public static final BitSet FOLLOW_noun_in_synpred311_ChemicalChunker1781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred312_ChemicalChunker1792_static {
    public static final BitSet FOLLOW_quantity_in_synpred312_ChemicalChunker1792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred317_ChemicalChunker1898_static {
    public static final BitSet FOLLOW_comma_in_synpred317_ChemicalChunker1898 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001200L});

    }static class FOLLOW_measurements_in_synpred317_ChemicalChunker1901_static {
    public static final BitSet FOLLOW_measurements_in_synpred317_ChemicalChunker1901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred320_ChemicalChunker1929_static {
    public static final BitSet FOLLOW_dt_in_synpred320_ChemicalChunker1929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred321_ChemicalChunker1941_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred321_ChemicalChunker1941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred326_ChemicalChunker1974_static {
    public static final BitSet FOLLOW_yield_in_synpred326_ChemicalChunker1974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred336_ChemicalChunker2219_static {
    public static final BitSet FOLLOW_fw_in_synpred336_ChemicalChunker2219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred337_ChemicalChunker2221_static {
    public static final BitSet FOLLOW_verb_in_synpred337_ChemicalChunker2221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred338_ChemicalChunker2223_static {
    public static final BitSet FOLLOW_nn_in_synpred338_ChemicalChunker2223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred339_ChemicalChunker2225_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred339_ChemicalChunker2225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred342_ChemicalChunker2231_static {
    public static final BitSet FOLLOW_stop_in_synpred342_ChemicalChunker2231 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred343_ChemicalChunker2233_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred343_ChemicalChunker2233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred344_ChemicalChunker2235_static {
    public static final BitSet FOLLOW_molecule_in_synpred344_ChemicalChunker2235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred345_ChemicalChunker2237_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred345_ChemicalChunker2237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred347_ChemicalChunker2241_static {
    public static final BitSet FOLLOW_sym_in_synpred347_ChemicalChunker2241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred348_ChemicalChunker2243_static {
    public static final BitSet FOLLOW_cd_in_synpred348_ChemicalChunker2243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred349_ChemicalChunker2245_static {
    public static final BitSet FOLLOW_noun_in_synpred349_ChemicalChunker2245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred351_ChemicalChunker2249_static {
    public static final BitSet FOLLOW_cd_in_synpred351_ChemicalChunker2249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred352_ChemicalChunker2251_static {
    public static final BitSet FOLLOW_comma_in_synpred352_ChemicalChunker2251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred353_ChemicalChunker2253_static {
    public static final BitSet FOLLOW_adj_in_synpred353_ChemicalChunker2253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred355_ChemicalChunker2261_static {
    public static final BitSet FOLLOW_minimixture_in_synpred355_ChemicalChunker2261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred356_ChemicalChunker2263_static {
    public static final BitSet FOLLOW_fw_in_synpred356_ChemicalChunker2263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred357_ChemicalChunker2265_static {
    public static final BitSet FOLLOW_verb_in_synpred357_ChemicalChunker2265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2267_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred359_ChemicalChunker2269_static {
    public static final BitSet FOLLOW_nnyield_in_synpred359_ChemicalChunker2269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred362_ChemicalChunker2275_static {
    public static final BitSet FOLLOW_stop_in_synpred362_ChemicalChunker2275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred363_ChemicalChunker2277_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred363_ChemicalChunker2277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred364_ChemicalChunker2279_static {
    public static final BitSet FOLLOW_molecule_in_synpred364_ChemicalChunker2279 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred365_ChemicalChunker2281_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred365_ChemicalChunker2281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred367_ChemicalChunker2285_static {
    public static final BitSet FOLLOW_sym_in_synpred367_ChemicalChunker2285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred368_ChemicalChunker2287_static {
    public static final BitSet FOLLOW_cd_in_synpred368_ChemicalChunker2287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred369_ChemicalChunker2289_static {
    public static final BitSet FOLLOW_noun_in_synpred369_ChemicalChunker2289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred371_ChemicalChunker2293_static {
    public static final BitSet FOLLOW_cd_in_synpred371_ChemicalChunker2293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred372_ChemicalChunker2295_static {
    public static final BitSet FOLLOW_comma_in_synpred372_ChemicalChunker2295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred373_ChemicalChunker2297_static {
    public static final BitSet FOLLOW_adj_in_synpred373_ChemicalChunker2297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred375_ChemicalChunker2301_static {
    public static final BitSet FOLLOW_stop_in_synpred375_ChemicalChunker2301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred377_ChemicalChunker2363_static {
    public static final BitSet FOLLOW_fw_in_synpred377_ChemicalChunker2363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred378_ChemicalChunker2365_static {
    public static final BitSet FOLLOW_nn_in_synpred378_ChemicalChunker2365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred379_ChemicalChunker2367_static {
    public static final BitSet FOLLOW_verb_in_synpred379_ChemicalChunker2367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred380_ChemicalChunker2369_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred380_ChemicalChunker2369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred383_ChemicalChunker2375_static {
    public static final BitSet FOLLOW_stop_in_synpred383_ChemicalChunker2375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred384_ChemicalChunker2377_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred384_ChemicalChunker2377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred385_ChemicalChunker2379_static {
    public static final BitSet FOLLOW_molecule_in_synpred385_ChemicalChunker2379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred386_ChemicalChunker2381_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred386_ChemicalChunker2381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred388_ChemicalChunker2385_static {
    public static final BitSet FOLLOW_sym_in_synpred388_ChemicalChunker2385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred389_ChemicalChunker2387_static {
    public static final BitSet FOLLOW_cd_in_synpred389_ChemicalChunker2387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred390_ChemicalChunker2389_static {
    public static final BitSet FOLLOW_noun_in_synpred390_ChemicalChunker2389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred392_ChemicalChunker2393_static {
    public static final BitSet FOLLOW_cd_in_synpred392_ChemicalChunker2393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred393_ChemicalChunker2395_static {
    public static final BitSet FOLLOW_comma_in_synpred393_ChemicalChunker2395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred394_ChemicalChunker2397_static {
    public static final BitSet FOLLOW_adj_in_synpred394_ChemicalChunker2397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred396_ChemicalChunker2405_static {
    public static final BitSet FOLLOW_fw_in_synpred396_ChemicalChunker2405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred397_ChemicalChunker2407_static {
    public static final BitSet FOLLOW_verb_in_synpred397_ChemicalChunker2407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred398_ChemicalChunker2409_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred398_ChemicalChunker2409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred399_ChemicalChunker2411_static {
    public static final BitSet FOLLOW_nnyield_in_synpred399_ChemicalChunker2411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred402_ChemicalChunker2417_static {
    public static final BitSet FOLLOW_stop_in_synpred402_ChemicalChunker2417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2419_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred404_ChemicalChunker2421_static {
    public static final BitSet FOLLOW_molecule_in_synpred404_ChemicalChunker2421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2423_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred407_ChemicalChunker2427_static {
    public static final BitSet FOLLOW_sym_in_synpred407_ChemicalChunker2427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred408_ChemicalChunker2429_static {
    public static final BitSet FOLLOW_cd_in_synpred408_ChemicalChunker2429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred409_ChemicalChunker2431_static {
    public static final BitSet FOLLOW_noun_in_synpred409_ChemicalChunker2431 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred411_ChemicalChunker2435_static {
    public static final BitSet FOLLOW_cd_in_synpred411_ChemicalChunker2435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred412_ChemicalChunker2437_static {
    public static final BitSet FOLLOW_comma_in_synpred412_ChemicalChunker2437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred413_ChemicalChunker2439_static {
    public static final BitSet FOLLOW_adj_in_synpred413_ChemicalChunker2439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred415_ChemicalChunker2443_static {
    public static final BitSet FOLLOW_stop_in_synpred415_ChemicalChunker2443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberratio_in_synpred432_ChemicalChunker2590_static {
    public static final BitSet FOLLOW_numberratio_in_synpred432_ChemicalChunker2590 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred433_ChemicalChunker2618_static {
    public static final BitSet FOLLOW_colon_in_synpred433_ChemicalChunker2618 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_cdAlphanum_in_synpred433_ChemicalChunker2620_static {
    public static final BitSet FOLLOW_cdAlphanum_in_synpred433_ChemicalChunker2620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred434_ChemicalChunker2622_static {
    public static final BitSet FOLLOW_cd_in_synpred434_ChemicalChunker2622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred435_ChemicalChunker2638_static {
    public static final BitSet FOLLOW_colon_in_synpred435_ChemicalChunker2638 = new BitSet(new long[]{0x580006FC00000000L,0x234505428030FFFFL,0x000078043FDEF241L});

    }static class FOLLOW_noun_in_synpred435_ChemicalChunker2640_static {
    public static final BitSet FOLLOW_noun_in_synpred435_ChemicalChunker2640 = new BitSet(new long[]{0x0000000000000002L});

    }
}